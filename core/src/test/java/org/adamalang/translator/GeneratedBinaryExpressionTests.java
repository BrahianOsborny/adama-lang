/*
 * This file is subject to the terms and conditions outlined in the file 'LICENSE' (hint: it's MIT); this file is located in the root directory near the README.md which you should also read.
 *
 * This file is part of the 'Adama' project which is a programming language and document store for board games; however, it can be so much more.
 *
 * See http://www.adama-lang.org/ for more information.
 *
 * (c) 2020 - 2022 by Jeffrey M. Barber (http://jeffrey.io)
 */
package org.adamalang.translator;

import org.junit.Test;

public class GeneratedBinaryExpressionTests extends GeneratedBase {
  private String cached_AggregateMath_1 = null;
  private String get_AggregateMath_1() {
    if (cached_AggregateMath_1 != null) {
      return cached_AggregateMath_1;
    }
    cached_AggregateMath_1 = generateTestOutput(true, "AggregateMath_1", "./test_code/BinaryExpression_AggregateMath_success.a");
    return cached_AggregateMath_1;
  }

  @Test
  public void testAggregateMathEmission() {
    assertEmissionGood(get_AggregateMath_1());
  }

  @Test
  public void testAggregateMathSuccess() {
    assertLivePass(get_AggregateMath_1());
  }

  @Test
  public void testAggregateMathGoodWillHappy() {
    assertGoodWillHappy(get_AggregateMath_1());
  }

  @Test
  public void testAggregateMathExceptionFree() {
    assertExceptionFree(get_AggregateMath_1());
  }

  @Test
  public void testAggregateMathTODOFree() {
    assertTODOFree(get_AggregateMath_1());
  }

  @Test
  public void stable_AggregateMath_1() {
    String live = get_AggregateMath_1();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_AggregateMath_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[]\"--JAVA---------------------------------------------");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.delta.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.json.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport org.adamalang.runtime.sys.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.util.HashMap;");
    gold.append("\nimport java.util.HashSet;");
    gold.append("\nimport java.util.Map;");
    gold.append("\nimport java.util.Set;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class AggregateMath_1 extends LivingDocument {");
    gold.append("\n  private final RxTable<RTxX> t;");
    gold.append("\n  @Override");
    gold.append("\n  public long __memory() {");
    gold.append("\n    long __sum = super.__memory();");
    gold.append("\n    __sum += t.__memory();");
    gold.append("\n    return __sum;");
    gold.append("\n  }");
    gold.append("\n  public AggregateMath_1(DocumentMonitor __monitor) {");
    gold.append("\n    super(__monitor);");
    gold.append("\n    t = new RxTable<>(__self, this, \"t\", (RxParent __parent) -> new RTxX(__parent), 0);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __insert(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"t\":");
    gold.append("\n            t.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __patch(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"t\":");
    gold.append("\n            t.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n    __writer.beginObject();");
    gold.append("\n    __writer.writeObjectFieldIntro(\"t\");");
    gold.append("\n    t.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__state\");");
    gold.append("\n    __state.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__constructed\");");
    gold.append("\n    __constructed.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__next_time\");");
    gold.append("\n    __next_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__last_expire_time\");");
    gold.append("\n    __last_expire_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__blocked\");");
    gold.append("\n    __blocked.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__seq\");");
    gold.append("\n    __seq.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__entropy\");");
    gold.append("\n    __entropy.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_future_id\");");
    gold.append("\n    __auto_future_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__connection_id\");");
    gold.append("\n    __connection_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__message_id\");");
    gold.append("\n    __message_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__time\");");
    gold.append("\n    __time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_table_row_id\");");
    gold.append("\n    __auto_table_row_id.__dump(__writer);");
    gold.append("\n    __dumpDeduper(__writer);");
    gold.append("\n    __dumpClients(__writer);");
    gold.append("\n    __dumpMessages(__writer);");
    gold.append("\n    __writer.endObject();");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n    __state.__commit(\"__state\", __forward, __reverse);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __forward, __reverse);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __forward, __reverse);");
    gold.append("\n    __last_expire_time.__commit(\"__last_expire_time\", __forward, __reverse);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __forward, __reverse);");
    gold.append("\n    __seq.__commit(\"__seq\", __forward, __reverse);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __forward, __reverse);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __forward, __reverse);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __forward, __reverse);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __forward, __reverse);");
    gold.append("\n    __time.__commit(\"__time\", __forward, __reverse);");
    gold.append("\n    __auto_table_row_id.__commit(\"__auto_table_row_id\", __forward, __reverse);");
    gold.append("\n    t.__commit(\"t\", __forward, __reverse);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __last_expire_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    __auto_table_row_id.__revert();");
    gold.append("\n    t.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  private class DeltaAggregateMath_1 implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaAggregateMath_1() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(AggregateMath_1 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __obj.manifest();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public Set<String> __get_intern_strings() {");
    gold.append("\n    HashSet<String> __interns = new HashSet<>();");
    gold.append("\n    __interns.add(\"\");");
    gold.append("\n    __interns.add(\"?\");");
    gold.append("\n    return __interns;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public PrivateView __createPrivateView(NtClient __who, Perspective ___perspective) {");
    gold.append("\n    AggregateMath_1 __self = this;");
    gold.append("\n    DeltaAggregateMath_1 __state = new DeltaAggregateMath_1();");
    gold.append("\n    RTx__ViewerType __viewerState = new RTx__ViewerType();");
    gold.append("\n    return new PrivateView(__who, ___perspective) {");
    gold.append("\n      @Override");
    gold.append("\n      public long memory() {");
    gold.append("\n        return __state.__memory();");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void dumpViewer(JsonStreamWriter __writer) {");
    gold.append("\n        __viewerState.__writeOut(__writer);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void ingest(JsonStreamReader __reader) {");
    gold.append("\n        __viewerState.__ingest(__reader);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void update(JsonStreamWriter __writer) {");
    gold.append("\n        __state.show(__self, PrivateLazyDeltaWriter.bind(__who, __writer, __viewerState));");
    gold.append("\n      }");
    gold.append("\n    };");
    gold.append("\n  }");
    gold.append("\n  private static class RTx__ViewerType implements NtMessageBase {");
    gold.append("\n    private RTx__ViewerType(JsonStreamReader __reader) {");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    public int __DATA_GENERATION = 1;");
    gold.append("\n    private void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.skipValue();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx__ViewerType() {}");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx__ViewerType implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx__ViewerType() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx__ViewerType __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static String[] __INDEX_COLUMNS_X = new String[] {\"i\"};");
    gold.append("\n  private class RTxX extends RxRecordBase<RTxX> {");
    gold.append("\n    private final RxInt32 i;");
    gold.append("\n    private final RxDouble d;");
    gold.append("\n    private final RxString s;");
    gold.append("\n    private final RxInt32 id;");
    gold.append("\n    private RTxX(RxParent __owner) {");
    gold.append("\n      super(__owner);");
    gold.append("\n      i = new RxInt32(this, 1);");
    gold.append("\n      d = new RxDouble(this, 1);");
    gold.append("\n      s = new RxString(this, \"x\");");
    gold.append("\n      id = new RxInt32(this, 0);");
    gold.append("\n      if (__owner instanceof RxTable) {");
    gold.append("\n        /* ok */");
    gold.append("\n      } else {");
    gold.append("\n        /* ok */");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = super.__memory();");
    gold.append("\n      __sum += i.__memory();");
    gold.append("\n      __sum += d.__memory();");
    gold.append("\n      __sum += s.__memory();");
    gold.append("\n      __sum += id.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String[] __getIndexColumns() {");
    gold.append("\n      return __INDEX_COLUMNS_X;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int[] __getIndexValues() {");
    gold.append("\n      return new int[] {i.getIndexValue()};");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __insert(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while(__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"i\":");
    gold.append("\n              i.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"d\":");
    gold.append("\n              d.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"s\":");
    gold.append("\n              s.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"id\":");
    gold.append("\n              id.__insert(__reader);");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __patch(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while(__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"i\":");
    gold.append("\n              i.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"d\":");
    gold.append("\n              d.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"s\":");
    gold.append("\n              s.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            case \"id\":");
    gold.append("\n              id.__patch(__reader);");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"i\");");
    gold.append("\n      i.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"d\");");
    gold.append("\n      d.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"s\");");
    gold.append("\n      s.__dump(__writer);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"id\");");
    gold.append("\n      id.__dump(__writer);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __forward.writeObjectFieldIntro(__name);");
    gold.append("\n        __forward.beginObject();");
    gold.append("\n        __reverse.writeObjectFieldIntro(__name);");
    gold.append("\n        __reverse.beginObject();");
    gold.append("\n        i.__commit(\"i\", __forward, __reverse);");
    gold.append("\n        d.__commit(\"d\", __forward, __reverse);");
    gold.append("\n        s.__commit(\"s\", __forward, __reverse);");
    gold.append("\n        id.__commit(\"id\", __forward, __reverse);");
    gold.append("\n        __forward.endObject();");
    gold.append("\n        __reverse.endObject();");
    gold.append("\n        __lowerDirtyCommit();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __revert() {");
    gold.append("\n      if (__isDirty()) {");
    gold.append("\n        __isDying = false;");
    gold.append("\n        i.__revert();");
    gold.append("\n        d.__revert();");
    gold.append("\n        s.__revert();");
    gold.append("\n        id.__revert();");
    gold.append("\n        __lowerDirtyRevert();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public String __name() {");
    gold.append("\n      return \"X\";");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __deindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    public void __reindex() {");
    gold.append("\n      /* ok */");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public int __id() {");
    gold.append("\n      return id.get();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __setId(int __id, boolean __force) {");
    gold.append("\n      if (__force) {");
    gold.append("\n        id.forceSet(__id);");
    gold.append("\n      } else {");
    gold.append("\n        id.set(__id);");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTxX implements DeltaNode {");
    gold.append("\n    private DInt32 __di;");
    gold.append("\n    private DDouble __dd;");
    gold.append("\n    private DString __ds;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTxX() {");
    gold.append("\n      __di = new DInt32();");
    gold.append("\n      __dd = new DDouble();");
    gold.append("\n      __ds = new DString();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __di.__memory();");
    gold.append("\n      __sum += __dd.__memory();");
    gold.append("\n      __sum += __ds.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTxX __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __di.show(__item.i.get(), __obj.planField(\"i\"));");
    gold.append("\n      __dd.show(__item.d.get(), __obj.planField(\"d\"));");
    gold.append("\n      __ds.show(__item.s.get(), __obj.planField(\"s\"));");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private static class RTx_AnonObjConvert_0 implements NtMessageBase {");
    gold.append("\n    private int d = 0;");
    gold.append("\n    private int i = 0;");
    gold.append("\n    private RTx_AnonObjConvert_0(JsonStreamReader __reader) {");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    private void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      if (__reader.startObject()) {");
    gold.append("\n        while (__reader.notEndOfObject()) {");
    gold.append("\n          String __fieldName = __reader.fieldName();");
    gold.append("\n          switch (__fieldName) {");
    gold.append("\n            case \"d\":");
    gold.append("\n              this.d = __reader.readInteger();");
    gold.append("\n              break;");
    gold.append("\n            case \"i\":");
    gold.append("\n              this.i = __reader.readInteger();");
    gold.append("\n              break;");
    gold.append("\n            default:");
    gold.append("\n              __reader.skipValue();");
    gold.append("\n          }");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.writeObjectFieldIntro(\"d\");");
    gold.append("\n      __writer.writeInteger(d);");
    gold.append("\n      __writer.writeObjectFieldIntro(\"i\");");
    gold.append("\n      __writer.writeInteger(i);");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx_AnonObjConvert_0() {}");
    gold.append("\n    private RTx_AnonObjConvert_0(int d, int i) {");
    gold.append("\n      this.d = d;");
    gold.append("\n      this.i = i;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx_AnonObjConvert_0 implements DeltaNode {");
    gold.append("\n    private DInt32 __dd;");
    gold.append("\n    private DInt32 __di;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx_AnonObjConvert_0() {");
    gold.append("\n      __dd = new DInt32();");
    gold.append("\n      __di = new DInt32();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __dd.__memory();");
    gold.append("\n      __sum += __di.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx_AnonObjConvert_0 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __dd.show(__item.d, __obj.planField(\"d\"));");
    gold.append("\n      __di.show(__item.i, __obj.planField(\"i\"));");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected Object __parse_message2(String channel, JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onCanAssetAttached(NtClient __cvalue) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanCreate(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanInvent(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanSendWhileDisconnected(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onAssetAttached(NtClient __cvalue, NtAsset __asset) {}");
    gold.append("\n  public static HashMap<String, Object> __config() {");
    gold.append("\n    HashMap<String, Object> __map = new HashMap<>();");
    gold.append("\n    return __map;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, NtMessageBase __object) {");
    gold.append("\n    __code_cost += 9;");
    gold.append("\n    __track(0);");
    gold.append("\n    {");
    gold.append("\n      RxTable<RTxX> _AutoRef1 = t;");
    gold.append("\n      RTx_AnonObjConvert_0 _AutoExpr3 = new RTx_AnonObjConvert_0(3, 1);");
    gold.append("\n      RTxX _CreateRef2 = _AutoRef1.make();");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      _CreateRef2.d.set(_AutoExpr3.d);");
    gold.append("\n      _CreateRef2.i.set(_AutoExpr3.i);");
    gold.append("\n    }");
    gold.append("\n    __track(1);");
    gold.append("\n    NtList<RxInt32> _auto_4 = (t.iterate(true)).transform((item) -> item.i);");
    gold.append("\n    for (RxInt32 _auto_5 : _auto_4) {");
    gold.append("\n      _auto_5.opAddTo(2);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(2);");
    gold.append("\n    NtList<RxInt32> _auto_6 = (t.iterate(true)).transform((item) -> item.i);");
    gold.append("\n    for (RxInt32 _auto_7 : _auto_6) {");
    gold.append("\n      _auto_7.opMultBy(5);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(3);");
    gold.append("\n    NtList<RxInt32> _auto_8 = (t.iterate(true)).transform((item) -> item.i);");
    gold.append("\n    for (RxInt32 _auto_9 : _auto_8) {");
    gold.append("\n      _auto_9.opSubFrom(3);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(4);");
    gold.append("\n    NtList<RxDouble> _auto_10 = (t.iterate(true)).transform((item) -> item.d);");
    gold.append("\n    for (RxDouble _auto_11 : _auto_10) {");
    gold.append("\n      _auto_11.opAddTo(2);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(5);");
    gold.append("\n    NtList<RxDouble> _auto_12 = (t.iterate(true)).transform((item) -> item.d);");
    gold.append("\n    for (RxDouble _auto_13 : _auto_12) {");
    gold.append("\n      _auto_13.opMultBy(5);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(6);");
    gold.append("\n    NtList<RxDouble> _auto_14 = (t.iterate(true)).transform((item) -> item.d);");
    gold.append("\n    for (RxDouble _auto_15 : _auto_14) {");
    gold.append("\n      _auto_15.opSubFrom(3);");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n    __track(7);");
    gold.append("\n    NtList<RxString> _auto_16 = (t.iterate(true)).transform((item) -> item.s);");
    gold.append("\n    for (RxString _auto_17 : _auto_16) {");
    gold.append("\n      _auto_17.opAddTo(\"yz\");");
    gold.append("\n    }");
    gold.append("\n");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected NtMessageBase __parse_construct_arg(JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient __who, NtMessageBase __object) {");
    gold.append("\n    __construct_0(__who, __object);");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\nBegin");
    gold.append("\nEnd");
    gold.append("\n--REFLECTION RESULTS-------------------------------------");
    gold.append("\n{\"types\":{\"#root\":{\"nature\":\"reactive_record\",\"name\":\"Root\",\"fields\":{}},\"__ViewerType\":{\"nature\":\"native_message\",\"name\":\"__ViewerType\",\"anonymous\":true,\"fields\":{}},\"X\":{\"nature\":\"reactive_record\",\"name\":\"X\",\"fields\":{\"i\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"int\"},\"privacy\":\"public\"},\"d\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"double\"},\"privacy\":\"public\"},\"s\":{\"type\":{\"nature\":\"reactive_value\",\"type\":\"string\"},\"privacy\":\"public\"}}},\"_AnonObjConvert_0\":{\"nature\":\"native_message\",\"name\":\"_AnonObjConvert_0\",\"anonymous\":true,\"fields\":{\"d\":{\"type\":{\"nature\":\"native_value\",\"type\":\"int\"}},\"i\":{\"type\":{\"nature\":\"native_value\",\"type\":\"int\"}}}}},\"channels\":{},\"constructors\":[],\"labels\":[]}");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{},\"entropy\":\"0\"}-->{\"__constructed\":true,\"__entropy\":\"0\",\"__auto_table_row_id\":1,\"t\":{\"1\":{\"i\":12,\"d\":22.0,\"s\":\"xyz\",\"id\":1}}} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\nCPU:11");
    gold.append("\nMEMORY:772");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"50\"}-->{\"__messages\":null,\"__seq\":2,\"__entropy\":\"4804307197456638271\",\"__time\":\"50\"} need:false in:-50");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":2}");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"75\"}-->{\"__messages\":null,\"__seq\":3,\"__entropy\":\"-1034601897293430941\",\"__time\":\"75\"} need:false in:-75");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":3}");
    gold.append("\n+ RANDO DELTA:{\"seq\":3}");
    gold.append("\nRANDO was DENIED:");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"100\"}-->{\"__messages\":null,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__time\":\"100\"} need:false in:-100");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":4}");
    gold.append("\n+ RANDO DELTA:{\"seq\":4}");
    gold.append("\nMEMORY:890");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"t\":{\"1\":{\"i\":12,\"d\":22.0,\"s\":\"xyz\",\"id\":1}},\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":1}");
    gold.append("\n--DUMP RESULTS-------------------------------------");
    gold.append("\n{\"t\":{\"1\":{\"i\":12,\"d\":22.0,\"s\":\"xyz\",\"id\":1}},\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":1}");
    gold.append("\n{\"t\":{\"1\":{\"i\":12,\"d\":22.0,\"s\":\"xyz\",\"id\":1}},\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":1}");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_NumberCompare_2 = null;
  private String get_NumberCompare_2() {
    if (cached_NumberCompare_2 != null) {
      return cached_NumberCompare_2;
    }
    cached_NumberCompare_2 = generateTestOutput(true, "NumberCompare_2", "./test_code/BinaryExpression_NumberCompare_success.a");
    return cached_NumberCompare_2;
  }

  @Test
  public void testNumberCompareEmission() {
    assertEmissionGood(get_NumberCompare_2());
  }

  @Test
  public void testNumberCompareSuccess() {
    assertLivePass(get_NumberCompare_2());
  }

  @Test
  public void testNumberCompareGoodWillHappy() {
    assertGoodWillHappy(get_NumberCompare_2());
  }

  @Test
  public void testNumberCompareExceptionFree() {
    assertExceptionFree(get_NumberCompare_2());
  }

  @Test
  public void testNumberCompareTODOFree() {
    assertTODOFree(get_NumberCompare_2());
  }

  @Test
  public void stable_NumberCompare_2() {
    String live = get_NumberCompare_2();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_NumberCompare_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[]\"--JAVA---------------------------------------------");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.delta.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.json.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport org.adamalang.runtime.sys.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.util.HashMap;");
    gold.append("\nimport java.util.HashSet;");
    gold.append("\nimport java.util.Map;");
    gold.append("\nimport java.util.Set;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class NumberCompare_2 extends LivingDocument {");
    gold.append("\n  @Override");
    gold.append("\n  public long __memory() {");
    gold.append("\n    long __sum = super.__memory();");
    gold.append("\n    return __sum;");
    gold.append("\n  }");
    gold.append("\n  public NumberCompare_2(DocumentMonitor __monitor) {");
    gold.append("\n    super(__monitor);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __insert(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __patch(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n    __writer.beginObject();");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__state\");");
    gold.append("\n    __state.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__constructed\");");
    gold.append("\n    __constructed.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__next_time\");");
    gold.append("\n    __next_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__last_expire_time\");");
    gold.append("\n    __last_expire_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__blocked\");");
    gold.append("\n    __blocked.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__seq\");");
    gold.append("\n    __seq.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__entropy\");");
    gold.append("\n    __entropy.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_future_id\");");
    gold.append("\n    __auto_future_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__connection_id\");");
    gold.append("\n    __connection_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__message_id\");");
    gold.append("\n    __message_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__time\");");
    gold.append("\n    __time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_table_row_id\");");
    gold.append("\n    __auto_table_row_id.__dump(__writer);");
    gold.append("\n    __dumpDeduper(__writer);");
    gold.append("\n    __dumpClients(__writer);");
    gold.append("\n    __dumpMessages(__writer);");
    gold.append("\n    __writer.endObject();");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n    __state.__commit(\"__state\", __forward, __reverse);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __forward, __reverse);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __forward, __reverse);");
    gold.append("\n    __last_expire_time.__commit(\"__last_expire_time\", __forward, __reverse);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __forward, __reverse);");
    gold.append("\n    __seq.__commit(\"__seq\", __forward, __reverse);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __forward, __reverse);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __forward, __reverse);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __forward, __reverse);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __forward, __reverse);");
    gold.append("\n    __time.__commit(\"__time\", __forward, __reverse);");
    gold.append("\n    __auto_table_row_id.__commit(\"__auto_table_row_id\", __forward, __reverse);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __last_expire_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    __auto_table_row_id.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  private class DeltaNumberCompare_2 implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaNumberCompare_2() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(NumberCompare_2 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __obj.manifest();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public Set<String> __get_intern_strings() {");
    gold.append("\n    HashSet<String> __interns = new HashSet<>();");
    gold.append("\n    __interns.add(\"\");");
    gold.append("\n    __interns.add(\"?\");");
    gold.append("\n    return __interns;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public PrivateView __createPrivateView(NtClient __who, Perspective ___perspective) {");
    gold.append("\n    NumberCompare_2 __self = this;");
    gold.append("\n    DeltaNumberCompare_2 __state = new DeltaNumberCompare_2();");
    gold.append("\n    RTx__ViewerType __viewerState = new RTx__ViewerType();");
    gold.append("\n    return new PrivateView(__who, ___perspective) {");
    gold.append("\n      @Override");
    gold.append("\n      public long memory() {");
    gold.append("\n        return __state.__memory();");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void dumpViewer(JsonStreamWriter __writer) {");
    gold.append("\n        __viewerState.__writeOut(__writer);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void ingest(JsonStreamReader __reader) {");
    gold.append("\n        __viewerState.__ingest(__reader);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void update(JsonStreamWriter __writer) {");
    gold.append("\n        __state.show(__self, PrivateLazyDeltaWriter.bind(__who, __writer, __viewerState));");
    gold.append("\n      }");
    gold.append("\n    };");
    gold.append("\n  }");
    gold.append("\n  private static class RTx__ViewerType implements NtMessageBase {");
    gold.append("\n    private RTx__ViewerType(JsonStreamReader __reader) {");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    public int __DATA_GENERATION = 1;");
    gold.append("\n    private void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.skipValue();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx__ViewerType() {}");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx__ViewerType implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx__ViewerType() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx__ViewerType __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected Object __parse_message2(String channel, JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onCanAssetAttached(NtClient __cvalue) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanCreate(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanInvent(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanSendWhileDisconnected(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onAssetAttached(NtClient __cvalue, NtAsset __asset) {}");
    gold.append("\n  public static HashMap<String, Object> __config() {");
    gold.append("\n    HashMap<String, Object> __map = new HashMap<>();");
    gold.append("\n    return __map;");
    gold.append("\n  }");
    gold.append("\n  public void __test_PrimaryTest(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"PrimaryTest\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 28;");
    gold.append("\n      __track(0);");
    gold.append("\n      __assert_truth(1 == 1, 1, 2, 1, 16);");
    gold.append("\n      __track(1);");
    gold.append("\n      __assert_truth((1 != 2), 2, 2, 2, 18);");
    gold.append("\n      __track(2);");
    gold.append("\n      __assert_truth(!(1 == 2), 3, 2, 3, 19);");
    gold.append("\n      __track(3);");
    gold.append("\n      __assert_truth(1 < 2, 4, 2, 4, 15);");
    gold.append("\n      __track(4);");
    gold.append("\n      __assert_truth(1 <= 2, 5, 2, 5, 16);");
    gold.append("\n      __track(5);");
    gold.append("\n      __assert_truth(!(1 > 2), 6, 2, 6, 18);");
    gold.append("\n      __track(6);");
    gold.append("\n      __assert_truth(!(1 >= 2), 7, 2, 7, 19);");
    gold.append("\n      __track(7);");
    gold.append("\n      __assert_truth(2 > 1, 8, 2, 8, 15);");
    gold.append("\n      __track(8);");
    gold.append("\n      __assert_truth(2 >= 1, 9, 2, 9, 16);");
    gold.append("\n      __track(9);");
    gold.append("\n      __assert_truth(!(2 < 1), 10, 2, 10, 18);");
    gold.append("\n      __track(10);");
    gold.append("\n      __assert_truth(!(2 <= 1), 11, 2, 11, 19);");
    gold.append("\n      __track(11);");
    gold.append("\n      __assert_truth(1 < 3.14, 12, 2, 12, 18);");
    gold.append("\n      __track(12);");
    gold.append("\n      __assert_truth(1 <= 3.14, 13, 2, 13, 19);");
    gold.append("\n      __track(13);");
    gold.append("\n      __assert_truth(!(1 > 3.14), 14, 2, 14, 21);");
    gold.append("\n      __track(14);");
    gold.append("\n      __assert_truth(!(1 >= 3.14), 15, 2, 15, 22);");
    gold.append("\n      __track(15);");
    gold.append("\n      __assert_truth(3.14 > 1, 16, 2, 16, 18);");
    gold.append("\n      __track(16);");
    gold.append("\n      __assert_truth(3.14 >= 1, 17, 2, 17, 19);");
    gold.append("\n      __track(17);");
    gold.append("\n      __assert_truth(!(3.14 < 1), 18, 2, 18, 21);");
    gold.append("\n      __track(18);");
    gold.append("\n      __assert_truth(!(3.14 <= 1), 19, 2, 19, 22);");
    gold.append("\n      __track(19);");
    gold.append("\n      __assert_truth(2.71 < 3.14, 20, 2, 20, 21);");
    gold.append("\n      __track(20);");
    gold.append("\n      __assert_truth(2.71 <= 3.14, 21, 2, 21, 22);");
    gold.append("\n      __track(21);");
    gold.append("\n      __assert_truth(!(2.71 > 3.14), 22, 2, 22, 24);");
    gold.append("\n      __track(22);");
    gold.append("\n      __assert_truth(!(2.71 >= 3.14), 23, 2, 23, 25);");
    gold.append("\n      __track(23);");
    gold.append("\n      __assert_truth(3.14 > 2.71, 24, 2, 24, 21);");
    gold.append("\n      __track(24);");
    gold.append("\n      __assert_truth(3.14 >= 2.71, 25, 2, 25, 22);");
    gold.append("\n      __track(25);");
    gold.append("\n      __assert_truth(!(3.14 < 2.71), 26, 2, 26, 24);");
    gold.append("\n      __track(26);");
    gold.append("\n      __assert_truth(!(3.14 <= 2.71), 27, 2, 27, 25);");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {\"PrimaryTest\"};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {");
    gold.append("\n    switch(testName) {");
    gold.append("\n      case \"PrimaryTest\":");
    gold.append("\n          __test_PrimaryTest(report);");
    gold.append("\n          return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, NtMessageBase message) {}");
    gold.append("\n  @Override");
    gold.append("\n  protected NtMessageBase __parse_construct_arg(JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\nBegin");
    gold.append("\nEnd");
    gold.append("\n--REFLECTION RESULTS-------------------------------------");
    gold.append("\n{\"types\":{\"#root\":{\"nature\":\"reactive_record\",\"name\":\"Root\",\"fields\":{}},\"__ViewerType\":{\"nature\":\"native_message\",\"name\":\"__ViewerType\",\"anonymous\":true,\"fields\":{}}},\"channels\":{},\"constructors\":[],\"labels\":[]}");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{},\"entropy\":\"0\"}-->{\"__constructed\":true,\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\nCPU:0");
    gold.append("\nMEMORY:384");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"50\"}-->{\"__messages\":null,\"__seq\":2,\"__entropy\":\"4804307197456638271\",\"__time\":\"50\"} need:false in:-50");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":2}");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"75\"}-->{\"__messages\":null,\"__seq\":3,\"__entropy\":\"-1034601897293430941\",\"__time\":\"75\"} need:false in:-75");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":3}");
    gold.append("\n+ RANDO DELTA:{\"seq\":3}");
    gold.append("\nRANDO was DENIED:");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"100\"}-->{\"__messages\":null,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__time\":\"100\"} need:false in:-100");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":4}");
    gold.append("\n+ RANDO DELTA:{\"seq\":4}");
    gold.append("\nMEMORY:502");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n--DUMP RESULTS-------------------------------------");
    gold.append("\n{\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n{\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\nTEST[PrimaryTest] = 100.0%");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_OperationsDivideCases_3 = null;
  private String get_OperationsDivideCases_3() {
    if (cached_OperationsDivideCases_3 != null) {
      return cached_OperationsDivideCases_3;
    }
    cached_OperationsDivideCases_3 = generateTestOutput(true, "OperationsDivideCases_3", "./test_code/BinaryExpression_OperationsDivideCases_success.a");
    return cached_OperationsDivideCases_3;
  }

  @Test
  public void testOperationsDivideCasesEmission() {
    assertEmissionGood(get_OperationsDivideCases_3());
  }

  @Test
  public void testOperationsDivideCasesSuccess() {
    assertLivePass(get_OperationsDivideCases_3());
  }

  @Test
  public void testOperationsDivideCasesGoodWillHappy() {
    assertGoodWillHappy(get_OperationsDivideCases_3());
  }

  @Test
  public void testOperationsDivideCasesExceptionFree() {
    assertExceptionFree(get_OperationsDivideCases_3());
  }

  @Test
  public void testOperationsDivideCasesTODOFree() {
    assertTODOFree(get_OperationsDivideCases_3());
  }

  @Test
  public void stable_OperationsDivideCases_3() {
    String live = get_OperationsDivideCases_3();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_OperationsDivideCases_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[]\"--JAVA---------------------------------------------");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.delta.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.json.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport org.adamalang.runtime.sys.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.util.HashMap;");
    gold.append("\nimport java.util.HashSet;");
    gold.append("\nimport java.util.Map;");
    gold.append("\nimport java.util.Set;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class OperationsDivideCases_3 extends LivingDocument {");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f0;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f1;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f2;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f3;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f4;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f5;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f6;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f7;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f8;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f9;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f10;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f11;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f12;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f13;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f14;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f15;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f16;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f17;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f18;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f19;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f20;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f21;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f22;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f23;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f24;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f25;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f26;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f27;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f28;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f29;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f30;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f31;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f32;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f33;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f34;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f35;");
    gold.append("\n  private final RxLazy<NtMaybe<Double>> f36;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f37;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f38;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f39;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f40;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f41;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f42;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f43;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f44;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f45;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f46;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f47;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f48;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f49;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f50;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f51;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f52;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f53;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f54;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f55;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f56;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f57;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f58;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f59;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f60;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f61;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f62;");
    gold.append("\n  private final RxLazy<NtMaybe<NtComplex>> f63;");
    gold.append("\n  @Override");
    gold.append("\n  public long __memory() {");
    gold.append("\n    long __sum = super.__memory();");
    gold.append("\n    __sum += f0.__memory();");
    gold.append("\n    __sum += f1.__memory();");
    gold.append("\n    __sum += f2.__memory();");
    gold.append("\n    __sum += f3.__memory();");
    gold.append("\n    __sum += f4.__memory();");
    gold.append("\n    __sum += f5.__memory();");
    gold.append("\n    __sum += f6.__memory();");
    gold.append("\n    __sum += f7.__memory();");
    gold.append("\n    __sum += f8.__memory();");
    gold.append("\n    __sum += f9.__memory();");
    gold.append("\n    __sum += f10.__memory();");
    gold.append("\n    __sum += f11.__memory();");
    gold.append("\n    __sum += f12.__memory();");
    gold.append("\n    __sum += f13.__memory();");
    gold.append("\n    __sum += f14.__memory();");
    gold.append("\n    __sum += f15.__memory();");
    gold.append("\n    __sum += f16.__memory();");
    gold.append("\n    __sum += f17.__memory();");
    gold.append("\n    __sum += f18.__memory();");
    gold.append("\n    __sum += f19.__memory();");
    gold.append("\n    __sum += f20.__memory();");
    gold.append("\n    __sum += f21.__memory();");
    gold.append("\n    __sum += f22.__memory();");
    gold.append("\n    __sum += f23.__memory();");
    gold.append("\n    __sum += f24.__memory();");
    gold.append("\n    __sum += f25.__memory();");
    gold.append("\n    __sum += f26.__memory();");
    gold.append("\n    __sum += f27.__memory();");
    gold.append("\n    __sum += f28.__memory();");
    gold.append("\n    __sum += f29.__memory();");
    gold.append("\n    __sum += f30.__memory();");
    gold.append("\n    __sum += f31.__memory();");
    gold.append("\n    __sum += f32.__memory();");
    gold.append("\n    __sum += f33.__memory();");
    gold.append("\n    __sum += f34.__memory();");
    gold.append("\n    __sum += f35.__memory();");
    gold.append("\n    __sum += f36.__memory();");
    gold.append("\n    __sum += f37.__memory();");
    gold.append("\n    __sum += f38.__memory();");
    gold.append("\n    __sum += f39.__memory();");
    gold.append("\n    __sum += f40.__memory();");
    gold.append("\n    __sum += f41.__memory();");
    gold.append("\n    __sum += f42.__memory();");
    gold.append("\n    __sum += f43.__memory();");
    gold.append("\n    __sum += f44.__memory();");
    gold.append("\n    __sum += f45.__memory();");
    gold.append("\n    __sum += f46.__memory();");
    gold.append("\n    __sum += f47.__memory();");
    gold.append("\n    __sum += f48.__memory();");
    gold.append("\n    __sum += f49.__memory();");
    gold.append("\n    __sum += f50.__memory();");
    gold.append("\n    __sum += f51.__memory();");
    gold.append("\n    __sum += f52.__memory();");
    gold.append("\n    __sum += f53.__memory();");
    gold.append("\n    __sum += f54.__memory();");
    gold.append("\n    __sum += f55.__memory();");
    gold.append("\n    __sum += f56.__memory();");
    gold.append("\n    __sum += f57.__memory();");
    gold.append("\n    __sum += f58.__memory();");
    gold.append("\n    __sum += f59.__memory();");
    gold.append("\n    __sum += f60.__memory();");
    gold.append("\n    __sum += f61.__memory();");
    gold.append("\n    __sum += f62.__memory();");
    gold.append("\n    __sum += f63.__memory();");
    gold.append("\n    return __sum;");
    gold.append("\n  }");
    gold.append("\n  public OperationsDivideCases_3(DocumentMonitor __monitor) {");
    gold.append("\n    super(__monitor);");
    gold.append("\n    f0 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.II(1, 1)));");
    gold.append("\n    f1 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.IL(1, 1L)));");
    gold.append("\n    f2 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.ID(1, 0.5)));");
    gold.append("\n    f3 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.ImD(1, (LibArithmetic.Divide.II(1, 2)))));");
    gold.append("\n    f4 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.ImD(1, (LibArithmetic.Divide.II(1, 0)))));");
    gold.append("\n    f5 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))));");
    gold.append("\n    f6 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.ImC(1, (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))))));");
    gold.append("\n    f7 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.ImC(1, (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)))));");
    gold.append("\n    f8 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.LI(1L, 1)));");
    gold.append("\n    f9 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.LL(1L, 1L)));");
    gold.append("\n    f10 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.LD(1L, 0.5)));");
    gold.append("\n    f11 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.LmD(1L, (LibArithmetic.Divide.II(1, 2)))));");
    gold.append("\n    f12 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.LmD(1L, (LibArithmetic.Divide.II(1, 0)))));");
    gold.append("\n    f13 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.LC(1L, new NtComplex(0.0, 1.0))));");
    gold.append("\n    f14 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.LmC(1L, (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))))));");
    gold.append("\n    f15 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.LmC(1L, (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)))));");
    gold.append("\n    f16 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.DI(0.5, 1)));");
    gold.append("\n    f17 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.DL(0.5, 1L)));");
    gold.append("\n    f18 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.DD(0.5, 0.5)));");
    gold.append("\n    f19 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.DmD(0.5, (LibArithmetic.Divide.II(1, 2)))));");
    gold.append("\n    f20 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.DmD(0.5, (LibArithmetic.Divide.II(1, 0)))));");
    gold.append("\n    f21 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.DC(0.5, new NtComplex(0.0, 1.0))));");
    gold.append("\n    f22 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.DmC(0.5, (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))))));");
    gold.append("\n    f23 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.DmC(0.5, (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)))));");
    gold.append("\n    f24 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.mDI((LibArithmetic.Divide.II(1, 2)), 1)));");
    gold.append("\n    f25 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.mDL((LibArithmetic.Divide.II(1, 2)), 1L)));");
    gold.append("\n    f26 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.mDD((LibArithmetic.Divide.II(1, 2)), 0.5)));");
    gold.append("\n    f27 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.mDmD((LibArithmetic.Divide.II(1, 2)), (LibArithmetic.Divide.II(1, 2)))));");
    gold.append("\n    f28 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.mDmD((LibArithmetic.Divide.II(1, 2)), (LibArithmetic.Divide.II(1, 0)))));");
    gold.append("\n    f29 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mDC((LibArithmetic.Divide.II(1, 2)), new NtComplex(0.0, 1.0))));");
    gold.append("\n    f30 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mDmC((LibArithmetic.Divide.II(1, 2)), (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))))));");
    gold.append("\n    f31 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mDmC((LibArithmetic.Divide.II(1, 2)), (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)))));");
    gold.append("\n    f32 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.mDI((LibArithmetic.Divide.II(1, 0)), 1)));");
    gold.append("\n    f33 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.mDL((LibArithmetic.Divide.II(1, 0)), 1L)));");
    gold.append("\n    f34 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.mDD((LibArithmetic.Divide.II(1, 0)), 0.5)));");
    gold.append("\n    f35 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.mDmD((LibArithmetic.Divide.II(1, 0)), (LibArithmetic.Divide.II(1, 2)))));");
    gold.append("\n    f36 = new RxLazy<NtMaybe<Double>>(this, () -> (LibArithmetic.Divide.mDmD((LibArithmetic.Divide.II(1, 0)), (LibArithmetic.Divide.II(1, 0)))));");
    gold.append("\n    f37 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mDC((LibArithmetic.Divide.II(1, 0)), new NtComplex(0.0, 1.0))));");
    gold.append("\n    f38 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mDmC((LibArithmetic.Divide.II(1, 0)), (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))))));");
    gold.append("\n    f39 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mDmC((LibArithmetic.Divide.II(1, 0)), (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)))));");
    gold.append("\n    f40 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 1)));");
    gold.append("\n    f41 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.CL(new NtComplex(0.0, 1.0), 1L)));");
    gold.append("\n    f42 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.CD(new NtComplex(0.0, 1.0), 0.5)));");
    gold.append("\n    f43 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.CmD(new NtComplex(0.0, 1.0), (LibArithmetic.Divide.II(1, 2)))));");
    gold.append("\n    f44 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.CmD(new NtComplex(0.0, 1.0), (LibArithmetic.Divide.II(1, 0)))));");
    gold.append("\n    f45 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.CC(new NtComplex(0.0, 1.0), new NtComplex(0.0, 1.0))));");
    gold.append("\n    f46 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.CmC(new NtComplex(0.0, 1.0), (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))))));");
    gold.append("\n    f47 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.CmC(new NtComplex(0.0, 1.0), (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)))));");
    gold.append("\n    f48 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCI((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), 1)));");
    gold.append("\n    f49 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCL((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), 1L)));");
    gold.append("\n    f50 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCD((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), 0.5)));");
    gold.append("\n    f51 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCmD((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), (LibArithmetic.Divide.II(1, 2)))));");
    gold.append("\n    f52 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCmD((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), (LibArithmetic.Divide.II(1, 0)))));");
    gold.append("\n    f53 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCC((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), new NtComplex(0.0, 1.0))));");
    gold.append("\n    f54 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCmC((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))))));");
    gold.append("\n    f55 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCmC((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)))));");
    gold.append("\n    f56 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCI((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), 1)));");
    gold.append("\n    f57 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCL((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), 1L)));");
    gold.append("\n    f58 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCD((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), 0.5)));");
    gold.append("\n    f59 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCmD((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), (LibArithmetic.Divide.II(1, 2)))));");
    gold.append("\n    f60 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCmD((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), (LibArithmetic.Divide.II(1, 0)))));");
    gold.append("\n    f61 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCC((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), new NtComplex(0.0, 1.0))));");
    gold.append("\n    f62 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCmC((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))))));");
    gold.append("\n    f63 = new RxLazy<NtMaybe<NtComplex>>(this, () -> (LibArithmetic.Divide.mCmC((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)))));");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __insert(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __patch(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n    __writer.beginObject();");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__state\");");
    gold.append("\n    __state.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__constructed\");");
    gold.append("\n    __constructed.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__next_time\");");
    gold.append("\n    __next_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__last_expire_time\");");
    gold.append("\n    __last_expire_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__blocked\");");
    gold.append("\n    __blocked.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__seq\");");
    gold.append("\n    __seq.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__entropy\");");
    gold.append("\n    __entropy.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_future_id\");");
    gold.append("\n    __auto_future_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__connection_id\");");
    gold.append("\n    __connection_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__message_id\");");
    gold.append("\n    __message_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__time\");");
    gold.append("\n    __time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_table_row_id\");");
    gold.append("\n    __auto_table_row_id.__dump(__writer);");
    gold.append("\n    __dumpDeduper(__writer);");
    gold.append("\n    __dumpClients(__writer);");
    gold.append("\n    __dumpMessages(__writer);");
    gold.append("\n    __writer.endObject();");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n    __state.__commit(\"__state\", __forward, __reverse);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __forward, __reverse);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __forward, __reverse);");
    gold.append("\n    __last_expire_time.__commit(\"__last_expire_time\", __forward, __reverse);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __forward, __reverse);");
    gold.append("\n    __seq.__commit(\"__seq\", __forward, __reverse);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __forward, __reverse);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __forward, __reverse);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __forward, __reverse);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __forward, __reverse);");
    gold.append("\n    __time.__commit(\"__time\", __forward, __reverse);");
    gold.append("\n    __auto_table_row_id.__commit(\"__auto_table_row_id\", __forward, __reverse);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __last_expire_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    __auto_table_row_id.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  private class DeltaOperationsDivideCases_3 implements DeltaNode {");
    gold.append("\n    private int __gf0;");
    gold.append("\n    private DMaybe<DDouble> __df0;");
    gold.append("\n    private int __gf1;");
    gold.append("\n    private DMaybe<DDouble> __df1;");
    gold.append("\n    private int __gf2;");
    gold.append("\n    private DMaybe<DDouble> __df2;");
    gold.append("\n    private int __gf3;");
    gold.append("\n    private DMaybe<DDouble> __df3;");
    gold.append("\n    private int __gf4;");
    gold.append("\n    private DMaybe<DDouble> __df4;");
    gold.append("\n    private int __gf5;");
    gold.append("\n    private DMaybe<DComplex> __df5;");
    gold.append("\n    private int __gf6;");
    gold.append("\n    private DMaybe<DComplex> __df6;");
    gold.append("\n    private int __gf7;");
    gold.append("\n    private DMaybe<DComplex> __df7;");
    gold.append("\n    private int __gf8;");
    gold.append("\n    private DMaybe<DDouble> __df8;");
    gold.append("\n    private int __gf9;");
    gold.append("\n    private DMaybe<DDouble> __df9;");
    gold.append("\n    private int __gf10;");
    gold.append("\n    private DMaybe<DDouble> __df10;");
    gold.append("\n    private int __gf11;");
    gold.append("\n    private DMaybe<DDouble> __df11;");
    gold.append("\n    private int __gf12;");
    gold.append("\n    private DMaybe<DDouble> __df12;");
    gold.append("\n    private int __gf13;");
    gold.append("\n    private DMaybe<DComplex> __df13;");
    gold.append("\n    private int __gf14;");
    gold.append("\n    private DMaybe<DComplex> __df14;");
    gold.append("\n    private int __gf15;");
    gold.append("\n    private DMaybe<DComplex> __df15;");
    gold.append("\n    private int __gf16;");
    gold.append("\n    private DMaybe<DDouble> __df16;");
    gold.append("\n    private int __gf17;");
    gold.append("\n    private DMaybe<DDouble> __df17;");
    gold.append("\n    private int __gf18;");
    gold.append("\n    private DMaybe<DDouble> __df18;");
    gold.append("\n    private int __gf19;");
    gold.append("\n    private DMaybe<DDouble> __df19;");
    gold.append("\n    private int __gf20;");
    gold.append("\n    private DMaybe<DDouble> __df20;");
    gold.append("\n    private int __gf21;");
    gold.append("\n    private DMaybe<DComplex> __df21;");
    gold.append("\n    private int __gf22;");
    gold.append("\n    private DMaybe<DComplex> __df22;");
    gold.append("\n    private int __gf23;");
    gold.append("\n    private DMaybe<DComplex> __df23;");
    gold.append("\n    private int __gf24;");
    gold.append("\n    private DMaybe<DDouble> __df24;");
    gold.append("\n    private int __gf25;");
    gold.append("\n    private DMaybe<DDouble> __df25;");
    gold.append("\n    private int __gf26;");
    gold.append("\n    private DMaybe<DDouble> __df26;");
    gold.append("\n    private int __gf27;");
    gold.append("\n    private DMaybe<DDouble> __df27;");
    gold.append("\n    private int __gf28;");
    gold.append("\n    private DMaybe<DDouble> __df28;");
    gold.append("\n    private int __gf29;");
    gold.append("\n    private DMaybe<DComplex> __df29;");
    gold.append("\n    private int __gf30;");
    gold.append("\n    private DMaybe<DComplex> __df30;");
    gold.append("\n    private int __gf31;");
    gold.append("\n    private DMaybe<DComplex> __df31;");
    gold.append("\n    private int __gf32;");
    gold.append("\n    private DMaybe<DDouble> __df32;");
    gold.append("\n    private int __gf33;");
    gold.append("\n    private DMaybe<DDouble> __df33;");
    gold.append("\n    private int __gf34;");
    gold.append("\n    private DMaybe<DDouble> __df34;");
    gold.append("\n    private int __gf35;");
    gold.append("\n    private DMaybe<DDouble> __df35;");
    gold.append("\n    private int __gf36;");
    gold.append("\n    private DMaybe<DDouble> __df36;");
    gold.append("\n    private int __gf37;");
    gold.append("\n    private DMaybe<DComplex> __df37;");
    gold.append("\n    private int __gf38;");
    gold.append("\n    private DMaybe<DComplex> __df38;");
    gold.append("\n    private int __gf39;");
    gold.append("\n    private DMaybe<DComplex> __df39;");
    gold.append("\n    private int __gf40;");
    gold.append("\n    private DMaybe<DComplex> __df40;");
    gold.append("\n    private int __gf41;");
    gold.append("\n    private DMaybe<DComplex> __df41;");
    gold.append("\n    private int __gf42;");
    gold.append("\n    private DMaybe<DComplex> __df42;");
    gold.append("\n    private int __gf43;");
    gold.append("\n    private DMaybe<DComplex> __df43;");
    gold.append("\n    private int __gf44;");
    gold.append("\n    private DMaybe<DComplex> __df44;");
    gold.append("\n    private int __gf45;");
    gold.append("\n    private DMaybe<DComplex> __df45;");
    gold.append("\n    private int __gf46;");
    gold.append("\n    private DMaybe<DComplex> __df46;");
    gold.append("\n    private int __gf47;");
    gold.append("\n    private DMaybe<DComplex> __df47;");
    gold.append("\n    private int __gf48;");
    gold.append("\n    private DMaybe<DComplex> __df48;");
    gold.append("\n    private int __gf49;");
    gold.append("\n    private DMaybe<DComplex> __df49;");
    gold.append("\n    private int __gf50;");
    gold.append("\n    private DMaybe<DComplex> __df50;");
    gold.append("\n    private int __gf51;");
    gold.append("\n    private DMaybe<DComplex> __df51;");
    gold.append("\n    private int __gf52;");
    gold.append("\n    private DMaybe<DComplex> __df52;");
    gold.append("\n    private int __gf53;");
    gold.append("\n    private DMaybe<DComplex> __df53;");
    gold.append("\n    private int __gf54;");
    gold.append("\n    private DMaybe<DComplex> __df54;");
    gold.append("\n    private int __gf55;");
    gold.append("\n    private DMaybe<DComplex> __df55;");
    gold.append("\n    private int __gf56;");
    gold.append("\n    private DMaybe<DComplex> __df56;");
    gold.append("\n    private int __gf57;");
    gold.append("\n    private DMaybe<DComplex> __df57;");
    gold.append("\n    private int __gf58;");
    gold.append("\n    private DMaybe<DComplex> __df58;");
    gold.append("\n    private int __gf59;");
    gold.append("\n    private DMaybe<DComplex> __df59;");
    gold.append("\n    private int __gf60;");
    gold.append("\n    private DMaybe<DComplex> __df60;");
    gold.append("\n    private int __gf61;");
    gold.append("\n    private DMaybe<DComplex> __df61;");
    gold.append("\n    private int __gf62;");
    gold.append("\n    private DMaybe<DComplex> __df62;");
    gold.append("\n    private int __gf63;");
    gold.append("\n    private DMaybe<DComplex> __df63;");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaOperationsDivideCases_3() {");
    gold.append("\n      __gf0 = -1;");
    gold.append("\n      __df0 = new DMaybe<DDouble>();");
    gold.append("\n      __gf1 = -1;");
    gold.append("\n      __df1 = new DMaybe<DDouble>();");
    gold.append("\n      __gf2 = -1;");
    gold.append("\n      __df2 = new DMaybe<DDouble>();");
    gold.append("\n      __gf3 = -1;");
    gold.append("\n      __df3 = new DMaybe<DDouble>();");
    gold.append("\n      __gf4 = -1;");
    gold.append("\n      __df4 = new DMaybe<DDouble>();");
    gold.append("\n      __gf5 = -1;");
    gold.append("\n      __df5 = new DMaybe<DComplex>();");
    gold.append("\n      __gf6 = -1;");
    gold.append("\n      __df6 = new DMaybe<DComplex>();");
    gold.append("\n      __gf7 = -1;");
    gold.append("\n      __df7 = new DMaybe<DComplex>();");
    gold.append("\n      __gf8 = -1;");
    gold.append("\n      __df8 = new DMaybe<DDouble>();");
    gold.append("\n      __gf9 = -1;");
    gold.append("\n      __df9 = new DMaybe<DDouble>();");
    gold.append("\n      __gf10 = -1;");
    gold.append("\n      __df10 = new DMaybe<DDouble>();");
    gold.append("\n      __gf11 = -1;");
    gold.append("\n      __df11 = new DMaybe<DDouble>();");
    gold.append("\n      __gf12 = -1;");
    gold.append("\n      __df12 = new DMaybe<DDouble>();");
    gold.append("\n      __gf13 = -1;");
    gold.append("\n      __df13 = new DMaybe<DComplex>();");
    gold.append("\n      __gf14 = -1;");
    gold.append("\n      __df14 = new DMaybe<DComplex>();");
    gold.append("\n      __gf15 = -1;");
    gold.append("\n      __df15 = new DMaybe<DComplex>();");
    gold.append("\n      __gf16 = -1;");
    gold.append("\n      __df16 = new DMaybe<DDouble>();");
    gold.append("\n      __gf17 = -1;");
    gold.append("\n      __df17 = new DMaybe<DDouble>();");
    gold.append("\n      __gf18 = -1;");
    gold.append("\n      __df18 = new DMaybe<DDouble>();");
    gold.append("\n      __gf19 = -1;");
    gold.append("\n      __df19 = new DMaybe<DDouble>();");
    gold.append("\n      __gf20 = -1;");
    gold.append("\n      __df20 = new DMaybe<DDouble>();");
    gold.append("\n      __gf21 = -1;");
    gold.append("\n      __df21 = new DMaybe<DComplex>();");
    gold.append("\n      __gf22 = -1;");
    gold.append("\n      __df22 = new DMaybe<DComplex>();");
    gold.append("\n      __gf23 = -1;");
    gold.append("\n      __df23 = new DMaybe<DComplex>();");
    gold.append("\n      __gf24 = -1;");
    gold.append("\n      __df24 = new DMaybe<DDouble>();");
    gold.append("\n      __gf25 = -1;");
    gold.append("\n      __df25 = new DMaybe<DDouble>();");
    gold.append("\n      __gf26 = -1;");
    gold.append("\n      __df26 = new DMaybe<DDouble>();");
    gold.append("\n      __gf27 = -1;");
    gold.append("\n      __df27 = new DMaybe<DDouble>();");
    gold.append("\n      __gf28 = -1;");
    gold.append("\n      __df28 = new DMaybe<DDouble>();");
    gold.append("\n      __gf29 = -1;");
    gold.append("\n      __df29 = new DMaybe<DComplex>();");
    gold.append("\n      __gf30 = -1;");
    gold.append("\n      __df30 = new DMaybe<DComplex>();");
    gold.append("\n      __gf31 = -1;");
    gold.append("\n      __df31 = new DMaybe<DComplex>();");
    gold.append("\n      __gf32 = -1;");
    gold.append("\n      __df32 = new DMaybe<DDouble>();");
    gold.append("\n      __gf33 = -1;");
    gold.append("\n      __df33 = new DMaybe<DDouble>();");
    gold.append("\n      __gf34 = -1;");
    gold.append("\n      __df34 = new DMaybe<DDouble>();");
    gold.append("\n      __gf35 = -1;");
    gold.append("\n      __df35 = new DMaybe<DDouble>();");
    gold.append("\n      __gf36 = -1;");
    gold.append("\n      __df36 = new DMaybe<DDouble>();");
    gold.append("\n      __gf37 = -1;");
    gold.append("\n      __df37 = new DMaybe<DComplex>();");
    gold.append("\n      __gf38 = -1;");
    gold.append("\n      __df38 = new DMaybe<DComplex>();");
    gold.append("\n      __gf39 = -1;");
    gold.append("\n      __df39 = new DMaybe<DComplex>();");
    gold.append("\n      __gf40 = -1;");
    gold.append("\n      __df40 = new DMaybe<DComplex>();");
    gold.append("\n      __gf41 = -1;");
    gold.append("\n      __df41 = new DMaybe<DComplex>();");
    gold.append("\n      __gf42 = -1;");
    gold.append("\n      __df42 = new DMaybe<DComplex>();");
    gold.append("\n      __gf43 = -1;");
    gold.append("\n      __df43 = new DMaybe<DComplex>();");
    gold.append("\n      __gf44 = -1;");
    gold.append("\n      __df44 = new DMaybe<DComplex>();");
    gold.append("\n      __gf45 = -1;");
    gold.append("\n      __df45 = new DMaybe<DComplex>();");
    gold.append("\n      __gf46 = -1;");
    gold.append("\n      __df46 = new DMaybe<DComplex>();");
    gold.append("\n      __gf47 = -1;");
    gold.append("\n      __df47 = new DMaybe<DComplex>();");
    gold.append("\n      __gf48 = -1;");
    gold.append("\n      __df48 = new DMaybe<DComplex>();");
    gold.append("\n      __gf49 = -1;");
    gold.append("\n      __df49 = new DMaybe<DComplex>();");
    gold.append("\n      __gf50 = -1;");
    gold.append("\n      __df50 = new DMaybe<DComplex>();");
    gold.append("\n      __gf51 = -1;");
    gold.append("\n      __df51 = new DMaybe<DComplex>();");
    gold.append("\n      __gf52 = -1;");
    gold.append("\n      __df52 = new DMaybe<DComplex>();");
    gold.append("\n      __gf53 = -1;");
    gold.append("\n      __df53 = new DMaybe<DComplex>();");
    gold.append("\n      __gf54 = -1;");
    gold.append("\n      __df54 = new DMaybe<DComplex>();");
    gold.append("\n      __gf55 = -1;");
    gold.append("\n      __df55 = new DMaybe<DComplex>();");
    gold.append("\n      __gf56 = -1;");
    gold.append("\n      __df56 = new DMaybe<DComplex>();");
    gold.append("\n      __gf57 = -1;");
    gold.append("\n      __df57 = new DMaybe<DComplex>();");
    gold.append("\n      __gf58 = -1;");
    gold.append("\n      __df58 = new DMaybe<DComplex>();");
    gold.append("\n      __gf59 = -1;");
    gold.append("\n      __df59 = new DMaybe<DComplex>();");
    gold.append("\n      __gf60 = -1;");
    gold.append("\n      __df60 = new DMaybe<DComplex>();");
    gold.append("\n      __gf61 = -1;");
    gold.append("\n      __df61 = new DMaybe<DComplex>();");
    gold.append("\n      __gf62 = -1;");
    gold.append("\n      __df62 = new DMaybe<DComplex>();");
    gold.append("\n      __gf63 = -1;");
    gold.append("\n      __df63 = new DMaybe<DComplex>();");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      __sum += __df0.__memory();");
    gold.append("\n      __sum += __df1.__memory();");
    gold.append("\n      __sum += __df2.__memory();");
    gold.append("\n      __sum += __df3.__memory();");
    gold.append("\n      __sum += __df4.__memory();");
    gold.append("\n      __sum += __df5.__memory();");
    gold.append("\n      __sum += __df6.__memory();");
    gold.append("\n      __sum += __df7.__memory();");
    gold.append("\n      __sum += __df8.__memory();");
    gold.append("\n      __sum += __df9.__memory();");
    gold.append("\n      __sum += __df10.__memory();");
    gold.append("\n      __sum += __df11.__memory();");
    gold.append("\n      __sum += __df12.__memory();");
    gold.append("\n      __sum += __df13.__memory();");
    gold.append("\n      __sum += __df14.__memory();");
    gold.append("\n      __sum += __df15.__memory();");
    gold.append("\n      __sum += __df16.__memory();");
    gold.append("\n      __sum += __df17.__memory();");
    gold.append("\n      __sum += __df18.__memory();");
    gold.append("\n      __sum += __df19.__memory();");
    gold.append("\n      __sum += __df20.__memory();");
    gold.append("\n      __sum += __df21.__memory();");
    gold.append("\n      __sum += __df22.__memory();");
    gold.append("\n      __sum += __df23.__memory();");
    gold.append("\n      __sum += __df24.__memory();");
    gold.append("\n      __sum += __df25.__memory();");
    gold.append("\n      __sum += __df26.__memory();");
    gold.append("\n      __sum += __df27.__memory();");
    gold.append("\n      __sum += __df28.__memory();");
    gold.append("\n      __sum += __df29.__memory();");
    gold.append("\n      __sum += __df30.__memory();");
    gold.append("\n      __sum += __df31.__memory();");
    gold.append("\n      __sum += __df32.__memory();");
    gold.append("\n      __sum += __df33.__memory();");
    gold.append("\n      __sum += __df34.__memory();");
    gold.append("\n      __sum += __df35.__memory();");
    gold.append("\n      __sum += __df36.__memory();");
    gold.append("\n      __sum += __df37.__memory();");
    gold.append("\n      __sum += __df38.__memory();");
    gold.append("\n      __sum += __df39.__memory();");
    gold.append("\n      __sum += __df40.__memory();");
    gold.append("\n      __sum += __df41.__memory();");
    gold.append("\n      __sum += __df42.__memory();");
    gold.append("\n      __sum += __df43.__memory();");
    gold.append("\n      __sum += __df44.__memory();");
    gold.append("\n      __sum += __df45.__memory();");
    gold.append("\n      __sum += __df46.__memory();");
    gold.append("\n      __sum += __df47.__memory();");
    gold.append("\n      __sum += __df48.__memory();");
    gold.append("\n      __sum += __df49.__memory();");
    gold.append("\n      __sum += __df50.__memory();");
    gold.append("\n      __sum += __df51.__memory();");
    gold.append("\n      __sum += __df52.__memory();");
    gold.append("\n      __sum += __df53.__memory();");
    gold.append("\n      __sum += __df54.__memory();");
    gold.append("\n      __sum += __df55.__memory();");
    gold.append("\n      __sum += __df56.__memory();");
    gold.append("\n      __sum += __df57.__memory();");
    gold.append("\n      __sum += __df58.__memory();");
    gold.append("\n      __sum += __df59.__memory();");
    gold.append("\n      __sum += __df60.__memory();");
    gold.append("\n      __sum += __df61.__memory();");
    gold.append("\n      __sum += __df62.__memory();");
    gold.append("\n      __sum += __df63.__memory();");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(OperationsDivideCases_3 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      __code_cost += 64;");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __obj.manifest();");
    gold.append("\n      if (__gf0 != __item.f0.getGeneration()) {");
    gold.append("\n        if (__item.f0.get().has()) {");
    gold.append("\n          Double __maybeElement0 = (Double)(__item.f0.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement1 = __df0.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement1.show(__maybeElement0, __obj.planField(\"f0\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df0.hide(__obj.planField(\"f0\"));");
    gold.append("\n        }");
    gold.append("\n        __gf0 = __item.f0.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf1 != __item.f1.getGeneration()) {");
    gold.append("\n        if (__item.f1.get().has()) {");
    gold.append("\n          Double __maybeElement2 = (Double)(__item.f1.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement3 = __df1.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement3.show(__maybeElement2, __obj.planField(\"f1\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df1.hide(__obj.planField(\"f1\"));");
    gold.append("\n        }");
    gold.append("\n        __gf1 = __item.f1.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf2 != __item.f2.getGeneration()) {");
    gold.append("\n        if (__item.f2.get().has()) {");
    gold.append("\n          Double __maybeElement4 = (Double)(__item.f2.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement5 = __df2.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement5.show(__maybeElement4, __obj.planField(\"f2\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df2.hide(__obj.planField(\"f2\"));");
    gold.append("\n        }");
    gold.append("\n        __gf2 = __item.f2.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf3 != __item.f3.getGeneration()) {");
    gold.append("\n        if (__item.f3.get().has()) {");
    gold.append("\n          Double __maybeElement6 = (Double)(__item.f3.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement7 = __df3.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement7.show(__maybeElement6, __obj.planField(\"f3\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df3.hide(__obj.planField(\"f3\"));");
    gold.append("\n        }");
    gold.append("\n        __gf3 = __item.f3.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf4 != __item.f4.getGeneration()) {");
    gold.append("\n        if (__item.f4.get().has()) {");
    gold.append("\n          Double __maybeElement8 = (Double)(__item.f4.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement9 = __df4.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement9.show(__maybeElement8, __obj.planField(\"f4\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df4.hide(__obj.planField(\"f4\"));");
    gold.append("\n        }");
    gold.append("\n        __gf4 = __item.f4.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf5 != __item.f5.getGeneration()) {");
    gold.append("\n        if (__item.f5.get().has()) {");
    gold.append("\n          NtComplex __maybeElement10 = (NtComplex)(__item.f5.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement11 = __df5.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement11.show(__maybeElement10, __obj.planField(\"f5\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df5.hide(__obj.planField(\"f5\"));");
    gold.append("\n        }");
    gold.append("\n        __gf5 = __item.f5.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf6 != __item.f6.getGeneration()) {");
    gold.append("\n        if (__item.f6.get().has()) {");
    gold.append("\n          NtComplex __maybeElement12 = (NtComplex)(__item.f6.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement13 = __df6.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement13.show(__maybeElement12, __obj.planField(\"f6\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df6.hide(__obj.planField(\"f6\"));");
    gold.append("\n        }");
    gold.append("\n        __gf6 = __item.f6.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf7 != __item.f7.getGeneration()) {");
    gold.append("\n        if (__item.f7.get().has()) {");
    gold.append("\n          NtComplex __maybeElement14 = (NtComplex)(__item.f7.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement15 = __df7.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement15.show(__maybeElement14, __obj.planField(\"f7\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df7.hide(__obj.planField(\"f7\"));");
    gold.append("\n        }");
    gold.append("\n        __gf7 = __item.f7.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf8 != __item.f8.getGeneration()) {");
    gold.append("\n        if (__item.f8.get().has()) {");
    gold.append("\n          Double __maybeElement16 = (Double)(__item.f8.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement17 = __df8.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement17.show(__maybeElement16, __obj.planField(\"f8\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df8.hide(__obj.planField(\"f8\"));");
    gold.append("\n        }");
    gold.append("\n        __gf8 = __item.f8.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf9 != __item.f9.getGeneration()) {");
    gold.append("\n        if (__item.f9.get().has()) {");
    gold.append("\n          Double __maybeElement18 = (Double)(__item.f9.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement19 = __df9.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement19.show(__maybeElement18, __obj.planField(\"f9\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df9.hide(__obj.planField(\"f9\"));");
    gold.append("\n        }");
    gold.append("\n        __gf9 = __item.f9.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf10 != __item.f10.getGeneration()) {");
    gold.append("\n        if (__item.f10.get().has()) {");
    gold.append("\n          Double __maybeElement20 = (Double)(__item.f10.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement21 = __df10.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement21.show(__maybeElement20, __obj.planField(\"f10\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df10.hide(__obj.planField(\"f10\"));");
    gold.append("\n        }");
    gold.append("\n        __gf10 = __item.f10.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf11 != __item.f11.getGeneration()) {");
    gold.append("\n        if (__item.f11.get().has()) {");
    gold.append("\n          Double __maybeElement22 = (Double)(__item.f11.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement23 = __df11.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement23.show(__maybeElement22, __obj.planField(\"f11\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df11.hide(__obj.planField(\"f11\"));");
    gold.append("\n        }");
    gold.append("\n        __gf11 = __item.f11.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf12 != __item.f12.getGeneration()) {");
    gold.append("\n        if (__item.f12.get().has()) {");
    gold.append("\n          Double __maybeElement24 = (Double)(__item.f12.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement25 = __df12.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement25.show(__maybeElement24, __obj.planField(\"f12\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df12.hide(__obj.planField(\"f12\"));");
    gold.append("\n        }");
    gold.append("\n        __gf12 = __item.f12.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf13 != __item.f13.getGeneration()) {");
    gold.append("\n        if (__item.f13.get().has()) {");
    gold.append("\n          NtComplex __maybeElement26 = (NtComplex)(__item.f13.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement27 = __df13.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement27.show(__maybeElement26, __obj.planField(\"f13\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df13.hide(__obj.planField(\"f13\"));");
    gold.append("\n        }");
    gold.append("\n        __gf13 = __item.f13.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf14 != __item.f14.getGeneration()) {");
    gold.append("\n        if (__item.f14.get().has()) {");
    gold.append("\n          NtComplex __maybeElement28 = (NtComplex)(__item.f14.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement29 = __df14.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement29.show(__maybeElement28, __obj.planField(\"f14\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df14.hide(__obj.planField(\"f14\"));");
    gold.append("\n        }");
    gold.append("\n        __gf14 = __item.f14.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf15 != __item.f15.getGeneration()) {");
    gold.append("\n        if (__item.f15.get().has()) {");
    gold.append("\n          NtComplex __maybeElement30 = (NtComplex)(__item.f15.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement31 = __df15.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement31.show(__maybeElement30, __obj.planField(\"f15\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df15.hide(__obj.planField(\"f15\"));");
    gold.append("\n        }");
    gold.append("\n        __gf15 = __item.f15.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf16 != __item.f16.getGeneration()) {");
    gold.append("\n        if (__item.f16.get().has()) {");
    gold.append("\n          Double __maybeElement32 = (Double)(__item.f16.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement33 = __df16.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement33.show(__maybeElement32, __obj.planField(\"f16\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df16.hide(__obj.planField(\"f16\"));");
    gold.append("\n        }");
    gold.append("\n        __gf16 = __item.f16.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf17 != __item.f17.getGeneration()) {");
    gold.append("\n        if (__item.f17.get().has()) {");
    gold.append("\n          Double __maybeElement34 = (Double)(__item.f17.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement35 = __df17.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement35.show(__maybeElement34, __obj.planField(\"f17\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df17.hide(__obj.planField(\"f17\"));");
    gold.append("\n        }");
    gold.append("\n        __gf17 = __item.f17.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf18 != __item.f18.getGeneration()) {");
    gold.append("\n        if (__item.f18.get().has()) {");
    gold.append("\n          Double __maybeElement36 = (Double)(__item.f18.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement37 = __df18.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement37.show(__maybeElement36, __obj.planField(\"f18\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df18.hide(__obj.planField(\"f18\"));");
    gold.append("\n        }");
    gold.append("\n        __gf18 = __item.f18.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf19 != __item.f19.getGeneration()) {");
    gold.append("\n        if (__item.f19.get().has()) {");
    gold.append("\n          Double __maybeElement38 = (Double)(__item.f19.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement39 = __df19.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement39.show(__maybeElement38, __obj.planField(\"f19\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df19.hide(__obj.planField(\"f19\"));");
    gold.append("\n        }");
    gold.append("\n        __gf19 = __item.f19.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf20 != __item.f20.getGeneration()) {");
    gold.append("\n        if (__item.f20.get().has()) {");
    gold.append("\n          Double __maybeElement40 = (Double)(__item.f20.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement41 = __df20.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement41.show(__maybeElement40, __obj.planField(\"f20\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df20.hide(__obj.planField(\"f20\"));");
    gold.append("\n        }");
    gold.append("\n        __gf20 = __item.f20.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf21 != __item.f21.getGeneration()) {");
    gold.append("\n        if (__item.f21.get().has()) {");
    gold.append("\n          NtComplex __maybeElement42 = (NtComplex)(__item.f21.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement43 = __df21.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement43.show(__maybeElement42, __obj.planField(\"f21\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df21.hide(__obj.planField(\"f21\"));");
    gold.append("\n        }");
    gold.append("\n        __gf21 = __item.f21.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf22 != __item.f22.getGeneration()) {");
    gold.append("\n        if (__item.f22.get().has()) {");
    gold.append("\n          NtComplex __maybeElement44 = (NtComplex)(__item.f22.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement45 = __df22.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement45.show(__maybeElement44, __obj.planField(\"f22\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df22.hide(__obj.planField(\"f22\"));");
    gold.append("\n        }");
    gold.append("\n        __gf22 = __item.f22.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf23 != __item.f23.getGeneration()) {");
    gold.append("\n        if (__item.f23.get().has()) {");
    gold.append("\n          NtComplex __maybeElement46 = (NtComplex)(__item.f23.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement47 = __df23.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement47.show(__maybeElement46, __obj.planField(\"f23\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df23.hide(__obj.planField(\"f23\"));");
    gold.append("\n        }");
    gold.append("\n        __gf23 = __item.f23.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf24 != __item.f24.getGeneration()) {");
    gold.append("\n        if (__item.f24.get().has()) {");
    gold.append("\n          Double __maybeElement48 = (Double)(__item.f24.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement49 = __df24.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement49.show(__maybeElement48, __obj.planField(\"f24\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df24.hide(__obj.planField(\"f24\"));");
    gold.append("\n        }");
    gold.append("\n        __gf24 = __item.f24.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf25 != __item.f25.getGeneration()) {");
    gold.append("\n        if (__item.f25.get().has()) {");
    gold.append("\n          Double __maybeElement50 = (Double)(__item.f25.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement51 = __df25.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement51.show(__maybeElement50, __obj.planField(\"f25\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df25.hide(__obj.planField(\"f25\"));");
    gold.append("\n        }");
    gold.append("\n        __gf25 = __item.f25.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf26 != __item.f26.getGeneration()) {");
    gold.append("\n        if (__item.f26.get().has()) {");
    gold.append("\n          Double __maybeElement52 = (Double)(__item.f26.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement53 = __df26.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement53.show(__maybeElement52, __obj.planField(\"f26\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df26.hide(__obj.planField(\"f26\"));");
    gold.append("\n        }");
    gold.append("\n        __gf26 = __item.f26.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf27 != __item.f27.getGeneration()) {");
    gold.append("\n        if (__item.f27.get().has()) {");
    gold.append("\n          Double __maybeElement54 = (Double)(__item.f27.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement55 = __df27.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement55.show(__maybeElement54, __obj.planField(\"f27\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df27.hide(__obj.planField(\"f27\"));");
    gold.append("\n        }");
    gold.append("\n        __gf27 = __item.f27.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf28 != __item.f28.getGeneration()) {");
    gold.append("\n        if (__item.f28.get().has()) {");
    gold.append("\n          Double __maybeElement56 = (Double)(__item.f28.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement57 = __df28.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement57.show(__maybeElement56, __obj.planField(\"f28\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df28.hide(__obj.planField(\"f28\"));");
    gold.append("\n        }");
    gold.append("\n        __gf28 = __item.f28.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf29 != __item.f29.getGeneration()) {");
    gold.append("\n        if (__item.f29.get().has()) {");
    gold.append("\n          NtComplex __maybeElement58 = (NtComplex)(__item.f29.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement59 = __df29.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement59.show(__maybeElement58, __obj.planField(\"f29\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df29.hide(__obj.planField(\"f29\"));");
    gold.append("\n        }");
    gold.append("\n        __gf29 = __item.f29.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf30 != __item.f30.getGeneration()) {");
    gold.append("\n        if (__item.f30.get().has()) {");
    gold.append("\n          NtComplex __maybeElement60 = (NtComplex)(__item.f30.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement61 = __df30.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement61.show(__maybeElement60, __obj.planField(\"f30\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df30.hide(__obj.planField(\"f30\"));");
    gold.append("\n        }");
    gold.append("\n        __gf30 = __item.f30.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf31 != __item.f31.getGeneration()) {");
    gold.append("\n        if (__item.f31.get().has()) {");
    gold.append("\n          NtComplex __maybeElement62 = (NtComplex)(__item.f31.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement63 = __df31.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement63.show(__maybeElement62, __obj.planField(\"f31\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df31.hide(__obj.planField(\"f31\"));");
    gold.append("\n        }");
    gold.append("\n        __gf31 = __item.f31.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf32 != __item.f32.getGeneration()) {");
    gold.append("\n        if (__item.f32.get().has()) {");
    gold.append("\n          Double __maybeElement64 = (Double)(__item.f32.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement65 = __df32.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement65.show(__maybeElement64, __obj.planField(\"f32\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df32.hide(__obj.planField(\"f32\"));");
    gold.append("\n        }");
    gold.append("\n        __gf32 = __item.f32.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf33 != __item.f33.getGeneration()) {");
    gold.append("\n        if (__item.f33.get().has()) {");
    gold.append("\n          Double __maybeElement66 = (Double)(__item.f33.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement67 = __df33.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement67.show(__maybeElement66, __obj.planField(\"f33\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df33.hide(__obj.planField(\"f33\"));");
    gold.append("\n        }");
    gold.append("\n        __gf33 = __item.f33.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf34 != __item.f34.getGeneration()) {");
    gold.append("\n        if (__item.f34.get().has()) {");
    gold.append("\n          Double __maybeElement68 = (Double)(__item.f34.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement69 = __df34.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement69.show(__maybeElement68, __obj.planField(\"f34\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df34.hide(__obj.planField(\"f34\"));");
    gold.append("\n        }");
    gold.append("\n        __gf34 = __item.f34.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf35 != __item.f35.getGeneration()) {");
    gold.append("\n        if (__item.f35.get().has()) {");
    gold.append("\n          Double __maybeElement70 = (Double)(__item.f35.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement71 = __df35.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement71.show(__maybeElement70, __obj.planField(\"f35\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df35.hide(__obj.planField(\"f35\"));");
    gold.append("\n        }");
    gold.append("\n        __gf35 = __item.f35.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf36 != __item.f36.getGeneration()) {");
    gold.append("\n        if (__item.f36.get().has()) {");
    gold.append("\n          Double __maybeElement72 = (Double)(__item.f36.get().get());");
    gold.append("\n          DDouble __maybeDeltaElement73 = __df36.get(() -> new DDouble());");
    gold.append("\n          __maybeDeltaElement73.show(__maybeElement72, __obj.planField(\"f36\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df36.hide(__obj.planField(\"f36\"));");
    gold.append("\n        }");
    gold.append("\n        __gf36 = __item.f36.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf37 != __item.f37.getGeneration()) {");
    gold.append("\n        if (__item.f37.get().has()) {");
    gold.append("\n          NtComplex __maybeElement74 = (NtComplex)(__item.f37.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement75 = __df37.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement75.show(__maybeElement74, __obj.planField(\"f37\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df37.hide(__obj.planField(\"f37\"));");
    gold.append("\n        }");
    gold.append("\n        __gf37 = __item.f37.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf38 != __item.f38.getGeneration()) {");
    gold.append("\n        if (__item.f38.get().has()) {");
    gold.append("\n          NtComplex __maybeElement76 = (NtComplex)(__item.f38.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement77 = __df38.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement77.show(__maybeElement76, __obj.planField(\"f38\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df38.hide(__obj.planField(\"f38\"));");
    gold.append("\n        }");
    gold.append("\n        __gf38 = __item.f38.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf39 != __item.f39.getGeneration()) {");
    gold.append("\n        if (__item.f39.get().has()) {");
    gold.append("\n          NtComplex __maybeElement78 = (NtComplex)(__item.f39.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement79 = __df39.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement79.show(__maybeElement78, __obj.planField(\"f39\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df39.hide(__obj.planField(\"f39\"));");
    gold.append("\n        }");
    gold.append("\n        __gf39 = __item.f39.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf40 != __item.f40.getGeneration()) {");
    gold.append("\n        if (__item.f40.get().has()) {");
    gold.append("\n          NtComplex __maybeElement80 = (NtComplex)(__item.f40.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement81 = __df40.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement81.show(__maybeElement80, __obj.planField(\"f40\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df40.hide(__obj.planField(\"f40\"));");
    gold.append("\n        }");
    gold.append("\n        __gf40 = __item.f40.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf41 != __item.f41.getGeneration()) {");
    gold.append("\n        if (__item.f41.get().has()) {");
    gold.append("\n          NtComplex __maybeElement82 = (NtComplex)(__item.f41.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement83 = __df41.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement83.show(__maybeElement82, __obj.planField(\"f41\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df41.hide(__obj.planField(\"f41\"));");
    gold.append("\n        }");
    gold.append("\n        __gf41 = __item.f41.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf42 != __item.f42.getGeneration()) {");
    gold.append("\n        if (__item.f42.get().has()) {");
    gold.append("\n          NtComplex __maybeElement84 = (NtComplex)(__item.f42.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement85 = __df42.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement85.show(__maybeElement84, __obj.planField(\"f42\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df42.hide(__obj.planField(\"f42\"));");
    gold.append("\n        }");
    gold.append("\n        __gf42 = __item.f42.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf43 != __item.f43.getGeneration()) {");
    gold.append("\n        if (__item.f43.get().has()) {");
    gold.append("\n          NtComplex __maybeElement86 = (NtComplex)(__item.f43.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement87 = __df43.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement87.show(__maybeElement86, __obj.planField(\"f43\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df43.hide(__obj.planField(\"f43\"));");
    gold.append("\n        }");
    gold.append("\n        __gf43 = __item.f43.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf44 != __item.f44.getGeneration()) {");
    gold.append("\n        if (__item.f44.get().has()) {");
    gold.append("\n          NtComplex __maybeElement88 = (NtComplex)(__item.f44.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement89 = __df44.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement89.show(__maybeElement88, __obj.planField(\"f44\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df44.hide(__obj.planField(\"f44\"));");
    gold.append("\n        }");
    gold.append("\n        __gf44 = __item.f44.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf45 != __item.f45.getGeneration()) {");
    gold.append("\n        if (__item.f45.get().has()) {");
    gold.append("\n          NtComplex __maybeElement90 = (NtComplex)(__item.f45.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement91 = __df45.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement91.show(__maybeElement90, __obj.planField(\"f45\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df45.hide(__obj.planField(\"f45\"));");
    gold.append("\n        }");
    gold.append("\n        __gf45 = __item.f45.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf46 != __item.f46.getGeneration()) {");
    gold.append("\n        if (__item.f46.get().has()) {");
    gold.append("\n          NtComplex __maybeElement92 = (NtComplex)(__item.f46.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement93 = __df46.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement93.show(__maybeElement92, __obj.planField(\"f46\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df46.hide(__obj.planField(\"f46\"));");
    gold.append("\n        }");
    gold.append("\n        __gf46 = __item.f46.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf47 != __item.f47.getGeneration()) {");
    gold.append("\n        if (__item.f47.get().has()) {");
    gold.append("\n          NtComplex __maybeElement94 = (NtComplex)(__item.f47.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement95 = __df47.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement95.show(__maybeElement94, __obj.planField(\"f47\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df47.hide(__obj.planField(\"f47\"));");
    gold.append("\n        }");
    gold.append("\n        __gf47 = __item.f47.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf48 != __item.f48.getGeneration()) {");
    gold.append("\n        if (__item.f48.get().has()) {");
    gold.append("\n          NtComplex __maybeElement96 = (NtComplex)(__item.f48.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement97 = __df48.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement97.show(__maybeElement96, __obj.planField(\"f48\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df48.hide(__obj.planField(\"f48\"));");
    gold.append("\n        }");
    gold.append("\n        __gf48 = __item.f48.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf49 != __item.f49.getGeneration()) {");
    gold.append("\n        if (__item.f49.get().has()) {");
    gold.append("\n          NtComplex __maybeElement98 = (NtComplex)(__item.f49.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement99 = __df49.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement99.show(__maybeElement98, __obj.planField(\"f49\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df49.hide(__obj.planField(\"f49\"));");
    gold.append("\n        }");
    gold.append("\n        __gf49 = __item.f49.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf50 != __item.f50.getGeneration()) {");
    gold.append("\n        if (__item.f50.get().has()) {");
    gold.append("\n          NtComplex __maybeElement100 = (NtComplex)(__item.f50.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement101 = __df50.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement101.show(__maybeElement100, __obj.planField(\"f50\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df50.hide(__obj.planField(\"f50\"));");
    gold.append("\n        }");
    gold.append("\n        __gf50 = __item.f50.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf51 != __item.f51.getGeneration()) {");
    gold.append("\n        if (__item.f51.get().has()) {");
    gold.append("\n          NtComplex __maybeElement102 = (NtComplex)(__item.f51.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement103 = __df51.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement103.show(__maybeElement102, __obj.planField(\"f51\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df51.hide(__obj.planField(\"f51\"));");
    gold.append("\n        }");
    gold.append("\n        __gf51 = __item.f51.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf52 != __item.f52.getGeneration()) {");
    gold.append("\n        if (__item.f52.get().has()) {");
    gold.append("\n          NtComplex __maybeElement104 = (NtComplex)(__item.f52.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement105 = __df52.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement105.show(__maybeElement104, __obj.planField(\"f52\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df52.hide(__obj.planField(\"f52\"));");
    gold.append("\n        }");
    gold.append("\n        __gf52 = __item.f52.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf53 != __item.f53.getGeneration()) {");
    gold.append("\n        if (__item.f53.get().has()) {");
    gold.append("\n          NtComplex __maybeElement106 = (NtComplex)(__item.f53.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement107 = __df53.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement107.show(__maybeElement106, __obj.planField(\"f53\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df53.hide(__obj.planField(\"f53\"));");
    gold.append("\n        }");
    gold.append("\n        __gf53 = __item.f53.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf54 != __item.f54.getGeneration()) {");
    gold.append("\n        if (__item.f54.get().has()) {");
    gold.append("\n          NtComplex __maybeElement108 = (NtComplex)(__item.f54.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement109 = __df54.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement109.show(__maybeElement108, __obj.planField(\"f54\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df54.hide(__obj.planField(\"f54\"));");
    gold.append("\n        }");
    gold.append("\n        __gf54 = __item.f54.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf55 != __item.f55.getGeneration()) {");
    gold.append("\n        if (__item.f55.get().has()) {");
    gold.append("\n          NtComplex __maybeElement110 = (NtComplex)(__item.f55.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement111 = __df55.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement111.show(__maybeElement110, __obj.planField(\"f55\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df55.hide(__obj.planField(\"f55\"));");
    gold.append("\n        }");
    gold.append("\n        __gf55 = __item.f55.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf56 != __item.f56.getGeneration()) {");
    gold.append("\n        if (__item.f56.get().has()) {");
    gold.append("\n          NtComplex __maybeElement112 = (NtComplex)(__item.f56.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement113 = __df56.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement113.show(__maybeElement112, __obj.planField(\"f56\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df56.hide(__obj.planField(\"f56\"));");
    gold.append("\n        }");
    gold.append("\n        __gf56 = __item.f56.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf57 != __item.f57.getGeneration()) {");
    gold.append("\n        if (__item.f57.get().has()) {");
    gold.append("\n          NtComplex __maybeElement114 = (NtComplex)(__item.f57.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement115 = __df57.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement115.show(__maybeElement114, __obj.planField(\"f57\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df57.hide(__obj.planField(\"f57\"));");
    gold.append("\n        }");
    gold.append("\n        __gf57 = __item.f57.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf58 != __item.f58.getGeneration()) {");
    gold.append("\n        if (__item.f58.get().has()) {");
    gold.append("\n          NtComplex __maybeElement116 = (NtComplex)(__item.f58.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement117 = __df58.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement117.show(__maybeElement116, __obj.planField(\"f58\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df58.hide(__obj.planField(\"f58\"));");
    gold.append("\n        }");
    gold.append("\n        __gf58 = __item.f58.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf59 != __item.f59.getGeneration()) {");
    gold.append("\n        if (__item.f59.get().has()) {");
    gold.append("\n          NtComplex __maybeElement118 = (NtComplex)(__item.f59.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement119 = __df59.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement119.show(__maybeElement118, __obj.planField(\"f59\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df59.hide(__obj.planField(\"f59\"));");
    gold.append("\n        }");
    gold.append("\n        __gf59 = __item.f59.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf60 != __item.f60.getGeneration()) {");
    gold.append("\n        if (__item.f60.get().has()) {");
    gold.append("\n          NtComplex __maybeElement120 = (NtComplex)(__item.f60.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement121 = __df60.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement121.show(__maybeElement120, __obj.planField(\"f60\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df60.hide(__obj.planField(\"f60\"));");
    gold.append("\n        }");
    gold.append("\n        __gf60 = __item.f60.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf61 != __item.f61.getGeneration()) {");
    gold.append("\n        if (__item.f61.get().has()) {");
    gold.append("\n          NtComplex __maybeElement122 = (NtComplex)(__item.f61.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement123 = __df61.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement123.show(__maybeElement122, __obj.planField(\"f61\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df61.hide(__obj.planField(\"f61\"));");
    gold.append("\n        }");
    gold.append("\n        __gf61 = __item.f61.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf62 != __item.f62.getGeneration()) {");
    gold.append("\n        if (__item.f62.get().has()) {");
    gold.append("\n          NtComplex __maybeElement124 = (NtComplex)(__item.f62.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement125 = __df62.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement125.show(__maybeElement124, __obj.planField(\"f62\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df62.hide(__obj.planField(\"f62\"));");
    gold.append("\n        }");
    gold.append("\n        __gf62 = __item.f62.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__gf63 != __item.f63.getGeneration()) {");
    gold.append("\n        if (__item.f63.get().has()) {");
    gold.append("\n          NtComplex __maybeElement126 = (NtComplex)(__item.f63.get().get());");
    gold.append("\n          DComplex __maybeDeltaElement127 = __df63.get(() -> new DComplex());");
    gold.append("\n          __maybeDeltaElement127.show(__maybeElement126, __obj.planField(\"f63\"));");
    gold.append("\n        } else {");
    gold.append("\n          __df63.hide(__obj.planField(\"f63\"));");
    gold.append("\n        }");
    gold.append("\n        __gf63 = __item.f63.getGeneration();");
    gold.append("\n      }");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public Set<String> __get_intern_strings() {");
    gold.append("\n    HashSet<String> __interns = new HashSet<>();");
    gold.append("\n    __interns.add(\"\");");
    gold.append("\n    __interns.add(\"?\");");
    gold.append("\n    return __interns;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public PrivateView __createPrivateView(NtClient __who, Perspective ___perspective) {");
    gold.append("\n    OperationsDivideCases_3 __self = this;");
    gold.append("\n    DeltaOperationsDivideCases_3 __state = new DeltaOperationsDivideCases_3();");
    gold.append("\n    RTx__ViewerType __viewerState = new RTx__ViewerType();");
    gold.append("\n    return new PrivateView(__who, ___perspective) {");
    gold.append("\n      @Override");
    gold.append("\n      public long memory() {");
    gold.append("\n        return __state.__memory();");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void dumpViewer(JsonStreamWriter __writer) {");
    gold.append("\n        __viewerState.__writeOut(__writer);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void ingest(JsonStreamReader __reader) {");
    gold.append("\n        __viewerState.__ingest(__reader);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void update(JsonStreamWriter __writer) {");
    gold.append("\n        __state.show(__self, PrivateLazyDeltaWriter.bind(__who, __writer, __viewerState));");
    gold.append("\n      }");
    gold.append("\n    };");
    gold.append("\n  }");
    gold.append("\n  private static class RTx__ViewerType implements NtMessageBase {");
    gold.append("\n    private RTx__ViewerType(JsonStreamReader __reader) {");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    public int __DATA_GENERATION = 1;");
    gold.append("\n    private void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.skipValue();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx__ViewerType() {}");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx__ViewerType implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx__ViewerType() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx__ViewerType __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected Object __parse_message2(String channel, JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onCanAssetAttached(NtClient __cvalue) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanCreate(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanInvent(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanSendWhileDisconnected(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onAssetAttached(NtClient __cvalue, NtAsset __asset) {}");
    gold.append("\n  public static HashMap<String, Object> __config() {");
    gold.append("\n    HashMap<String, Object> __map = new HashMap<>();");
    gold.append("\n    return __map;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {}");
    gold.append("\n  private void __construct_0(NtClient __who, NtMessageBase __object) {");
    gold.append("\n    __code_cost += 65;");
    gold.append("\n    __track(0);");
    gold.append("\n    final NtMaybe<Double> r0 = new NtMaybe<Double>(LibArithmetic.Divide.II(1, 1));");
    gold.append("\n    __track(1);");
    gold.append("\n    final NtMaybe<Double> r1 = new NtMaybe<Double>(LibArithmetic.Divide.IL(1, 1L));");
    gold.append("\n    __track(2);");
    gold.append("\n    final NtMaybe<Double> r2 = new NtMaybe<Double>(LibArithmetic.Divide.ID(1, 0.5));");
    gold.append("\n    __track(3);");
    gold.append("\n    final NtMaybe<Double> r3 = new NtMaybe<Double>(LibArithmetic.Divide.ImD(1, (LibArithmetic.Divide.II(1, 2))));");
    gold.append("\n    __track(4);");
    gold.append("\n    final NtMaybe<Double> r4 = new NtMaybe<Double>(LibArithmetic.Divide.ImD(1, (LibArithmetic.Divide.II(1, 0))));");
    gold.append("\n    __track(5);");
    gold.append("\n    final NtMaybe<NtComplex> r5 = new NtMaybe<NtComplex>(LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0)));");
    gold.append("\n    __track(6);");
    gold.append("\n    final NtMaybe<NtComplex> r6 = new NtMaybe<NtComplex>(LibArithmetic.Divide.ImC(1, (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0)))));");
    gold.append("\n    __track(7);");
    gold.append("\n    final NtMaybe<NtComplex> r7 = new NtMaybe<NtComplex>(LibArithmetic.Divide.ImC(1, (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0))));");
    gold.append("\n    __track(8);");
    gold.append("\n    final NtMaybe<Double> r8 = new NtMaybe<Double>(LibArithmetic.Divide.LI(1L, 1));");
    gold.append("\n    __track(9);");
    gold.append("\n    final NtMaybe<Double> r9 = new NtMaybe<Double>(LibArithmetic.Divide.LL(1L, 1L));");
    gold.append("\n    __track(10);");
    gold.append("\n    final NtMaybe<Double> r10 = new NtMaybe<Double>(LibArithmetic.Divide.LD(1L, 0.5));");
    gold.append("\n    __track(11);");
    gold.append("\n    final NtMaybe<Double> r11 = new NtMaybe<Double>(LibArithmetic.Divide.LmD(1L, (LibArithmetic.Divide.II(1, 2))));");
    gold.append("\n    __track(12);");
    gold.append("\n    final NtMaybe<Double> r12 = new NtMaybe<Double>(LibArithmetic.Divide.LmD(1L, (LibArithmetic.Divide.II(1, 0))));");
    gold.append("\n    __track(13);");
    gold.append("\n    final NtMaybe<NtComplex> r13 = new NtMaybe<NtComplex>(LibArithmetic.Divide.LC(1L, new NtComplex(0.0, 1.0)));");
    gold.append("\n    __track(14);");
    gold.append("\n    final NtMaybe<NtComplex> r14 = new NtMaybe<NtComplex>(LibArithmetic.Divide.LmC(1L, (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0)))));");
    gold.append("\n    __track(15);");
    gold.append("\n    final NtMaybe<NtComplex> r15 = new NtMaybe<NtComplex>(LibArithmetic.Divide.LmC(1L, (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0))));");
    gold.append("\n    __track(16);");
    gold.append("\n    final NtMaybe<Double> r16 = new NtMaybe<Double>(LibArithmetic.Divide.DI(0.5, 1));");
    gold.append("\n    __track(17);");
    gold.append("\n    final NtMaybe<Double> r17 = new NtMaybe<Double>(LibArithmetic.Divide.DL(0.5, 1L));");
    gold.append("\n    __track(18);");
    gold.append("\n    final NtMaybe<Double> r18 = new NtMaybe<Double>(LibArithmetic.Divide.DD(0.5, 0.5));");
    gold.append("\n    __track(19);");
    gold.append("\n    final NtMaybe<Double> r19 = new NtMaybe<Double>(LibArithmetic.Divide.DmD(0.5, (LibArithmetic.Divide.II(1, 2))));");
    gold.append("\n    __track(20);");
    gold.append("\n    final NtMaybe<Double> r20 = new NtMaybe<Double>(LibArithmetic.Divide.DmD(0.5, (LibArithmetic.Divide.II(1, 0))));");
    gold.append("\n    __track(21);");
    gold.append("\n    final NtMaybe<NtComplex> r21 = new NtMaybe<NtComplex>(LibArithmetic.Divide.DC(0.5, new NtComplex(0.0, 1.0)));");
    gold.append("\n    __track(22);");
    gold.append("\n    final NtMaybe<NtComplex> r22 = new NtMaybe<NtComplex>(LibArithmetic.Divide.DmC(0.5, (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0)))));");
    gold.append("\n    __track(23);");
    gold.append("\n    final NtMaybe<NtComplex> r23 = new NtMaybe<NtComplex>(LibArithmetic.Divide.DmC(0.5, (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0))));");
    gold.append("\n    __track(24);");
    gold.append("\n    final NtMaybe<Double> r24 = new NtMaybe<Double>(LibArithmetic.Divide.mDI((LibArithmetic.Divide.II(1, 2)), 1));");
    gold.append("\n    __track(25);");
    gold.append("\n    final NtMaybe<Double> r25 = new NtMaybe<Double>(LibArithmetic.Divide.mDL((LibArithmetic.Divide.II(1, 2)), 1L));");
    gold.append("\n    __track(26);");
    gold.append("\n    final NtMaybe<Double> r26 = new NtMaybe<Double>(LibArithmetic.Divide.mDD((LibArithmetic.Divide.II(1, 2)), 0.5));");
    gold.append("\n    __track(27);");
    gold.append("\n    final NtMaybe<Double> r27 = new NtMaybe<Double>(LibArithmetic.Divide.mDmD((LibArithmetic.Divide.II(1, 2)), (LibArithmetic.Divide.II(1, 2))));");
    gold.append("\n    __track(28);");
    gold.append("\n    final NtMaybe<Double> r28 = new NtMaybe<Double>(LibArithmetic.Divide.mDmD((LibArithmetic.Divide.II(1, 2)), (LibArithmetic.Divide.II(1, 0))));");
    gold.append("\n    __track(29);");
    gold.append("\n    final NtMaybe<NtComplex> r29 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mDC((LibArithmetic.Divide.II(1, 2)), new NtComplex(0.0, 1.0)));");
    gold.append("\n    __track(30);");
    gold.append("\n    final NtMaybe<NtComplex> r30 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mDmC((LibArithmetic.Divide.II(1, 2)), (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0)))));");
    gold.append("\n    __track(31);");
    gold.append("\n    final NtMaybe<NtComplex> r31 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mDmC((LibArithmetic.Divide.II(1, 2)), (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0))));");
    gold.append("\n    __track(32);");
    gold.append("\n    final NtMaybe<Double> r32 = new NtMaybe<Double>(LibArithmetic.Divide.mDI((LibArithmetic.Divide.II(1, 0)), 1));");
    gold.append("\n    __track(33);");
    gold.append("\n    final NtMaybe<Double> r33 = new NtMaybe<Double>(LibArithmetic.Divide.mDL((LibArithmetic.Divide.II(1, 0)), 1L));");
    gold.append("\n    __track(34);");
    gold.append("\n    final NtMaybe<Double> r34 = new NtMaybe<Double>(LibArithmetic.Divide.mDD((LibArithmetic.Divide.II(1, 0)), 0.5));");
    gold.append("\n    __track(35);");
    gold.append("\n    final NtMaybe<Double> r35 = new NtMaybe<Double>(LibArithmetic.Divide.mDmD((LibArithmetic.Divide.II(1, 0)), (LibArithmetic.Divide.II(1, 2))));");
    gold.append("\n    __track(36);");
    gold.append("\n    final NtMaybe<Double> r36 = new NtMaybe<Double>(LibArithmetic.Divide.mDmD((LibArithmetic.Divide.II(1, 0)), (LibArithmetic.Divide.II(1, 0))));");
    gold.append("\n    __track(37);");
    gold.append("\n    final NtMaybe<NtComplex> r37 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mDC((LibArithmetic.Divide.II(1, 0)), new NtComplex(0.0, 1.0)));");
    gold.append("\n    __track(38);");
    gold.append("\n    final NtMaybe<NtComplex> r38 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mDmC((LibArithmetic.Divide.II(1, 0)), (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0)))));");
    gold.append("\n    __track(39);");
    gold.append("\n    final NtMaybe<NtComplex> r39 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mDmC((LibArithmetic.Divide.II(1, 0)), (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0))));");
    gold.append("\n    __track(40);");
    gold.append("\n    final NtMaybe<NtComplex> r40 = new NtMaybe<NtComplex>(LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 1));");
    gold.append("\n    __track(41);");
    gold.append("\n    final NtMaybe<NtComplex> r41 = new NtMaybe<NtComplex>(LibArithmetic.Divide.CL(new NtComplex(0.0, 1.0), 1L));");
    gold.append("\n    __track(42);");
    gold.append("\n    final NtMaybe<NtComplex> r42 = new NtMaybe<NtComplex>(LibArithmetic.Divide.CD(new NtComplex(0.0, 1.0), 0.5));");
    gold.append("\n    __track(43);");
    gold.append("\n    final NtMaybe<NtComplex> r43 = new NtMaybe<NtComplex>(LibArithmetic.Divide.CmD(new NtComplex(0.0, 1.0), (LibArithmetic.Divide.II(1, 2))));");
    gold.append("\n    __track(44);");
    gold.append("\n    final NtMaybe<NtComplex> r44 = new NtMaybe<NtComplex>(LibArithmetic.Divide.CmD(new NtComplex(0.0, 1.0), (LibArithmetic.Divide.II(1, 0))));");
    gold.append("\n    __track(45);");
    gold.append("\n    final NtMaybe<NtComplex> r45 = new NtMaybe<NtComplex>(LibArithmetic.Divide.CC(new NtComplex(0.0, 1.0), new NtComplex(0.0, 1.0)));");
    gold.append("\n    __track(46);");
    gold.append("\n    final NtMaybe<NtComplex> r46 = new NtMaybe<NtComplex>(LibArithmetic.Divide.CmC(new NtComplex(0.0, 1.0), (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0)))));");
    gold.append("\n    __track(47);");
    gold.append("\n    final NtMaybe<NtComplex> r47 = new NtMaybe<NtComplex>(LibArithmetic.Divide.CmC(new NtComplex(0.0, 1.0), (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0))));");
    gold.append("\n    __track(48);");
    gold.append("\n    final NtMaybe<NtComplex> r48 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCI((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), 1));");
    gold.append("\n    __track(49);");
    gold.append("\n    final NtMaybe<NtComplex> r49 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCL((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), 1L));");
    gold.append("\n    __track(50);");
    gold.append("\n    final NtMaybe<NtComplex> r50 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCD((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), 0.5));");
    gold.append("\n    __track(51);");
    gold.append("\n    final NtMaybe<NtComplex> r51 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCmD((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), (LibArithmetic.Divide.II(1, 2))));");
    gold.append("\n    __track(52);");
    gold.append("\n    final NtMaybe<NtComplex> r52 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCmD((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), (LibArithmetic.Divide.II(1, 0))));");
    gold.append("\n    __track(53);");
    gold.append("\n    final NtMaybe<NtComplex> r53 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCC((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), new NtComplex(0.0, 1.0)));");
    gold.append("\n    __track(54);");
    gold.append("\n    final NtMaybe<NtComplex> r54 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCmC((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0)))));");
    gold.append("\n    __track(55);");
    gold.append("\n    final NtMaybe<NtComplex> r55 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCmC((LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0))), (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0))));");
    gold.append("\n    __track(56);");
    gold.append("\n    final NtMaybe<NtComplex> r56 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCI((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), 1));");
    gold.append("\n    __track(57);");
    gold.append("\n    final NtMaybe<NtComplex> r57 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCL((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), 1L));");
    gold.append("\n    __track(58);");
    gold.append("\n    final NtMaybe<NtComplex> r58 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCD((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), 0.5));");
    gold.append("\n    __track(59);");
    gold.append("\n    final NtMaybe<NtComplex> r59 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCmD((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), (LibArithmetic.Divide.II(1, 2))));");
    gold.append("\n    __track(60);");
    gold.append("\n    final NtMaybe<NtComplex> r60 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCmD((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), (LibArithmetic.Divide.II(1, 0))));");
    gold.append("\n    __track(61);");
    gold.append("\n    final NtMaybe<NtComplex> r61 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCC((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), new NtComplex(0.0, 1.0)));");
    gold.append("\n    __track(62);");
    gold.append("\n    final NtMaybe<NtComplex> r62 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCmC((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), (LibArithmetic.Divide.IC(1, new NtComplex(0.0, 1.0)))));");
    gold.append("\n    __track(63);");
    gold.append("\n    final NtMaybe<NtComplex> r63 = new NtMaybe<NtComplex>(LibArithmetic.Divide.mCmC((LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0)), (LibArithmetic.Divide.CI(new NtComplex(0.0, 1.0), 0))));");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected NtMessageBase __parse_construct_arg(JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient __who, NtMessageBase __object) {");
    gold.append("\n    __construct_0(__who, __object);");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\nBegin");
    gold.append("\nEnd");
    gold.append("\n--REFLECTION RESULTS-------------------------------------");
    gold.append("\n{\"types\":{\"#root\":{\"nature\":\"reactive_record\",\"name\":\"Root\",\"fields\":{\"f0\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f1\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f2\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f3\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f4\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f5\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f6\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f7\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f8\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f9\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f10\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f11\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f12\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f13\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f14\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f15\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f16\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f17\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f18\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f19\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f20\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f21\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f22\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f23\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f24\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f25\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f26\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f27\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f28\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f29\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f30\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f31\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f32\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f33\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f34\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f35\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f36\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"double\"}},\"privacy\":\"public\"},\"f37\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f38\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f39\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f40\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f41\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f42\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f43\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f44\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f45\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f46\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f47\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f48\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f49\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f50\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f51\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f52\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f53\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f54\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f55\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f56\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f57\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f58\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f59\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f60\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f61\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f62\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"},\"f63\":{\"type\":{\"nature\":\"native_maybe\",\"type\":{\"nature\":\"native_value\",\"type\":\"complex\"}},\"privacy\":\"public\"}}},\"__ViewerType\":{\"nature\":\"native_message\",\"name\":\"__ViewerType\",\"anonymous\":true,\"fields\":{}}},\"channels\":{},\"constructors\":[],\"labels\":[]}");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{},\"entropy\":\"0\"}-->{\"__constructed\":true,\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\nCPU:65");
    gold.append("\nMEMORY:2944");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"50\"}-->{\"__messages\":null,\"__seq\":2,\"__entropy\":\"4804307197456638271\",\"__time\":\"50\"} need:false in:-50");
    gold.append("\n+ NO_ONE DELTA:{\"data\":{\"f0\":1.0,\"f1\":1.0,\"f2\":2.0,\"f3\":2.0,\"f5\":{\"r\":0.0,\"i\":-1.0},\"f6\":{\"r\":0.0,\"i\":1.0},\"f8\":1.0,\"f9\":1.0,\"f10\":2.0,\"f11\":2.0,\"f13\":{\"r\":0.0,\"i\":-1.0},\"f14\":{\"r\":0.0,\"i\":1.0},\"f16\":0.5,\"f17\":0.5,\"f18\":1.0,\"f19\":1.0,\"f21\":{\"r\":0.0,\"i\":-0.5},\"f22\":{\"r\":0.0,\"i\":0.5},\"f24\":0.5,\"f25\":0.5,\"f26\":1.0,\"f27\":1.0,\"f29\":{\"r\":0.0,\"i\":-0.5},\"f30\":{\"r\":0.0,\"i\":0.5},\"f40\":{\"r\":0.0,\"i\":1.0},\"f41\":{\"r\":0.0,\"i\":1.0},\"f42\":{\"r\":0.0,\"i\":2.0},\"f43\":{\"r\":0.0,\"i\":2.0},\"f45\":{\"r\":-1.0,\"i\":0.0},\"f46\":{\"r\":1.0,\"i\":0.0},\"f48\":{\"r\":0.0,\"i\":-1.0},\"f49\":{\"r\":0.0,\"i\":-1.0},\"f50\":{\"r\":0.0,\"i\":-2.0},\"f51\":{\"r\":0.0,\"i\":-2.0},\"f53\":{\"r\":1.0,\"i\":0.0},\"f54\":{\"r\":-1.0,\"i\":-0.0},\"f62\":{\"r\":0.0,\"i\":-1.0}},\"seq\":2}");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"75\"}-->{\"__messages\":null,\"__seq\":3,\"__entropy\":\"-1034601897293430941\",\"__time\":\"75\"} need:false in:-75");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":3}");
    gold.append("\n+ RANDO DELTA:{\"data\":{\"f0\":1.0,\"f1\":1.0,\"f2\":2.0,\"f3\":2.0,\"f5\":{\"r\":0.0,\"i\":-1.0},\"f6\":{\"r\":0.0,\"i\":1.0},\"f8\":1.0,\"f9\":1.0,\"f10\":2.0,\"f11\":2.0,\"f13\":{\"r\":0.0,\"i\":-1.0},\"f14\":{\"r\":0.0,\"i\":1.0},\"f16\":0.5,\"f17\":0.5,\"f18\":1.0,\"f19\":1.0,\"f21\":{\"r\":0.0,\"i\":-0.5},\"f22\":{\"r\":0.0,\"i\":0.5},\"f24\":0.5,\"f25\":0.5,\"f26\":1.0,\"f27\":1.0,\"f29\":{\"r\":0.0,\"i\":-0.5},\"f30\":{\"r\":0.0,\"i\":0.5},\"f40\":{\"r\":0.0,\"i\":1.0},\"f41\":{\"r\":0.0,\"i\":1.0},\"f42\":{\"r\":0.0,\"i\":2.0},\"f43\":{\"r\":0.0,\"i\":2.0},\"f45\":{\"r\":-1.0,\"i\":0.0},\"f46\":{\"r\":1.0,\"i\":0.0},\"f48\":{\"r\":0.0,\"i\":-1.0},\"f49\":{\"r\":0.0,\"i\":-1.0},\"f50\":{\"r\":0.0,\"i\":-2.0},\"f51\":{\"r\":0.0,\"i\":-2.0},\"f53\":{\"r\":1.0,\"i\":0.0},\"f54\":{\"r\":-1.0,\"i\":-0.0},\"f62\":{\"r\":0.0,\"i\":-1.0}},\"seq\":3}");
    gold.append("\nRANDO was DENIED:");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"100\"}-->{\"__messages\":null,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__time\":\"100\"} need:false in:-100");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":4}");
    gold.append("\n+ RANDO DELTA:{\"seq\":4}");
    gold.append("\nMEMORY:11478");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n--DUMP RESULTS-------------------------------------");
    gold.append("\n{\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n{\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_OperationsHappy_4 = null;
  private String get_OperationsHappy_4() {
    if (cached_OperationsHappy_4 != null) {
      return cached_OperationsHappy_4;
    }
    cached_OperationsHappy_4 = generateTestOutput(true, "OperationsHappy_4", "./test_code/BinaryExpression_OperationsHappy_success.a");
    return cached_OperationsHappy_4;
  }

  @Test
  public void testOperationsHappyEmission() {
    assertEmissionGood(get_OperationsHappy_4());
  }

  @Test
  public void testOperationsHappySuccess() {
    assertLivePass(get_OperationsHappy_4());
  }

  @Test
  public void testOperationsHappyGoodWillHappy() {
    assertGoodWillHappy(get_OperationsHappy_4());
  }

  @Test
  public void testOperationsHappyExceptionFree() {
    assertExceptionFree(get_OperationsHappy_4());
  }

  @Test
  public void testOperationsHappyTODOFree() {
    assertTODOFree(get_OperationsHappy_4());
  }

  @Test
  public void stable_OperationsHappy_4() {
    String live = get_OperationsHappy_4();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_OperationsHappy_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[]\"--JAVA---------------------------------------------");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.delta.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.json.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport org.adamalang.runtime.sys.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.util.HashMap;");
    gold.append("\nimport java.util.HashSet;");
    gold.append("\nimport java.util.Map;");
    gold.append("\nimport java.util.Set;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class OperationsHappy_4 extends LivingDocument {");
    gold.append("\n  private final RxClient other;");
    gold.append("\n  private final RxString s;");
    gold.append("\n  @Override");
    gold.append("\n  public long __memory() {");
    gold.append("\n    long __sum = super.__memory();");
    gold.append("\n    __sum += other.__memory();");
    gold.append("\n    __sum += s.__memory();");
    gold.append("\n    return __sum;");
    gold.append("\n  }");
    gold.append("\n  public OperationsHappy_4(DocumentMonitor __monitor) {");
    gold.append("\n    super(__monitor);");
    gold.append("\n    other = new RxClient(this, NtClient.NO_ONE);");
    gold.append("\n    s = new RxString(this, \"\");");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __insert(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"other\":");
    gold.append("\n            other.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"s\":");
    gold.append("\n            s.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __patch(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"other\":");
    gold.append("\n            other.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"s\":");
    gold.append("\n            s.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n    __writer.beginObject();");
    gold.append("\n    __writer.writeObjectFieldIntro(\"other\");");
    gold.append("\n    other.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"s\");");
    gold.append("\n    s.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__state\");");
    gold.append("\n    __state.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__constructed\");");
    gold.append("\n    __constructed.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__next_time\");");
    gold.append("\n    __next_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__last_expire_time\");");
    gold.append("\n    __last_expire_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__blocked\");");
    gold.append("\n    __blocked.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__seq\");");
    gold.append("\n    __seq.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__entropy\");");
    gold.append("\n    __entropy.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_future_id\");");
    gold.append("\n    __auto_future_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__connection_id\");");
    gold.append("\n    __connection_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__message_id\");");
    gold.append("\n    __message_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__time\");");
    gold.append("\n    __time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_table_row_id\");");
    gold.append("\n    __auto_table_row_id.__dump(__writer);");
    gold.append("\n    __dumpDeduper(__writer);");
    gold.append("\n    __dumpClients(__writer);");
    gold.append("\n    __dumpMessages(__writer);");
    gold.append("\n    __writer.endObject();");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n    __state.__commit(\"__state\", __forward, __reverse);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __forward, __reverse);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __forward, __reverse);");
    gold.append("\n    __last_expire_time.__commit(\"__last_expire_time\", __forward, __reverse);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __forward, __reverse);");
    gold.append("\n    __seq.__commit(\"__seq\", __forward, __reverse);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __forward, __reverse);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __forward, __reverse);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __forward, __reverse);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __forward, __reverse);");
    gold.append("\n    __time.__commit(\"__time\", __forward, __reverse);");
    gold.append("\n    __auto_table_row_id.__commit(\"__auto_table_row_id\", __forward, __reverse);");
    gold.append("\n    other.__commit(\"other\", __forward, __reverse);");
    gold.append("\n    s.__commit(\"s\", __forward, __reverse);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __last_expire_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    __auto_table_row_id.__revert();");
    gold.append("\n    other.__revert();");
    gold.append("\n    s.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  private class DeltaOperationsHappy_4 implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaOperationsHappy_4() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(OperationsHappy_4 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __obj.manifest();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public Set<String> __get_intern_strings() {");
    gold.append("\n    HashSet<String> __interns = new HashSet<>();");
    gold.append("\n    __interns.add(\"\");");
    gold.append("\n    __interns.add(\"?\");");
    gold.append("\n    return __interns;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public PrivateView __createPrivateView(NtClient __who, Perspective ___perspective) {");
    gold.append("\n    OperationsHappy_4 __self = this;");
    gold.append("\n    DeltaOperationsHappy_4 __state = new DeltaOperationsHappy_4();");
    gold.append("\n    RTx__ViewerType __viewerState = new RTx__ViewerType();");
    gold.append("\n    return new PrivateView(__who, ___perspective) {");
    gold.append("\n      @Override");
    gold.append("\n      public long memory() {");
    gold.append("\n        return __state.__memory();");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void dumpViewer(JsonStreamWriter __writer) {");
    gold.append("\n        __viewerState.__writeOut(__writer);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void ingest(JsonStreamReader __reader) {");
    gold.append("\n        __viewerState.__ingest(__reader);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void update(JsonStreamWriter __writer) {");
    gold.append("\n        __state.show(__self, PrivateLazyDeltaWriter.bind(__who, __writer, __viewerState));");
    gold.append("\n      }");
    gold.append("\n    };");
    gold.append("\n  }");
    gold.append("\n  private static class RTx__ViewerType implements NtMessageBase {");
    gold.append("\n    private RTx__ViewerType(JsonStreamReader __reader) {");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    public int __DATA_GENERATION = 1;");
    gold.append("\n    private void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.skipValue();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx__ViewerType() {}");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx__ViewerType implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx__ViewerType() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx__ViewerType __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected Object __parse_message2(String channel, JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onCanAssetAttached(NtClient __cvalue) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanCreate(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanInvent(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanSendWhileDisconnected(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onAssetAttached(NtClient __cvalue, NtAsset __asset) {}");
    gold.append("\n  public static HashMap<String, Object> __config() {");
    gold.append("\n    HashMap<String, Object> __map = new HashMap<>();");
    gold.append("\n    return __map;");
    gold.append("\n  }");
    gold.append("\n  public void __test_Addition(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"Addition\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 12;");
    gold.append("\n      __track(0);");
    gold.append("\n      __assert_truth(LibString.equality(\"xy\", \"x\" + \"y\"), 1, 2, 1, 27);");
    gold.append("\n      __track(1);");
    gold.append("\n      __assert_truth(LibString.equality(\"xtrue\", \"x\" + true), 2, 2, 2, 31);");
    gold.append("\n      __track(2);");
    gold.append("\n      __assert_truth(LibString.equality(\"falsex\", false + \"x\"), 3, 2, 3, 33);");
    gold.append("\n      __track(3);");
    gold.append("\n      __assert_truth(LibString.equality(\"x1\", \"x\" + 1), 4, 2, 4, 25);");
    gold.append("\n      __track(4);");
    gold.append("\n      __assert_truth(LibString.equality(\"1x\", 1 + \"x\"), 5, 2, 5, 25);");
    gold.append("\n      __track(5);");
    gold.append("\n      __assert_truth(LibString.equality(\"x3.14\", \"x\" + 3.14), 6, 2, 6, 31);");
    gold.append("\n      __track(6);");
    gold.append("\n      __assert_truth(LibString.equality(\"3.14x\", 3.14 + \"x\"), 7, 2, 7, 31);");
    gold.append("\n      __track(7);");
    gold.append("\n      __assert_truth(3 == 1 + 2, 8, 2, 8, 20);");
    gold.append("\n      __track(8);");
    gold.append("\n      __assert_truth(3 == 2.0 + 1, 9, 2, 9, 22);");
    gold.append("\n      __track(9);");
    gold.append("\n      __assert_truth(3 == 1 + 2.0, 10, 2, 10, 22);");
    gold.append("\n      __track(10);");
    gold.append("\n      __assert_truth(LibMath.near(3.0, 2.0 + 1.0), 11, 2, 11, 26);");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  public void __test_Subtraction(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"Subtraction\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 5;");
    gold.append("\n      __track(11);");
    gold.append("\n      __assert_truth(5 == 10 - 5, 15, 2, 15, 21);");
    gold.append("\n      __track(12);");
    gold.append("\n      __assert_truth(LibMath.near(3.0, 6 - 3), 16, 2, 16, 22);");
    gold.append("\n      __track(13);");
    gold.append("\n      __assert_truth(LibMath.near(3.0, 6.0 - 3.0), 17, 2, 17, 26);");
    gold.append("\n      __track(14);");
    gold.append("\n      __assert_truth(LibMath.near(3.0, 6.0 - 3), 18, 2, 18, 24);");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  public void __test_Multiply(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"Multiply\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 6;");
    gold.append("\n      __track(15);");
    gold.append("\n      __assert_truth(LibString.equality(\"xxx\", LibString.multiply(\"x\", 3)), 22, 2, 22, 26);");
    gold.append("\n      __track(16);");
    gold.append("\n      __assert_truth(6 == 2 * 3, 23, 2, 23, 20);");
    gold.append("\n      __track(17);");
    gold.append("\n      __assert_truth(10 == 2.0 * 5.0, 24, 2, 24, 25);");
    gold.append("\n      __track(18);");
    gold.append("\n      __assert_truth(10 == 2.0 * 5, 25, 2, 25, 23);");
    gold.append("\n      __track(19);");
    gold.append("\n      __assert_truth(10 == 2 * 5.0, 26, 2, 26, 23);");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  public void __test_Divide(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"Divide\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 5;");
    gold.append("\n      __track(20);");
    gold.append("\n      __assert_truth(2 == (LibArithmetic.Divide.II(4, 2)).getOrDefaultTo(-100.0), 30, 2, 30, 45);");
    gold.append("\n      __track(21);");
    gold.append("\n      __assert_truth(LibMath.near(2.0, (LibArithmetic.Divide.ID(4, 2.0)).getOrDefaultTo(-100.0)), 31, 2, 31, 49);");
    gold.append("\n      __track(22);");
    gold.append("\n      __assert_truth(LibMath.near(2.0, (LibArithmetic.Divide.DD(4.0, 2.0)).getOrDefaultTo(-100.0)), 32, 2, 32, 51);");
    gold.append("\n      __track(23);");
    gold.append("\n      __assert_truth(LibMath.near(1.5, (LibArithmetic.Divide.DI(3.0, 2)).getOrDefaultTo(-100.0)), 33, 2, 33, 49);");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  public void __test_Mod(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"Mod\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 2;");
    gold.append("\n      __track(24);");
    gold.append("\n      __assert_truth(2 == 7 % 5, 37, 2, 37, 20);");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  public void __test_Relate(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"Relate\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 3;");
    gold.append("\n      __track(25);");
    gold.append("\n      __assert_truth(1 < 2, 41, 2, 41, 15);");
    gold.append("\n      __track(26);");
    gold.append("\n      __assert_truth(1.5 < 4.3, 42, 2, 42, 19);");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  public void __test_Logic(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"Logic\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 11;");
    gold.append("\n      __track(27);");
    gold.append("\n      __assert_truth(true == true, 46, 2, 46, 22);");
    gold.append("\n      __track(28);");
    gold.append("\n      __assert_truth(false != true, 47, 2, 47, 23);");
    gold.append("\n      __track(29);");
    gold.append("\n      __assert_truth(true && true, 48, 2, 48, 22);");
    gold.append("\n      __track(30);");
    gold.append("\n      __assert_truth(!(true && false), 49, 2, 49, 26);");
    gold.append("\n      __track(31);");
    gold.append("\n      __assert_truth(!(false && true), 50, 2, 50, 26);");
    gold.append("\n      __track(32);");
    gold.append("\n      __assert_truth(!(false && false), 51, 2, 51, 27);");
    gold.append("\n      __track(33);");
    gold.append("\n      __assert_truth(true || true, 52, 2, 52, 22);");
    gold.append("\n      __track(34);");
    gold.append("\n      __assert_truth(true || false, 53, 2, 53, 23);");
    gold.append("\n      __track(35);");
    gold.append("\n      __assert_truth(false || true, 54, 2, 54, 23);");
    gold.append("\n      __track(36);");
    gold.append("\n      __assert_truth(!(false || false), 55, 2, 55, 27);");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  public void __test_Equals(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"Equals\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 11;");
    gold.append("\n      __track(37);");
    gold.append("\n      __assert_truth((NtClient.NO_ONE.equals(NtClient.NO_ONE)), 62, 2, 62, 28);");
    gold.append("\n      __track(38);");
    gold.append("\n      __assert_truth((NtClient.NO_ONE.equals(other.get())), 63, 2, 63, 26);");
    gold.append("\n      __track(39);");
    gold.append("\n      __assert_truth((other.get().equals(NtClient.NO_ONE)), 64, 2, 64, 26);");
    gold.append("\n      __track(40);");
    gold.append("\n      __assert_truth(!(!(NtClient.NO_ONE.equals(NtClient.NO_ONE))), 65, 2, 65, 31);");
    gold.append("\n      __track(41);");
    gold.append("\n      __assert_truth(LibString.equality(s.get(), \"\"), 66, 2, 66, 17);");
    gold.append("\n      __track(42);");
    gold.append("\n      __assert_truth(LibString.equality(\"\", s.get()), 67, 2, 67, 17);");
    gold.append("\n      __track(43);");
    gold.append("\n      __assert_truth(LibString.equality(s.get(), s.get()), 68, 2, 68, 16);");
    gold.append("\n      __track(44);");
    gold.append("\n      int x = 123;");
    gold.append("\n      __track(45);");
    gold.append("\n      long y = 123;");
    gold.append("\n      __track(46);");
    gold.append("\n      __assert_truth(x == y, 71, 2, 71, 16);");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {\"Addition\", \"Subtraction\", \"Multiply\", \"Divide\", \"Mod\", \"Relate\", \"Logic\", \"Equals\"};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {");
    gold.append("\n    switch(testName) {");
    gold.append("\n      case \"Addition\":");
    gold.append("\n          __test_Addition(report);");
    gold.append("\n          return;");
    gold.append("\n      case \"Subtraction\":");
    gold.append("\n          __test_Subtraction(report);");
    gold.append("\n          return;");
    gold.append("\n      case \"Multiply\":");
    gold.append("\n          __test_Multiply(report);");
    gold.append("\n          return;");
    gold.append("\n      case \"Divide\":");
    gold.append("\n          __test_Divide(report);");
    gold.append("\n          return;");
    gold.append("\n      case \"Mod\":");
    gold.append("\n          __test_Mod(report);");
    gold.append("\n          return;");
    gold.append("\n      case \"Relate\":");
    gold.append("\n          __test_Relate(report);");
    gold.append("\n          return;");
    gold.append("\n      case \"Logic\":");
    gold.append("\n          __test_Logic(report);");
    gold.append("\n          return;");
    gold.append("\n      case \"Equals\":");
    gold.append("\n          __test_Equals(report);");
    gold.append("\n          return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, NtMessageBase message) {}");
    gold.append("\n  @Override");
    gold.append("\n  protected NtMessageBase __parse_construct_arg(JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\nBegin");
    gold.append("\nEnd");
    gold.append("\n--REFLECTION RESULTS-------------------------------------");
    gold.append("\n{\"types\":{\"#root\":{\"nature\":\"reactive_record\",\"name\":\"Root\",\"fields\":{}},\"__ViewerType\":{\"nature\":\"native_message\",\"name\":\"__ViewerType\",\"anonymous\":true,\"fields\":{}}},\"channels\":{},\"constructors\":[],\"labels\":[]}");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{},\"entropy\":\"0\"}-->{\"__constructed\":true,\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\nCPU:0");
    gold.append("\nMEMORY:504");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"50\"}-->{\"__messages\":null,\"__seq\":2,\"__entropy\":\"4804307197456638271\",\"__time\":\"50\"} need:false in:-50");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":2}");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"75\"}-->{\"__messages\":null,\"__seq\":3,\"__entropy\":\"-1034601897293430941\",\"__time\":\"75\"} need:false in:-75");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":3}");
    gold.append("\n+ RANDO DELTA:{\"seq\":3}");
    gold.append("\nRANDO was DENIED:");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"100\"}-->{\"__messages\":null,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__time\":\"100\"} need:false in:-100");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":4}");
    gold.append("\n+ RANDO DELTA:{\"seq\":4}");
    gold.append("\nMEMORY:622");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"other\":{\"agent\":\"?\",\"authority\":\"?\"},\"s\":\"\",\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n--DUMP RESULTS-------------------------------------");
    gold.append("\n{\"other\":{\"agent\":\"?\",\"authority\":\"?\"},\"s\":\"\",\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n{\"other\":{\"agent\":\"?\",\"authority\":\"?\"},\"s\":\"\",\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\nTEST[Addition] = 100.0%");
    gold.append("\nTEST[Subtraction] = 100.0%");
    gold.append("\nTEST[Multiply] = 100.0%");
    gold.append("\nTEST[Divide] = 100.0%");
    gold.append("\nTEST[Mod] = 100.0%");
    gold.append("\nTEST[Relate] = 100.0%");
    gold.append("\nTEST[Logic] = 100.0%");
    gold.append("\nTEST[Equals] = 100.0%");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_StringCompare_5 = null;
  private String get_StringCompare_5() {
    if (cached_StringCompare_5 != null) {
      return cached_StringCompare_5;
    }
    cached_StringCompare_5 = generateTestOutput(true, "StringCompare_5", "./test_code/BinaryExpression_StringCompare_success.a");
    return cached_StringCompare_5;
  }

  @Test
  public void testStringCompareEmission() {
    assertEmissionGood(get_StringCompare_5());
  }

  @Test
  public void testStringCompareSuccess() {
    assertLivePass(get_StringCompare_5());
  }

  @Test
  public void testStringCompareGoodWillHappy() {
    assertGoodWillHappy(get_StringCompare_5());
  }

  @Test
  public void testStringCompareExceptionFree() {
    assertExceptionFree(get_StringCompare_5());
  }

  @Test
  public void testStringCompareTODOFree() {
    assertTODOFree(get_StringCompare_5());
  }

  @Test
  public void stable_StringCompare_5() {
    String live = get_StringCompare_5();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_StringCompare_success.a");
    gold.append("\n--EMISSION-----------------------------------------");
    gold.append("\nEmission Success, Yay");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[]\"--JAVA---------------------------------------------");
    gold.append("\nimport org.adamalang.runtime.async.*;");
    gold.append("\nimport org.adamalang.runtime.contracts.*;");
    gold.append("\nimport org.adamalang.runtime.delta.*;");
    gold.append("\nimport org.adamalang.runtime.exceptions.*;");
    gold.append("\nimport org.adamalang.runtime.index.*;");
    gold.append("\nimport org.adamalang.runtime.json.*;");
    gold.append("\nimport org.adamalang.runtime.natives.*;");
    gold.append("\nimport org.adamalang.runtime.natives.lists.*;");
    gold.append("\nimport org.adamalang.runtime.ops.*;");
    gold.append("\nimport org.adamalang.runtime.reactives.*;");
    gold.append("\nimport org.adamalang.runtime.stdlib.*;");
    gold.append("\nimport org.adamalang.runtime.sys.*;");
    gold.append("\nimport java.util.function.Consumer;");
    gold.append("\nimport java.util.function.Function;");
    gold.append("\nimport java.util.ArrayList;");
    gold.append("\nimport java.util.Comparator;");
    gold.append("\nimport java.util.HashMap;");
    gold.append("\nimport java.util.HashSet;");
    gold.append("\nimport java.util.Map;");
    gold.append("\nimport java.util.Set;");
    gold.append("\nimport java.lang.Math;");
    gold.append("\npublic class StringCompare_5 extends LivingDocument {");
    gold.append("\n  @Override");
    gold.append("\n  public long __memory() {");
    gold.append("\n    long __sum = super.__memory();");
    gold.append("\n    return __sum;");
    gold.append("\n  }");
    gold.append("\n  public StringCompare_5(DocumentMonitor __monitor) {");
    gold.append("\n    super(__monitor);");
    gold.append("\n    __goodwillBudget = 100000;");
    gold.append("\n    __goodwillLimitOfBudget = 100000;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __insert(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__insert(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __patch(JsonStreamReader __reader) {");
    gold.append("\n    if (__reader.startObject()) {");
    gold.append("\n      while(__reader.notEndOfObject()) {");
    gold.append("\n        String __fieldName = __reader.fieldName();");
    gold.append("\n        switch (__fieldName) {");
    gold.append("\n          case \"__state\":");
    gold.append("\n            __state.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__constructed\":");
    gold.append("\n            __constructed.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__next_time\":");
    gold.append("\n            __next_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__last_expire_time\":");
    gold.append("\n            __last_expire_time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__blocked\":");
    gold.append("\n            __blocked.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__seq\":");
    gold.append("\n            __seq.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__entropy\":");
    gold.append("\n            __entropy.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_future_id\":");
    gold.append("\n            __auto_future_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__connection_id\":");
    gold.append("\n            __connection_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__message_id\":");
    gold.append("\n            __message_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__time\":");
    gold.append("\n            __time.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__auto_table_row_id\":");
    gold.append("\n            __auto_table_row_id.__patch(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__dedupe\":");
    gold.append("\n            __hydrateDeduper(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__clients\":");
    gold.append("\n            __hydrateClients(__reader);");
    gold.append("\n            break;");
    gold.append("\n          case \"__messages\":");
    gold.append("\n            __hydrateMessages(__reader);");
    gold.append("\n            break;");
    gold.append("\n          default:");
    gold.append("\n            __reader.skipValue();");
    gold.append("\n        }");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __dump(JsonStreamWriter __writer) {");
    gold.append("\n    __writer.beginObject();");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__state\");");
    gold.append("\n    __state.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__constructed\");");
    gold.append("\n    __constructed.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__next_time\");");
    gold.append("\n    __next_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__last_expire_time\");");
    gold.append("\n    __last_expire_time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__blocked\");");
    gold.append("\n    __blocked.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__seq\");");
    gold.append("\n    __seq.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__entropy\");");
    gold.append("\n    __entropy.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_future_id\");");
    gold.append("\n    __auto_future_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__connection_id\");");
    gold.append("\n    __connection_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__message_id\");");
    gold.append("\n    __message_id.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__time\");");
    gold.append("\n    __time.__dump(__writer);");
    gold.append("\n    __writer.writeObjectFieldIntro(\"__auto_table_row_id\");");
    gold.append("\n    __auto_table_row_id.__dump(__writer);");
    gold.append("\n    __dumpDeduper(__writer);");
    gold.append("\n    __dumpClients(__writer);");
    gold.append("\n    __dumpMessages(__writer);");
    gold.append("\n    __writer.endObject();");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __commit(String __name, JsonStreamWriter __forward, JsonStreamWriter __reverse) {");
    gold.append("\n    __state.__commit(\"__state\", __forward, __reverse);");
    gold.append("\n    __constructed.__commit(\"__constructed\", __forward, __reverse);");
    gold.append("\n    __next_time.__commit(\"__next_time\", __forward, __reverse);");
    gold.append("\n    __last_expire_time.__commit(\"__last_expire_time\", __forward, __reverse);");
    gold.append("\n    __blocked.__commit(\"__blocked\", __forward, __reverse);");
    gold.append("\n    __seq.__commit(\"__seq\", __forward, __reverse);");
    gold.append("\n    __entropy.__commit(\"__entropy\", __forward, __reverse);");
    gold.append("\n    __auto_future_id.__commit(\"__auto_future_id\", __forward, __reverse);");
    gold.append("\n    __connection_id.__commit(\"__connection_id\", __forward, __reverse);");
    gold.append("\n    __message_id.__commit(\"__message_id\", __forward, __reverse);");
    gold.append("\n    __time.__commit(\"__time\", __forward, __reverse);");
    gold.append("\n    __auto_table_row_id.__commit(\"__auto_table_row_id\", __forward, __reverse);");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __revert() {");
    gold.append("\n    __state.__revert();");
    gold.append("\n    __constructed.__revert();");
    gold.append("\n    __next_time.__revert();");
    gold.append("\n    __last_expire_time.__revert();");
    gold.append("\n    __blocked.__revert();");
    gold.append("\n    __seq.__revert();");
    gold.append("\n    __entropy.__revert();");
    gold.append("\n    __auto_future_id.__revert();");
    gold.append("\n    __connection_id.__revert();");
    gold.append("\n    __message_id.__revert();");
    gold.append("\n    __time.__revert();");
    gold.append("\n    __auto_table_row_id.__revert();");
    gold.append("\n    /* root */");
    gold.append("\n  }");
    gold.append("\n  private class DeltaStringCompare_5 implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaStringCompare_5() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(StringCompare_5 __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      __obj.manifest();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public Set<String> __get_intern_strings() {");
    gold.append("\n    HashSet<String> __interns = new HashSet<>();");
    gold.append("\n    __interns.add(\"\");");
    gold.append("\n    __interns.add(\"?\");");
    gold.append("\n    return __interns;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public PrivateView __createPrivateView(NtClient __who, Perspective ___perspective) {");
    gold.append("\n    StringCompare_5 __self = this;");
    gold.append("\n    DeltaStringCompare_5 __state = new DeltaStringCompare_5();");
    gold.append("\n    RTx__ViewerType __viewerState = new RTx__ViewerType();");
    gold.append("\n    return new PrivateView(__who, ___perspective) {");
    gold.append("\n      @Override");
    gold.append("\n      public long memory() {");
    gold.append("\n        return __state.__memory();");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void dumpViewer(JsonStreamWriter __writer) {");
    gold.append("\n        __viewerState.__writeOut(__writer);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void ingest(JsonStreamReader __reader) {");
    gold.append("\n        __viewerState.__ingest(__reader);");
    gold.append("\n      }");
    gold.append("\n      @Override");
    gold.append("\n      public void update(JsonStreamWriter __writer) {");
    gold.append("\n        __state.show(__self, PrivateLazyDeltaWriter.bind(__who, __writer, __viewerState));");
    gold.append("\n      }");
    gold.append("\n    };");
    gold.append("\n  }");
    gold.append("\n  private static class RTx__ViewerType implements NtMessageBase {");
    gold.append("\n    private RTx__ViewerType(JsonStreamReader __reader) {");
    gold.append("\n      __ingest(__reader);");
    gold.append("\n    }");
    gold.append("\n    public int __DATA_GENERATION = 1;");
    gold.append("\n    private void __ingest(JsonStreamReader __reader) {");
    gold.append("\n      __reader.skipValue();");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public void __writeOut(JsonStreamWriter __writer) {");
    gold.append("\n      __writer.beginObject();");
    gold.append("\n      __writer.endObject();");
    gold.append("\n    }");
    gold.append("\n    private RTx__ViewerType() {}");
    gold.append("\n  }");
    gold.append("\n  private class DeltaRTx__ViewerType implements DeltaNode {");
    gold.append("\n    private boolean __emitted;");
    gold.append("\n    private DeltaRTx__ViewerType() {");
    gold.append("\n      __emitted = false;");
    gold.append("\n    }");
    gold.append("\n    @Override");
    gold.append("\n    public long __memory() {");
    gold.append("\n      long __sum = 40;");
    gold.append("\n      return __sum;");
    gold.append("\n    }");
    gold.append("\n    public void show(RTx__ViewerType __item, PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      PrivateLazyDeltaWriter __obj = __writer.planObject();");
    gold.append("\n      if (__obj.end()) {");
    gold.append("\n        __emitted = true;");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n    public void hide(PrivateLazyDeltaWriter __writer) {");
    gold.append("\n      if (__emitted) {");
    gold.append("\n        __emitted = false;");
    gold.append("\n        __writer.writeNull();");
    gold.append("\n      }");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __route(AsyncTask task) {");
    gold.append("\n    return;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected Object __parse_message2(String channel, JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __reset_future_queues() {");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __invoke_label(String __new_state) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onConnected(NtClient __cvalue) {");
    gold.append("\n    boolean __result = false;");
    gold.append("\n    return __result;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onDisconnected(NtClient __cvalue) {}");
    gold.append("\n  @Override");
    gold.append("\n  public boolean __onCanAssetAttached(NtClient __cvalue) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanCreate(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanInvent(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  public static boolean __onCanSendWhileDisconnected(NtClient __client) {");
    gold.append("\n    return false;");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __onAssetAttached(NtClient __cvalue, NtAsset __asset) {}");
    gold.append("\n  public static HashMap<String, Object> __config() {");
    gold.append("\n    HashMap<String, Object> __map = new HashMap<>();");
    gold.append("\n    return __map;");
    gold.append("\n  }");
    gold.append("\n  public void __test_PrimaryTest(TestReportBuilder report) {");
    gold.append("\n    report.begin(\"PrimaryTest\");");
    gold.append("\n    {");
    gold.append("\n      __code_cost += 12;");
    gold.append("\n      __track(0);");
    gold.append("\n      __assert_truth(LibString.equality(\"x\", \"x\"), 1, 2, 1, 20);");
    gold.append("\n      __track(1);");
    gold.append("\n      __assert_truth((!LibString.equality(\"x\", \"y\")), 2, 2, 2, 22);");
    gold.append("\n      __track(2);");
    gold.append("\n      __assert_truth(!(LibString.equality(\"x\", \"y\")), 3, 2, 3, 23);");
    gold.append("\n      __track(3);");
    gold.append("\n      __assert_truth(LibString.compare(\"x\", \"y\") < 0, 4, 2, 4, 19);");
    gold.append("\n      __track(4);");
    gold.append("\n      __assert_truth(LibString.compare(\"x\", \"y\") <= 0, 5, 2, 5, 20);");
    gold.append("\n      __track(5);");
    gold.append("\n      __assert_truth(!(LibString.compare(\"x\", \"y\") > 0), 6, 2, 6, 22);");
    gold.append("\n      __track(6);");
    gold.append("\n      __assert_truth(!(LibString.compare(\"x\", \"y\") >= 0), 7, 2, 7, 23);");
    gold.append("\n      __track(7);");
    gold.append("\n      __assert_truth(LibString.compare(\"y\", \"x\") > 0, 8, 2, 8, 19);");
    gold.append("\n      __track(8);");
    gold.append("\n      __assert_truth(LibString.compare(\"y\", \"x\") >= 0, 9, 2, 9, 20);");
    gold.append("\n      __track(9);");
    gold.append("\n      __assert_truth(!(LibString.compare(\"y\", \"x\") < 0), 10, 2, 10, 22);");
    gold.append("\n      __track(10);");
    gold.append("\n      __assert_truth(!(LibString.compare(\"y\", \"x\") <= 0), 11, 2, 11, 23);");
    gold.append("\n    }");
    gold.append("\n    report.end(getAndResetAssertions());");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public String[] __getTests() {");
    gold.append("\n    return new String[] {\"PrimaryTest\"};");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  public void __test(TestReportBuilder report, String testName) {");
    gold.append("\n    switch(testName) {");
    gold.append("\n      case \"PrimaryTest\":");
    gold.append("\n          __test_PrimaryTest(report);");
    gold.append("\n          return;");
    gold.append("\n    }");
    gold.append("\n  }");
    gold.append("\n  @Override");
    gold.append("\n  protected void __construct_intern(NtClient who, NtMessageBase message) {}");
    gold.append("\n  @Override");
    gold.append("\n  protected NtMessageBase __parse_construct_arg(JsonStreamReader __reader) {");
    gold.append("\n    __reader.skipValue();");
    gold.append("\n    return NtMessageBase.NULL;");
    gold.append("\n  }");
    gold.append("\n  /* end of file */");
    gold.append("\n}");
    gold.append("\n");
    gold.append("\n--JAVA COMPILE RESULTS-----------------------------");
    gold.append("\nBegin");
    gold.append("\nEnd");
    gold.append("\n--REFLECTION RESULTS-------------------------------------");
    gold.append("\n{\"types\":{\"#root\":{\"nature\":\"reactive_record\",\"name\":\"Root\",\"fields\":{}},\"__ViewerType\":{\"nature\":\"native_message\",\"name\":\"__ViewerType\",\"anonymous\":true,\"fields\":{}}},\"channels\":{},\"constructors\":[],\"labels\":[]}");
    gold.append("\n--JAVA RUNNING-------------------------------------");
    gold.append("\n{\"command\":\"construct\",\"timestamp\":\"0\",\"who\":{\"agent\":\"?\",\"authority\":\"?\"},\"arg\":{},\"entropy\":\"0\"}-->{\"__constructed\":true,\"__entropy\":\"0\"} need:true in:0");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"25\"}-->{\"__messages\":null,\"__seq\":1,\"__entropy\":\"-4962768465676381896\",\"__time\":\"25\"} need:false in:-25");
    gold.append("\nCPU:0");
    gold.append("\nMEMORY:384");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"50\"}-->{\"__messages\":null,\"__seq\":2,\"__entropy\":\"4804307197456638271\",\"__time\":\"50\"} need:false in:-50");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":2}");
    gold.append("\nNO_ONE was DENIED");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"75\"}-->{\"__messages\":null,\"__seq\":3,\"__entropy\":\"-1034601897293430941\",\"__time\":\"75\"} need:false in:-75");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":3}");
    gold.append("\n+ RANDO DELTA:{\"seq\":3}");
    gold.append("\nRANDO was DENIED:");
    gold.append("\n{\"command\":\"invalidate\",\"timestamp\":\"100\"}-->{\"__messages\":null,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__time\":\"100\"} need:false in:-100");
    gold.append("\n+ NO_ONE DELTA:{\"seq\":4}");
    gold.append("\n+ RANDO DELTA:{\"seq\":4}");
    gold.append("\nMEMORY:502");
    gold.append("\n--JAVA RESULTS-------------------------------------");
    gold.append("\n{\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n--DUMP RESULTS-------------------------------------");
    gold.append("\n{\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n{\"__state\":\"\",\"__constructed\":true,\"__next_time\":\"0\",\"__last_expire_time\":\"0\",\"__blocked\":false,\"__seq\":4,\"__entropy\":\"7848011421992302230\",\"__auto_future_id\":0,\"__connection_id\":0,\"__message_id\":0,\"__time\":\"100\",\"__auto_table_row_id\":0}");
    gold.append("\n--JAVA TEST RESULTS--------------------------------");
    gold.append("\nTEST[PrimaryTest] = 100.0%");
    gold.append("\n");
    gold.append("\nSuccess");
    assertStable(live, gold);
  }
  private String cached_WhenCantAdd_6 = null;
  private String get_WhenCantAdd_6() {
    if (cached_WhenCantAdd_6 != null) {
      return cached_WhenCantAdd_6;
    }
    cached_WhenCantAdd_6 = generateTestOutput(false, "WhenCantAdd_6", "./test_code/BinaryExpression_WhenCantAdd_failure.a");
    return cached_WhenCantAdd_6;
  }

  @Test
  public void testWhenCantAddFailure() {
    assertLiveFail(get_WhenCantAdd_6());
  }

  @Test
  public void testWhenCantAddNotTerribleLineNumbers() {
    assertNotTerribleLineNumbers(get_WhenCantAdd_6());
  }

  @Test
  public void testWhenCantAddExceptionFree() {
    assertExceptionFree(get_WhenCantAdd_6());
  }

  @Test
  public void testWhenCantAddTODOFree() {
    assertTODOFree(get_WhenCantAdd_6());
  }

  @Test
  public void stable_WhenCantAdd_6() {
    String live = get_WhenCantAdd_6();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_WhenCantAdd_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[{\"range\":{\"start\":{\"line\":17,\"character\":12},\"end\":{\"line\":17,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'long' and 'bool' are unable to be added with the + operator.\\n\\tThe left hand side has a numeric type of 'long' which can be added with types: 'int', 'long', or 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":18,\"character\":12},\"end\":{\"line\":18,\"character\":34}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'list<int>' and 'bool' are unable to be added with the + operator.\\n\\tThe left hand side has a type that is unable to the added. (ADD01)\"},{\"range\":{\"start\":{\"line\":22,\"character\":3},\"end\":{\"line\":22,\"character\":11}},\"severity\":1,\"source\":\"error\",\"message\":\"Expression expected to be computed, rather than assigned to (Environment)\"},{\"range\":{\"start\":{\"line\":22,\"character\":3},\"end\":{\"line\":22,\"character\":7}},\"severity\":1,\"source\":\"error\",\"message\":\"Expression expected to be computed, rather than assigned to (Environment)\"},{\"range\":{\"start\":{\"line\":22,\"character\":10},\"end\":{\"line\":22,\"character\":11}},\"severity\":1,\"source\":\"error\",\"message\":\"Expression expected to be computed, rather than assigned to (Environment)\"},{\"range\":{\"start\":{\"line\":22,\"character\":3},\"end\":{\"line\":22,\"character\":11}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'int' are unable to be added with the + operator.\\n\\tThe left hand side has a type of 'bool' which may only be added with a right hand type of 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":22,\"character\":17},\"end\":{\"line\":22,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'string' / 'int' (OperatorTable)\"},{\"range\":{\"start\":{\"line\":1,\"character\":11},\"end\":{\"line\":1,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'bool' are unable to be added with the + operator.\\n\\tThe left hand side has a type of 'bool' which may only be added with a right hand type of 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":2,\"character\":11},\"end\":{\"line\":2,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'int' are unable to be added with the + operator.\\n\\tThe left hand side has a type of 'bool' which may only be added with a right hand type of 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":3,\"character\":11},\"end\":{\"line\":3,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'int' and 'bool' are unable to be added with the + operator.\\n\\tThe left hand side has a numeric type of 'int' which can be added with types: 'int', 'double', or 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":4,\"character\":11},\"end\":{\"line\":4,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'double' are unable to be added with the + operator.\\n\\tThe left hand side has a type of 'bool' which may only be added with a right hand type of 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":5,\"character\":11},\"end\":{\"line\":5,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'double' and 'bool' are unable to be added with the + operator.\\n\\tThe left hand side has a numeric type of 'double' which can be added with types: 'int, 'double', or 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":6,\"character\":11},\"end\":{\"line\":6,\"character\":25}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'client' are unable to be added with the + operator.\\n\\tThe left hand side has a type of 'bool' which may only be added with a right hand type of 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":7,\"character\":11},\"end\":{\"line\":7,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'client' and '__ViewerType' are unable to be added with the + operator.\\n\\tThe left hand side has a type that is unable to the added. (ADD01)\"}]\"--JAVA---------------------------------------------");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_WhenCantCompare_7 = null;
  private String get_WhenCantCompare_7() {
    if (cached_WhenCantCompare_7 != null) {
      return cached_WhenCantCompare_7;
    }
    cached_WhenCantCompare_7 = generateTestOutput(false, "WhenCantCompare_7", "./test_code/BinaryExpression_WhenCantCompare_failure.a");
    return cached_WhenCantCompare_7;
  }

  @Test
  public void testWhenCantCompareFailure() {
    assertLiveFail(get_WhenCantCompare_7());
  }

  @Test
  public void testWhenCantCompareNotTerribleLineNumbers() {
    assertNotTerribleLineNumbers(get_WhenCantCompare_7());
  }

  @Test
  public void testWhenCantCompareExceptionFree() {
    assertExceptionFree(get_WhenCantCompare_7());
  }

  @Test
  public void testWhenCantCompareTODOFree() {
    assertTODOFree(get_WhenCantCompare_7());
  }

  @Test
  public void stable_WhenCantCompare_7() {
    String live = get_WhenCantCompare_7();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_WhenCantCompare_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[{\"range\":{\"start\":{\"line\":4,\"character\":11},\"end\":{\"line\":4,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'bool' and 'int' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":5,\"character\":11},\"end\":{\"line\":5,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'int' and 'bool' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":6,\"character\":11},\"end\":{\"line\":6,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'bool' and 'double' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":7,\"character\":11},\"end\":{\"line\":7,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'double' and 'bool' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":8,\"character\":11},\"end\":{\"line\":8,\"character\":26}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'bool' and 'client' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":9,\"character\":11},\"end\":{\"line\":9,\"character\":24}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'client' and '__ViewerType' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":10,\"character\":10},\"end\":{\"line\":10,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: enum types are incompatible 'X' vs 'T'. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":15,\"character\":11},\"end\":{\"line\":15,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'bool' and 'int' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":16,\"character\":11},\"end\":{\"line\":16,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'int' and 'bool' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":17,\"character\":11},\"end\":{\"line\":17,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'bool' and 'double' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":18,\"character\":11},\"end\":{\"line\":18,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'double' and 'bool' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":19,\"character\":11},\"end\":{\"line\":19,\"character\":26}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'bool' and 'client' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":20,\"character\":11},\"end\":{\"line\":20,\"character\":24}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: unable to compare types 'client' and '__ViewerType' for equality. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":21,\"character\":10},\"end\":{\"line\":21,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: enum types are incompatible 'X' vs 'T'. (RuleSetEquality)\"},{\"range\":{\"start\":{\"line\":25,\"character\":12},\"end\":{\"line\":25,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'int' are unable to be added with the + operator.\\n\\tThe left hand side has a type of 'bool' which may only be added with a right hand type of 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":25,\"character\":26},\"end\":{\"line\":25,\"character\":32}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'string' / 'int' (OperatorTable)\"}]\"--JAVA---------------------------------------------");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_WhenCantDivide_8 = null;
  private String get_WhenCantDivide_8() {
    if (cached_WhenCantDivide_8 != null) {
      return cached_WhenCantDivide_8;
    }
    cached_WhenCantDivide_8 = generateTestOutput(false, "WhenCantDivide_8", "./test_code/BinaryExpression_WhenCantDivide_failure.a");
    return cached_WhenCantDivide_8;
  }

  @Test
  public void testWhenCantDivideFailure() {
    assertLiveFail(get_WhenCantDivide_8());
  }

  @Test
  public void testWhenCantDivideNotTerribleLineNumbers() {
    assertNotTerribleLineNumbers(get_WhenCantDivide_8());
  }

  @Test
  public void testWhenCantDivideExceptionFree() {
    assertExceptionFree(get_WhenCantDivide_8());
  }

  @Test
  public void testWhenCantDivideTODOFree() {
    assertTODOFree(get_WhenCantDivide_8());
  }

  @Test
  public void stable_WhenCantDivide_8() {
    String live = get_WhenCantDivide_8();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_WhenCantDivide_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[{\"range\":{\"start\":{\"line\":1,\"character\":11},\"end\":{\"line\":1,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'bool' / 'bool' (OperatorTable)\"},{\"range\":{\"start\":{\"line\":2,\"character\":11},\"end\":{\"line\":2,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'bool' / 'int' (OperatorTable)\"},{\"range\":{\"start\":{\"line\":3,\"character\":11},\"end\":{\"line\":3,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'int' / 'bool' (OperatorTable)\"},{\"range\":{\"start\":{\"line\":4,\"character\":11},\"end\":{\"line\":4,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'bool' / 'double' (OperatorTable)\"},{\"range\":{\"start\":{\"line\":5,\"character\":11},\"end\":{\"line\":5,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'double' / 'bool' (OperatorTable)\"},{\"range\":{\"start\":{\"line\":6,\"character\":11},\"end\":{\"line\":6,\"character\":25}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'bool' / 'client' (OperatorTable)\"},{\"range\":{\"start\":{\"line\":7,\"character\":11},\"end\":{\"line\":7,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'client' / '__ViewerType' (OperatorTable)\"},{\"range\":{\"start\":{\"line\":8,\"character\":12},\"end\":{\"line\":8,\"character\":24}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'client' / '__ViewerType' (OperatorTable)\"}]\"--JAVA---------------------------------------------");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_WhenCantLogic_9 = null;
  private String get_WhenCantLogic_9() {
    if (cached_WhenCantLogic_9 != null) {
      return cached_WhenCantLogic_9;
    }
    cached_WhenCantLogic_9 = generateTestOutput(false, "WhenCantLogic_9", "./test_code/BinaryExpression_WhenCantLogic_failure.a");
    return cached_WhenCantLogic_9;
  }

  @Test
  public void testWhenCantLogicFailure() {
    assertLiveFail(get_WhenCantLogic_9());
  }

  @Test
  public void testWhenCantLogicNotTerribleLineNumbers() {
    assertNotTerribleLineNumbers(get_WhenCantLogic_9());
  }

  @Test
  public void testWhenCantLogicExceptionFree() {
    assertExceptionFree(get_WhenCantLogic_9());
  }

  @Test
  public void testWhenCantLogicTODOFree() {
    assertTODOFree(get_WhenCantLogic_9());
  }

  @Test
  public void stable_WhenCantLogic_9() {
    String live = get_WhenCantLogic_9();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_WhenCantLogic_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[{\"range\":{\"start\":{\"line\":2,\"character\":19},\"end\":{\"line\":2,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'int' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":2,\"character\":11},\"end\":{\"line\":2,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'int' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":3,\"character\":11},\"end\":{\"line\":3,\"character\":12}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'int' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":3,\"character\":11},\"end\":{\"line\":3,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'int' and 'bool' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":4,\"character\":19},\"end\":{\"line\":4,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'double' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":4,\"character\":11},\"end\":{\"line\":4,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'double' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":5,\"character\":11},\"end\":{\"line\":5,\"character\":14}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'double' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":5,\"character\":11},\"end\":{\"line\":5,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'double' and 'bool' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":6,\"character\":19},\"end\":{\"line\":6,\"character\":26}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'client' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":6,\"character\":11},\"end\":{\"line\":6,\"character\":26}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'client' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":7,\"character\":11},\"end\":{\"line\":7,\"character\":18}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'client' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":17,\"character\":22},\"end\":{\"line\":17,\"character\":24}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually '__ViewerType' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":7,\"character\":11},\"end\":{\"line\":7,\"character\":24}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'client' and '__ViewerType' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":12,\"character\":19},\"end\":{\"line\":12,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'int' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":12,\"character\":11},\"end\":{\"line\":12,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'int' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":13,\"character\":11},\"end\":{\"line\":13,\"character\":12}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'int' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":13,\"character\":11},\"end\":{\"line\":13,\"character\":20}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'int' and 'bool' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":14,\"character\":19},\"end\":{\"line\":14,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'double' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":14,\"character\":11},\"end\":{\"line\":14,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'double' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":15,\"character\":11},\"end\":{\"line\":15,\"character\":14}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'double' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":15,\"character\":11},\"end\":{\"line\":15,\"character\":22}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'double' and 'bool' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":16,\"character\":19},\"end\":{\"line\":16,\"character\":26}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'client' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":16,\"character\":11},\"end\":{\"line\":16,\"character\":26}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'client' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":17,\"character\":11},\"end\":{\"line\":17,\"character\":18}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually 'client' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":17,\"character\":22},\"end\":{\"line\":17,\"character\":24}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: must have a type of 'bool', but the type is actually '__ViewerType' (TypeCheckFailures)\"},{\"range\":{\"start\":{\"line\":17,\"character\":11},\"end\":{\"line\":17,\"character\":24}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'client' and '__ViewerType' are unable to be joined with logical operators (&&, ||).\\n\\tBoth left and right hand side of the operator must be of type 'bool'. (RuleSetLogic)\"}]\"--JAVA---------------------------------------------");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_WhenCantMod_10 = null;
  private String get_WhenCantMod_10() {
    if (cached_WhenCantMod_10 != null) {
      return cached_WhenCantMod_10;
    }
    cached_WhenCantMod_10 = generateTestOutput(false, "WhenCantMod_10", "./test_code/BinaryExpression_WhenCantMod_failure.a");
    return cached_WhenCantMod_10;
  }

  @Test
  public void testWhenCantModFailure() {
    assertLiveFail(get_WhenCantMod_10());
  }

  @Test
  public void testWhenCantModNotTerribleLineNumbers() {
    assertNotTerribleLineNumbers(get_WhenCantMod_10());
  }

  @Test
  public void testWhenCantModExceptionFree() {
    assertExceptionFree(get_WhenCantMod_10());
  }

  @Test
  public void testWhenCantModTODOFree() {
    assertTODOFree(get_WhenCantMod_10());
  }

  @Test
  public void stable_WhenCantMod_10() {
    String live = get_WhenCantMod_10();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_WhenCantMod_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[{\"range\":{\"start\":{\"line\":1,\"character\":11},\"end\":{\"line\":1,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'bool' and 'bool' are unable to be used with the mod (%) operator/. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":2,\"character\":11},\"end\":{\"line\":2,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'bool' and 'int' are unable to be used with the mod (%) operator/. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":3,\"character\":11},\"end\":{\"line\":3,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'int' and 'bool' are unable to be used with the mod (%) operator/. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":4,\"character\":11},\"end\":{\"line\":4,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'bool' and 'double' are unable to be used with the mod (%) operator/. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":5,\"character\":11},\"end\":{\"line\":5,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'double' and 'bool' are unable to be used with the mod (%) operator/. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":6,\"character\":11},\"end\":{\"line\":6,\"character\":25}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'bool' and 'client' are unable to be used with the mod (%) operator/. (RuleSetLogic)\"},{\"range\":{\"start\":{\"line\":7,\"character\":11},\"end\":{\"line\":7,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'client' and '__ViewerType' are unable to be used with the mod (%) operator/. (RuleSetLogic)\"}]\"--JAVA---------------------------------------------");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_WhenCantMultiply_11 = null;
  private String get_WhenCantMultiply_11() {
    if (cached_WhenCantMultiply_11 != null) {
      return cached_WhenCantMultiply_11;
    }
    cached_WhenCantMultiply_11 = generateTestOutput(false, "WhenCantMultiply_11", "./test_code/BinaryExpression_WhenCantMultiply_failure.a");
    return cached_WhenCantMultiply_11;
  }

  @Test
  public void testWhenCantMultiplyFailure() {
    assertLiveFail(get_WhenCantMultiply_11());
  }

  @Test
  public void testWhenCantMultiplyNotTerribleLineNumbers() {
    assertNotTerribleLineNumbers(get_WhenCantMultiply_11());
  }

  @Test
  public void testWhenCantMultiplyExceptionFree() {
    assertExceptionFree(get_WhenCantMultiply_11());
  }

  @Test
  public void testWhenCantMultiplyTODOFree() {
    assertTODOFree(get_WhenCantMultiply_11());
  }

  @Test
  public void stable_WhenCantMultiply_11() {
    String live = get_WhenCantMultiply_11();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_WhenCantMultiply_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[{\"range\":{\"start\":{\"line\":11,\"character\":3},\"end\":{\"line\":11,\"character\":11}},\"severity\":1,\"source\":\"error\",\"message\":\"Expression expected to be computed, rather than assigned to (Environment)\"},{\"range\":{\"start\":{\"line\":11,\"character\":3},\"end\":{\"line\":11,\"character\":7}},\"severity\":1,\"source\":\"error\",\"message\":\"Expression expected to be computed, rather than assigned to (Environment)\"},{\"range\":{\"start\":{\"line\":11,\"character\":10},\"end\":{\"line\":11,\"character\":11}},\"severity\":1,\"source\":\"error\",\"message\":\"Expression expected to be computed, rather than assigned to (Environment)\"},{\"range\":{\"start\":{\"line\":11,\"character\":3},\"end\":{\"line\":11,\"character\":11}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'int' are unable to be added with the + operator.\\n\\tThe left hand side has a type of 'bool' which may only be added with a right hand type of 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":11,\"character\":17},\"end\":{\"line\":11,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'string' / 'int' (OperatorTable)\"},{\"range\":{\"start\":{\"line\":1,\"character\":11},\"end\":{\"line\":1,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'bool' and 'bool' are unable to be multiplied with the * operator. (Multiply)\"},{\"range\":{\"start\":{\"line\":2,\"character\":11},\"end\":{\"line\":2,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'bool' and 'int' are unable to be multiplied with the * operator. (Multiply)\"},{\"range\":{\"start\":{\"line\":3,\"character\":11},\"end\":{\"line\":3,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'int' and 'bool' are unable to be multiplied with the * operator. (Multiply)\"},{\"range\":{\"start\":{\"line\":4,\"character\":11},\"end\":{\"line\":4,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'bool' and 'double' are unable to be multiplied with the * operator. (Multiply)\"},{\"range\":{\"start\":{\"line\":5,\"character\":11},\"end\":{\"line\":5,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'double' and 'bool' are unable to be multiplied with the * operator. (Multiply)\"},{\"range\":{\"start\":{\"line\":6,\"character\":11},\"end\":{\"line\":6,\"character\":25}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'bool' and 'client' are unable to be multiplied with the * operator. (Multiply)\"},{\"range\":{\"start\":{\"line\":7,\"character\":11},\"end\":{\"line\":7,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"Type check failure: the types 'client' and '__ViewerType' are unable to be multiplied with the * operator. (Multiply)\"}]\"--JAVA---------------------------------------------");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_WhenCantRelate_12 = null;
  private String get_WhenCantRelate_12() {
    if (cached_WhenCantRelate_12 != null) {
      return cached_WhenCantRelate_12;
    }
    cached_WhenCantRelate_12 = generateTestOutput(false, "WhenCantRelate_12", "./test_code/BinaryExpression_WhenCantRelate_failure.a");
    return cached_WhenCantRelate_12;
  }

  @Test
  public void testWhenCantRelateFailure() {
    assertLiveFail(get_WhenCantRelate_12());
  }

  @Test
  public void testWhenCantRelateNotTerribleLineNumbers() {
    assertNotTerribleLineNumbers(get_WhenCantRelate_12());
  }

  @Test
  public void testWhenCantRelateExceptionFree() {
    assertExceptionFree(get_WhenCantRelate_12());
  }

  @Test
  public void testWhenCantRelateTODOFree() {
    assertTODOFree(get_WhenCantRelate_12());
  }

  @Test
  public void stable_WhenCantRelate_12() {
    String live = get_WhenCantRelate_12();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_WhenCantRelate_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[{\"range\":{\"start\":{\"line\":1,\"character\":11},\"end\":{\"line\":1,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'bool' is unable to be compared with type 'bool'. (Compare)\"},{\"range\":{\"start\":{\"line\":2,\"character\":11},\"end\":{\"line\":2,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'bool' is unable to be compared with type 'int'. (Compare)\"},{\"range\":{\"start\":{\"line\":3,\"character\":11},\"end\":{\"line\":3,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'int' is unable to be compared with type 'bool'. (Compare)\"},{\"range\":{\"start\":{\"line\":4,\"character\":11},\"end\":{\"line\":4,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'bool' is unable to be compared with type 'double'. (Compare)\"},{\"range\":{\"start\":{\"line\":5,\"character\":11},\"end\":{\"line\":5,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'double' is unable to be compared with type 'bool'. (Compare)\"},{\"range\":{\"start\":{\"line\":6,\"character\":11},\"end\":{\"line\":6,\"character\":25}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'bool' is unable to be compared with type 'client'. (Compare)\"},{\"range\":{\"start\":{\"line\":7,\"character\":11},\"end\":{\"line\":7,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'client' is unable to be compared with type '__ViewerType'. (Compare)\"},{\"range\":{\"start\":{\"line\":11,\"character\":11},\"end\":{\"line\":11,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'bool' is unable to be compared with type 'bool'. (Compare)\"},{\"range\":{\"start\":{\"line\":12,\"character\":11},\"end\":{\"line\":12,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'bool' is unable to be compared with type 'int'. (Compare)\"},{\"range\":{\"start\":{\"line\":13,\"character\":11},\"end\":{\"line\":13,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'int' is unable to be compared with type 'bool'. (Compare)\"},{\"range\":{\"start\":{\"line\":14,\"character\":11},\"end\":{\"line\":14,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'bool' is unable to be compared with type 'double'. (Compare)\"},{\"range\":{\"start\":{\"line\":15,\"character\":11},\"end\":{\"line\":15,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'double' is unable to be compared with type 'bool'. (Compare)\"},{\"range\":{\"start\":{\"line\":16,\"character\":11},\"end\":{\"line\":16,\"character\":25}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'bool' is unable to be compared with type 'client'. (Compare)\"},{\"range\":{\"start\":{\"line\":17,\"character\":11},\"end\":{\"line\":17,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"The type 'client' is unable to be compared with type '__ViewerType'. (Compare)\"}]\"--JAVA---------------------------------------------");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
  private String cached_WhenCantSubtract_13 = null;
  private String get_WhenCantSubtract_13() {
    if (cached_WhenCantSubtract_13 != null) {
      return cached_WhenCantSubtract_13;
    }
    cached_WhenCantSubtract_13 = generateTestOutput(false, "WhenCantSubtract_13", "./test_code/BinaryExpression_WhenCantSubtract_failure.a");
    return cached_WhenCantSubtract_13;
  }

  @Test
  public void testWhenCantSubtractFailure() {
    assertLiveFail(get_WhenCantSubtract_13());
  }

  @Test
  public void testWhenCantSubtractNotTerribleLineNumbers() {
    assertNotTerribleLineNumbers(get_WhenCantSubtract_13());
  }

  @Test
  public void testWhenCantSubtractExceptionFree() {
    assertExceptionFree(get_WhenCantSubtract_13());
  }

  @Test
  public void testWhenCantSubtractTODOFree() {
    assertTODOFree(get_WhenCantSubtract_13());
  }

  @Test
  public void stable_WhenCantSubtract_13() {
    String live = get_WhenCantSubtract_13();
    StringBuilder gold = new StringBuilder();
    gold.append("Path:BinaryExpression_WhenCantSubtract_failure.a");
    gold.append("\n--ISSUES-------------------------------------------");
    gold.append("\n[{\"range\":{\"start\":{\"line\":11,\"character\":3},\"end\":{\"line\":11,\"character\":11}},\"severity\":1,\"source\":\"error\",\"message\":\"Expression expected to be computed, rather than assigned to (Environment)\"},{\"range\":{\"start\":{\"line\":11,\"character\":3},\"end\":{\"line\":11,\"character\":7}},\"severity\":1,\"source\":\"error\",\"message\":\"Expression expected to be computed, rather than assigned to (Environment)\"},{\"range\":{\"start\":{\"line\":11,\"character\":10},\"end\":{\"line\":11,\"character\":11}},\"severity\":1,\"source\":\"error\",\"message\":\"Expression expected to be computed, rather than assigned to (Environment)\"},{\"range\":{\"start\":{\"line\":11,\"character\":3},\"end\":{\"line\":11,\"character\":11}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'int' are unable to be added with the + operator.\\n\\tThe left hand side has a type of 'bool' which may only be added with a right hand type of 'string'. (ADD01)\"},{\"range\":{\"start\":{\"line\":11,\"character\":17},\"end\":{\"line\":11,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"Could not find a meaning for 'string' / 'int' (OperatorTable)\"},{\"range\":{\"start\":{\"line\":1,\"character\":11},\"end\":{\"line\":1,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'bool' are unable to be subtracted with the - operator. (Subtracted)\"},{\"range\":{\"start\":{\"line\":2,\"character\":11},\"end\":{\"line\":2,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'int' are unable to be subtracted with the - operator. (Subtracted)\"},{\"range\":{\"start\":{\"line\":3,\"character\":11},\"end\":{\"line\":3,\"character\":19}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'int' and 'bool' are unable to be subtracted with the - operator. (Subtracted)\"},{\"range\":{\"start\":{\"line\":4,\"character\":11},\"end\":{\"line\":4,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'double' are unable to be subtracted with the - operator. (Subtracted)\"},{\"range\":{\"start\":{\"line\":5,\"character\":11},\"end\":{\"line\":5,\"character\":21}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'double' and 'bool' are unable to be subtracted with the - operator. (Subtracted)\"},{\"range\":{\"start\":{\"line\":6,\"character\":11},\"end\":{\"line\":6,\"character\":25}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'bool' and 'client' are unable to be subtracted with the - operator. (Subtracted)\"},{\"range\":{\"start\":{\"line\":7,\"character\":11},\"end\":{\"line\":7,\"character\":23}},\"severity\":1,\"source\":\"error\",\"message\":\"The types 'client' and '__ViewerType' are unable to be subtracted with the - operator. (Subtracted)\"}]\"--JAVA---------------------------------------------");
    gold.append("\n");
    gold.append("\nFailedValidation");
    assertStable(live, gold);
  }
}
