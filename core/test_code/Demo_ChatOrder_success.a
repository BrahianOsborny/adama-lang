
@static {
  // anyone can create
  create(who) { return true; }
  invent(who) { return true; }
  maximum_history = 100;
  delete_on_close = false;
}

// let anyone into the document
@connected (who) {
  return true;
}

// the lines of chat
record Line {
  public client who;
  public string what;
  public long when;
}

// the chat table
table<Line> _chat;

// how someone communicates to the document
message Say {
  string what;
}

// the "channel" which enables someone to say something
channel say(client who, Say what) {
  // ingest the line into the chat
  _chat <- {who:who, what:what.what, when: Time.now()};

  (iterate _chat order by when desc offset 5).delete();
}

// emit the data out
view bool ordering;

bubble<who, viewer> chat = viewer.ordering ? (iterate _chat order id desc) : (iterate _chat order id asc);

message Flux {
}

channel flux(client w, Flux f) {
  (iterate _chat where who==w).what += "x";
}
