// This is an internal Adama "program" which Adama's service depends on
@static {
  create {
    return @who.isOverlord();
  }
}

public principal owner;
public string email;

message Cons {
  principal owner;
  string email;
}

@construct (Cons c) {
  owner = c.owner;
  email = c.email;
}

@connected {
  return @who == owner || @who.isOverlord();
}

message NewBill {
  datetime when;
  long cpu_ticks;
  long memory_bytes_p95;
  long storage_bytes;
  long messages;
  long bandwidth_bytes;
  long first_party_service_calls;
  long third_party_service_calls;
  long documents_p95;
  long connections_p95;
}

record Bill {
  public datetime when;
  public long cpu_ticks;
  public long memory_bytes_p95;
  public long storage_bytes;
  public long messages;
  public long bandwidth_bytes;
  public long first_party_service_calls;
  public long third_party_service_calls;
  public long documents_p95;
  public long connections_p95;
}

table<Bill> _bills;

channel record_bill(NewBill bill) open {
  if (@who.isOverlord()) {
    if((iterate _bills where when == bill.when)[0] as old_bill) {
      old_bill <- bill;
    } else {
      _bills <- bill;
    }
  } else {
    abort;
  }
}

message Empty {}

channel initialize_token(Empty m) {
  ViewState.log("Hello World");
}

message BillingInformation {
  string name;
  string address1;
  string address2;
  string city;
  string state;
  string country;
  string postal;
}

channel update_billing_information(BillingInformation bi) {

}