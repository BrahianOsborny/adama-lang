syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.adamalang.grpc.proto";
option java_outer_classname = "AdamaService";

package adama_service;

service Adama {
  /** create a new document */
  rpc Ping(PingRequest) returns (PingResponse) {}

  /** create a new document */
  rpc Create(CreateRequest) returns (CreateResponse) {}

  /** reflect a schema based on a space and key */
  rpc Reflect(ReflectRequest) returns (ReflectResponse) {}

  /** open a bidi connection */
  rpc MultiplexedProtocol(stream StreamMessageClient) returns (stream StreamMessageServer) {}

  /** the service knows how to pull deployments */
  rpc ScanDeployments(ScanDeploymentsRequest) returns (ScanDeploymentsResponse) {}
}

message ScanDeploymentsRequest {
  string space = 1;
}

message ScanDeploymentsResponse {
}

message PingRequest {
}

message PingResponse {
}

message ReflectRequest {
  string space = 1;
  string key = 2;
}

message ReflectResponse {
  string schema = 1;
}

message CreateRequest {
  string space = 1;
  string key = 2;
  string arg = 3;
  optional string entropy = 4;
  string agent = 5;
  string authority = 6;
}

message CreateResponse {
  bool success = 1;
  int32 failure_reason = 2;
}

message StreamConnect {
  string space = 1;
  string key = 2;
  string agent = 3;
  string authority = 4;
}

enum StreamStatusCode {
  Disconnected = 0;
  Connected = 1;
}

message StreamStatus {
  StreamStatusCode code = 1;
}

message StreamSend {
  string channel = 1;
  optional string marker = 2;
  string message = 3;
}

message StreamAskAttachmentRequest {
}

message StreamAskAttachmentResponse {
  bool allowed = 1;
}

message StreamAttach {
  string id = 1;
  string filename = 2;
  string content_type = 3;
  int64 size = 4;
  string md5 = 5;
  string sha384 = 6;
}

message StreamSeqResult {
  int32 seq = 1;
}

message StreamData {
  string delta = 1;
}

message StreamError {
  int32 code = 1;
}

message StreamDisconnect {}

message StreamMessageClient {
  int64 id = 1;
  optional int64 act = 2;
  oneof ByType {
    StreamConnect connect = 3;
    StreamSend send = 4;
    StreamDisconnect disconnect = 5;
    StreamAskAttachmentRequest ask = 6;
    StreamAttach attach = 7;
  }
}

message Establish {
}

message InventoryHeartbeat {
  repeated string spaces = 1;
}

message StreamMessageServer {
  int64 id = 1;
  oneof ByType {
    Establish establish = 2;
    InventoryHeartbeat heartbeat = 3;
    StreamStatus status = 4;
    StreamData data = 5;
    StreamError error = 6;
    StreamAskAttachmentResponse response = 7;
    StreamSeqResult result = 8;
  }
}

