syntax = "proto3";

option java_multiple_files = true;
option java_package = "org.adamalang.grpc.proto";
option java_outer_classname = "AdamaService";

package adama_service;

service Adama {
  /** create a new document */
  rpc Create(CreateRequest) returns (CreateResponse) {}

  /** open a bidi connection */
  rpc MultiplexedProtocol(stream MultiplexedStreamMessageClient) returns (stream MultiplexedStreamMessageServer) {}

  /** deploy a space */
  rpc Deploy(DeployRequest) returns (DeployResponse) {}
}

message DeployRequest {
  string space = 1;
  string plan = 2;
}

message DeployResponse {

}


message CreateRequest {
  string space = 1;
  string key = 2;
  string arg = 3;
  string entropy = 4;
  string agent = 5;
  string authority = 6;
}

message CreateResponse {
  bool success = 1;
  int32 failure_reason = 2;
}

message StreamConnect {
  string space = 1;
  string key = 2;
  string agent = 3;
  string authority = 4;
}

enum StreamStatusCode {
  Disconnected = 0;
  Connected = 1;
}

message StreamStatus {
  StreamStatusCode code = 1;
}

message StreamSend {
  string channel = 1;
  string marker = 2;
  string message = 3;
}

message StreamAskAttachmentRequest {
}

message StreamAskAttachmentResponse {
  bool allowed = 1;
}

message StreamAttach {
  string id = 1;
  string filename = 2;
  string content_type = 3;
  int64 size = 4;
  string md5 = 5;
  string sha384 = 6;
}

message StreamSeqResult {
  int32 seq = 1;
}

message StreamData {
  string delta = 1;
}

message StreamError {
  int32 code = 1;
}

message StreamDisconnect {}

message StreamMessageClient {
  oneof ByType {
    StreamConnect connect = 1;
    StreamSend send = 2;
    StreamDisconnect disconnect = 3;
    StreamAskAttachmentRequest ask = 4;
    StreamAttach attach = 5;
  }
}

message StreamMessageServer {
  oneof ByType {
    StreamStatus status = 1;
    StreamData data = 2;
    StreamError error = 3;
    StreamAskAttachmentResponse response = 4;
    StreamSeqResult result = 5;
  }
}

message MultiplexedStreamMessageClient {
  int64 id = 1;
  int64 act = 2;
  StreamMessageClient payload = 3;
}

message MultiplexedStreamMessageServer {
  int64 id = 1;
  StreamMessageServer payload = 2;
}

