<?xml version="1.0"?>
<api output-path="./saas/src/main/java/org/adamalang/api" test-output-path="./saas/src/test/java/org/adamalang/api" package="org.adamalang.api" docs="./reference/src/reference/api.md" client="./client/src/index.ts">
    <parameter-definition name="identity" type="string" missing-error="458759">
        <documentation>
            Identity is a token to authenticate a user.
        </documentation>
        <transform service="org.adamalang.transforms.PerSessionAuthenticator"
                   output-name="who"
                   output-java-type="org.adamalang.transforms.results.AuthenticatedUser"
                   error-code="444420"/>
    </parameter-definition>

    <parameter-definition name="space" type="string" missing-error="461828" logged="true">
        <documentation>
            A 'space' is a collection of documents with the same schema and logic, and the 'space' parameter is used to
            denote the name of that collection.

            Spaces are case insensitive using the regex a-z[a-z0-9\.]* to validation.
        </documentation>
        <transform service="org.adamalang.transforms.SpacePolicyLocator"
                   output-name="policy"
                   output-java-type="org.adamalang.transforms.results.SpacePolicy"
                   error-code="454658"/>
        <skip-transform on="space/create"/>
        <validate service="org.adamalang.validators.ValidateSpace"/>
    </parameter-definition>

    <parameter-definition name="key" type="string" missing-error="466947" logged="true">
        <documentation>
            Within a space, documents are organized within a map and the 'key' parameter will uniquely identify
            documents.

            Keys are case insensitive using the regex [a-z0-9\.-_]* for validation
        </documentation>
        <validate service="org.adamalang.validators.ValidateKey"/>
    </parameter-definition>

    <parameter-definition name="viewer-state" type="json-object" optional="true">
        <documentation>
            A connection to a document has a side-channel for passing information about the client's view into the evaluation of bubbles.
            This allows for developers to implement real-time queries and pagination.
        </documentation>
    </parameter-definition>

    <parameter-definition name="entropy" type="string" optional="true" logged="true">
        <documentation>
            Each document has a random number generator. When 'entropy' is present, it will seed the random number
            generate such that the randomness is now deterministic at the start.
        </documentation>
    </parameter-definition>

    <parameter-definition name="password" type="string" missing-error="465917" logged="false">
        <documentation>
            The password for your account.
        </documentation>
    </parameter-definition>

    <parameter-definition name="arg" type="json-object" missing-error="461826">
        <documentation>
            The parameter for a document's @construct event.
        </documentation>
    </parameter-definition>

    <parameter-definition name="channel" type="string" missing-error="454659" logged="true">
        <documentation>
            Each document has multiple channels available to send messages too.
        </documentation>
        <validate service="org.adamalang.validators.ValidateChannel"/>
    </parameter-definition>

    <parameter-definition name="message" type="json-object" missing-error="425987">
        <documentation>
            The object sent to a document which will be the parameter for a channel handler.
        </documentation>
    </parameter-definition>

    <parameter-definition name="connection" type="long" missing-error="405505">
        <documentation>
            A unique key to locate a document connection.

            Adama will multiplex multiple documents on the same WebSocket.
        </documentation>
    </parameter-definition>

    <parameter-definition name="code" type="string" missing-error="455681">
        <documentation>
            A randomly (secure) generated code to validate a user via 2FA auth (via email).
        </documentation>
    </parameter-definition>

    <parameter-definition name="revoke" type="boolean" optional="true" logged="true">
        <documentation>
            A flag to indicate wiping out previously granted tokens.
        </documentation>
    </parameter-definition>

    <parameter-definition name="asset-key" type="string" missing-error="475129">
        <documentation>
            A secure session-based key for allowing browsers to access assets without leaking of assets between browsers.
        </documentation>
    </parameter-definition>

    <parameter-definition name="email" type="string" missing-error="473103" logged="true">
        <documentation>
            The email of an Adama developer.
        </documentation>
        <transform service="org.adamalang.transforms.UserIdResolver"
                   output-name="userId"
                   output-java-type="Integer"
                   error-code="460815"/>
        <validate service="org.adamalang.validators.ValidateEmail"/>
    </parameter-definition>

    <parameter-definition name="access-token" type="string" missing-error="407544">
        <documentation>
            A token from a third party authorization service.
        </documentation>
        <validate service="org.adamalang.validators.ValidateToken"/>
    </parameter-definition>

    <parameter-definition name="plan" type="json-object" missing-error="425999">
        <documentation>
            This 'plan' parameter contains multiple Adama scripts all gated on various rules.

            These rules allow for a migration to happen slowly on your schedule.

            Note: this value will validated such that the scripts are valid, compile, and will not have any major regressions
            during role out.
        </documentation>
        <validate service="org.adamalang.validators.ValidatePlan"/>
    </parameter-definition>

    <parameter-definition name="limit" type="int" optional="true" logged="true">
        <documentation>
            Maximum number of items to return during a streaming list.
        </documentation>
    </parameter-definition>

    <parameter-definition name="marker" type="string" optional="true" logged="true">
        <documentation>
            A key to skip ahead a listing.
            When iterating, values will be returned that are after marker.
            To paginate an entire list, pick the last key or name returned and use it as the next marker.
        </documentation>
    </parameter-definition>


    <parameter-definition name="name" type="string" missing-error="453647" logged="true">
        <documentation>
            An identifier to name the resource.
        </documentation>
    </parameter-definition>

    <parameter-definition name="key-store" type="json-object" missing-error="457743">
        <documentation>
            A collection of public keys used to validate an identity within an authority.
        </documentation>
        <validate service="org.adamalang.validators.ValidateKeystore"/>
    </parameter-definition>

    <parameter-definition name="authority" type="string" missing-error="430095" logged="true">
        <documentation>
            An authority is collection of users held together via a key store.
        </documentation>
    </parameter-definition>

    <parameter-definition name="role" type="string" missing-error="456716" logged="true">
        <documentation>
            The role of a user may determine their capabilities to perform actions.
        </documentation>
    </parameter-definition>

    <parameter-definition name="seq" type="integer" missing-error="461836" logged="true">
        <documentation>
            A 'seq' is an index in a log.
        </documentation>
    </parameter-definition>

    <parameter-definition name="filename" type="string" missing-error="470028" logged="true">
        <documentation>
            A filename is a nice description of the asset being uploaded.
        </documentation>
    </parameter-definition>

    <parameter-definition name="chunk-md5" type="string" missing-error="462859">
        <documentation>
            A md5 hash of a chunk being uploaded.
            This provides uploads with end-to-end data-integrity.
        </documentation>
    </parameter-definition>

    <parameter-definition name="content-type" type="string" missing-error="455691" logged="true">
        <documentation>
            The MIME type like text/json or video/mp4.
        </documentation>
    </parameter-definition>

    <parameter-definition name="base64-bytes" type="string" missing-error="409608">
        <documentation>
            Bytes encoded in base64.
        </documentation>
    </parameter-definition>

    <parameter-definition name="upload" type="long" missing-error="409609">
        <documentation>
            The id of the upload in progress.
        </documentation>
    </parameter-definition>

    <field-definition name="success" type="boolean">
        <documentation>
            Indicates if the operation or method was successful.
        </documentation>
    </field-definition>

    <field-definition name="asset-key" type="string">
        <documentation>
            A key used to connect the dots from the connection to assets to a browser.
            This is a session-based encryption scheme to protect assets from leaking outside the browser.
        </documentation>
    </field-definition>

    <field-definition name="delta" type="json-object">
        <documentation>
            A json delta representing a change of data. See the [delta format](/reference/deltas.md) for more information.
        </documentation>
    </field-definition>

    <field-definition name="keystore" type="json-object">
        <documentation>
            A bunch of public keys to validate tokens for an authority.
        </documentation>
    </field-definition>

    <field-definition name="plan" type="json-object">
        <documentation>
            A plan is a predictable mapping of keys to implementations.
            The core reason for having multiple concurrent implementations is to have a smooth and orderly deployment.
            See [deployment plans](/reference/deployment-plan.md) for more information.
        </documentation>
    </field-definition>

    <field-definition name="reflection" type="json-object">
        <documentation>
            Schema of a document.
        </documentation>
    </field-definition>

    <field-definition name="authority" type="string">
        <documentation>
            An authority is collection of third party users authenticated via a public keystore.
        </documentation>
    </field-definition>

    <field-definition name="identity" type="string">
        <documentation>
            A private token used to authenticate to Adama.
        </documentation>
    </field-definition>

    <field-definition name="space" type="string">
        <documentation>
            A space which is a collection of documents with a common Adama schema.
        </documentation>
    </field-definition>

    <field-definition name="balance" type="integer">
        <documentation>
            The balance of a space (in pennies).
        </documentation>
    </field-definition>

    <field-definition name="storage-bytes" type="long">
        <documentation>
            The storage used.
        </documentation>
    </field-definition>

    <field-definition name="bandwidth" type="long">
        <documentation>
            Bytes used to transmit.
        </documentation>
    </field-definition>

    <field-definition name="first-party-service-calls" type="long">
        <documentation>
            Number of services calls made (managed by platform).
        </documentation>
    </field-definition>

    <field-definition name="third-party-service-calls" type="long">
        <documentation>
            Number of services calls made (managed by developers).
        </documentation>
    </field-definition>

    <field-definition name="enabled" type="boolean">
        <documentation>
            Is the item in question enabled.
        </documentation>
    </field-definition>

    <field-definition name="role" type="string">
        <documentation>
            Each developer has a role to a document.
        </documentation>
    </field-definition>

    <field-definition name="key" type="string">
        <documentation>
            The key.
        </documentation>
    </field-definition>

    <field-definition name="created" type="string">
        <documentation>
            When the item was created.
        </documentation>
    </field-definition>

    <field-definition name="updated" type="string">
        <documentation>
            When the item was last updated.
        </documentation>
    </field-definition>

    <field-definition name="seq" type="int">
        <documentation>
            The sequencer for the item.
        </documentation>
    </field-definition>

    <field-definition name="chunk_request_size" type="int">
        <documentation>
            The attachment uploader is asking for a chunk size.
            Using the WebSocket leverages a flow control based uploader such that contention on the WebSocket is minimized.
        </documentation>
    </field-definition>

    <field-definition name="cpu" type="long">
        <documentation>
            Cpu (in Adama ticks) used within the hour.
        </documentation>
    </field-definition>

    <field-definition name="memory" type="long">
        <documentation>
            Memory (in bytes) used within the hour.
        </documentation>
    </field-definition>

    <field-definition name="connections" type="int">
        <documentation>
            p95 connections for the hour.
        </documentation>
    </field-definition>

    <field-definition name="documents" type="int">
        <documentation>
            p95 documents for the hour.
        </documentation>
    </field-definition>

    <field-definition name="messages" type="int">
        <documentation>
            Messages sent within the hour.
        </documentation>
    </field-definition>

    <field-definition name="hour" type="int">
        <documentation>
            The hour of billing.
        </documentation>
    </field-definition>

    <field-definition name="key-id" type="int">
        <documentation>
            Unique id of the private-key used for a secret.
        </documentation>
    </field-definition>

    <field-definition name="public-key" type="string">
        <documentation>
            A public key to decrypt a secret with key arrangement.
        </documentation>
    </field-definition>

    <responder name="asset-key">
        <field name="asset-key"/>
    </responder>

    <responder name="key-listing" stream="true">
        <field name="key"/>
        <field name="created"/>
        <field name="updated"/>
        <field name="seq"/>
    </responder>

    <responder name="key-pair">
        <field name="key-id"/>
        <field name="public-key"/>
    </responder>

    <responder name="space-listing" stream="true">
        <field name="space"/>
        <field name="role"/>
        <field name="created"/>
        <field name="enabled"/>
        <field name="storage-bytes"/>
    </responder>

    <responder name="authority-listing" stream="true">
        <field name="authority"/>
    </responder>

    <responder name="billing-usage" stream="true">
        <field name="hour"/>
        <field name="cpu"/>
        <field name="memory"/>
        <field name="connections"/>
        <field name="documents"/>
        <field name="messages"/>
        <field name="storage-bytes"/>
        <field name="bandwidth"/>
        <field name="first-party-service-calls"/>
        <field name="third-party-service-calls"/>
    </responder>

    <responder name="simple">
    </responder>

    <responder name="seq">
        <field name="seq"/>
    </responder>

    <responder name="plan">
        <field name="plan"/>
    </responder>

    <responder name="keystore">
        <field name="keystore"/>
    </responder>

    <responder name="reflection">
        <field name="reflection"/>
    </responder>

    <responder name="claim-result">
        <field name="authority"/>
    </responder>

    <responder name="data" stream="true">
        <field name="delta"/>
    </responder>

    <responder name="initiation">
        <field name="identity"/>
    </responder>

    <responder name="progress" stream="true">
        <field name="chunk_request_size"/>
    </responder>

    <method name="init/setup-account" responder="simple">
        <parameter name="email"/>
        <documentation>
            This initiates developer machine via email verification.
        </documentation>
    </method>

    <method name="init/convert-google-user" responder="initiation">
        <parameter name="access-token"/>
        <documentation>
            The converts and validates a google token into an Adama token.
        </documentation>
    </method>

    <method name="init/complete-account" responder="initiation">
        <parameter name="email"/>
        <parameter name="revoke"/>
        <parameter name="code"/>
        <documentation>
            This establishes a developer machine via email verification.

            Copy the code from the email into this request.

            The server will generate a key-pair and send the secret to the client to stash within their config, and the
            public key will be stored to validate future requests made by this developer machine.

            A public key will be held onto for 30 days.
        </documentation>
    </method>

    <method name="account/set-password" responder="simple">
        <parameter name="identity"/>
        <parameter name="password"/>
        <documentation>
            Set the password for an Adama developer.
        </documentation>
    </method>

    <method name="account/login" responder="initiation">
        <parameter name="email"/>
        <parameter name="password"/>
        <documentation>
            Sign an Adama developer in with an email and password pair.
        </documentation>
    </method>

    <method name="probe" responder="simple">
        <parameter name="identity"/>
        <documentation>
            This is useful to validate an identity without executing anything.
        </documentation>
    </method>


    <method name="authority/create" responder="claim-result">
        <parameter name="identity"/>
        <documentation>
            Create an authority. See [Authentication](/reference/auth.md) for more details.
        </documentation>
    </method>

    <method name="authority/set" responder="simple">
        <parameter name="identity"/>
        <parameter name="authority"/>
        <parameter name="key-store"/>
        <documentation>
            Set the public keystore for the authority.
        </documentation>
    </method>

    <method name="authority/get" responder="keystore">
        <parameter name="identity"/>
        <parameter name="authority"/>
        <documentation>
            Get the public keystore for the authority.
        </documentation>
    </method>

    <method name="authority/list" responder="authority-listing">
        <parameter name="identity"/>
        <documentation>
            List authorities for the given developer.
        </documentation>
    </method>

    <method name="authority/destroy" responder="simple">
        <parameter name="identity"/>
        <parameter name="authority"/>
        <documentation>
            Destroy an authority.

            This is exceptionally dangerous as it will break authentication for any users that have tokens based on that authority.
        </documentation>
    </method>

    <method name="space/create" responder="simple">
        <parameter name="identity"/>
        <parameter name="space"/>
        <documentation>
            Create a space.
        </documentation>
    </method>

    <method name="space/generate-key" responder="key-pair">
        <parameter name="identity"/>
        <parameter name="space"/>
        <documentation>
            Generate a secret key for a space.

            First party and third party services require secrets such as api tokens or credentials.

            These credentials must be encrypted within the Adama document using a public-private key, and the secret is derived via a key exchange.
            Here, the server will generate a public/private key pair and store the private key securely and give the developer a public key.
            The developer then generates a public/private key, encrypts the token with the private key, throws away the private key, and then embeds the key id, the developer's public key, and the encrypted credential within the adama source code.
        </documentation>
    </method>

    <method name="space/usage" responder="billing-usage">
        <parameter name="identity"/>
        <parameter name="space"/>
        <parameter name="limit"/>
        <documentation>
            Get the most recent space usage in terms of billable hours.
        </documentation>
    </method>

    <method name="space/get" responder="plan">
        <parameter name="identity"/>
        <parameter name="space"/>
        <documentation>
            Get the deployment plan for a space.
        </documentation>
    </method>

    <method name="space/set" responder="simple">
        <parameter name="identity"/>
        <parameter name="space"/>
        <parameter name="plan"/>
        <documentation>
            Set the deployment plan for a space.
        </documentation>
    </method>

    <method name="space/delete" responder="simple">
        <parameter name="identity"/>
        <parameter name="space"/>
        <documentation>
            Delete a space.

            This requires no documents to be within the space, and this removes the space from use until garbage collection ensures no documents were created for that space after deletion.
            A space may be reserved for 90 minutes until the system is absolutely sure no documents will leak.
        </documentation>
    </method>

    <method name="space/set-role" responder="simple">
        <parameter name="identity"/>
        <parameter name="space"/>
        <parameter name="email"/>
        <parameter name="role"/>
        <documentation>
            Set the role of an Adama developer for a particular space.

            Spaces can be shared among Adama developers.
        </documentation>
    </method>

    <method name="space/reflect" responder="reflection">
        <parameter name="identity"/>
        <parameter name="space"/>
        <parameter name="key"/>
        <documentation>
            Get a schema for the space.
        </documentation>
    </method>

    <method name="space/list" responder="space-listing">
        <parameter name="identity"/>
        <parameter name="marker"/>
        <parameter name="limit"/>
        <documentation>
            List the spaces available to the user.
        </documentation>
    </method>

    <method name="document/create" responder="simple">
        <parameter name="identity"/>
        <parameter name="space"/>
        <parameter name="key"/>
        <parameter name="entropy"/>
        <parameter name="arg"/>
        <documentation>
            Create a document.

            The entropy allows the randomization of the document to be fixed at construction time.
        </documentation>
    </method>

    <method name="document/list" responder="key-listing">
        <parameter name="identity"/>
        <parameter name="space"/>
        <parameter name="marker"/>
        <parameter name="limit"/>
        <documentation>
            List documents within a space which are after the given marker.
        </documentation>
    </method>

    <method name="connection/create" responder="data" create="document-stream">
        <parameter name="identity"/>
        <parameter name="space"/>
        <parameter name="key"/>
        <parameter name="viewer-state"/>
        <documentation>
            Create a connection to a document.
        </documentation>
    </method>

    <method name="connection/send" responder="seq" handler="document-stream" find-by="connection" error-find-by="457745">
        <parameter name="connection"/>
        <parameter name="channel"/>
        <parameter name="message"/>
        <documentation>
            Send a message to the document on the given channel.
        </documentation>
    </method>

    <method name="connection/update" responder="simple" handler="document-stream" find-by="connection" error-find-by="438302">
        <parameter name="connection"/>
        <parameter name="viewer-state"/>
        <documentation>
            Update the viewer state of the document.

            The viewer state is accessible to bubbles to provide view restriction and filtering.
            For example, the viewer state is how a document can provide real-time search or pagination.
        </documentation>
    </method>

    <method name="connection/end" responder="simple" handler="document-stream" find-by="connection"
            error-find-by="474128" destroy="true">
        <parameter name="connection"/>
        <documentation>
            Disconnect from the document document.
        </documentation>
    </method>

    <method name="configure/make-or-get-asset-key" responder="asset-key">
        <documentation>
            Here, we ask if the connection if it has an asset key already.
            If not, then it will generate one and send it along.
            Otherwise, it will return the key bound to the connection.

            This is allows anyone to have access to assets which are not exposed directly via a web handler should they see the asset within their document view.
        </documentation>
    </method>

    <method name="attachment/start" responder="progress" create="attachment-upload">
        <parameter name="identity"/>
        <parameter name="space"/>
        <parameter name="key"/>
        <parameter name="filename"/>
        <parameter name="content-type"/>
        <documentation>
            Start an upload for the given document with the given filename and content type.
        </documentation>
    </method>

    <method name="attachment/append" responder="simple" handler="attachment-upload" find-by="upload" error-find-by="477201">
        <parameter name="upload"/>
        <parameter name="chunk-md5"/>
        <parameter name="base64-bytes"/>
        <documentation>
            Append a chunk with an MD5 to ensure data integrity.
        </documentation>
    </method>

    <method name="attachment/finish" responder="simple" handler="attachment-upload" find-by="upload" error-find-by="478227" destroy="true">
        <parameter name="upload"/>
        <documentation>
            Finishing uploading the attachment upload.
        </documentation>
    </method>

    <!--

405532
447516
444445
445477
466979
458787
408610
414755
446499
458784
488495
461871
472109
453676
445484
494636
454699
474167
446519
474164
482355
449586
489523
497715
491570
437299
492594
454704
492593
479280
453681
488496
445503
480316
472124
458810
427067
402488
409668
455747
425025
429135
407628
405580
490573
401484
457805
458826
471124
490579
471123
445520
471133
408690
441456
477311
497790
409727
474238
438396
443516
469116
445563
474233
454791
454788
456835
457859
458881
416896
487552
471183
404621
466060
471180
483468
456842
457867
454795
441500
471196
445602
475315
457906
457907
494770
426161
449727
405692
453820
457917
408765
470204
442552
475335
442567
490692
465092
438466
404674
478403
487619
437442
459971
447683
424131
409792
413888
459968
458959
490703
454860
448716
462028
487627
443595
489672
474312
458961
405727
472285
406748
457947
405720
473316
487651
400608
442592
472303
408815
450799
462062
458988
488684
474347
409845
467187
461042
494834
437491
438512
454896
449776
487665
449791
446719
447743
412924
409852
470268
475388
425213
445693
463100
462075
408825
463096
493827
454915
446723
443648
454912
474383
456975
454940
455964
462116
425251
442670
474415
445739
471351
408884
426289
491839
450879
475452
458051
417110
449888
443756
445840
412064
469427
499123
458172
405956
426436
460227
474562
438723
410051
458176
474560
458177
409036
430540
451020
491981
409037
441808
454119
455151
462316
460275
406003
458227
444913
473599
459263
409087
470523
406020
406018
463363
459264
475663
401935
458255
474636
496140
458256
475676
429600
459296
409135
471596
474679
408116
446003
491056
401980
446012
489020
459324
454203
462393
444995
442994
455311
455336
458419
443068
446148
443076
426692
492227
408259
456387
474818
459457
453312
458432
444096
466624
467648
460495
495310
409292
471755
445136
446173
446168
474871
443127
445175
428787
413424
446192
427760
471792
472816
492293
439042
447234
454402
451331
445187
474882
429827
492290
408323
410368
401152
457751
453655
446208
443136
450304
462592
493312
426767
447247
408335
478990
454412
447244
407308
446218
475915
424723
458512
429840
462608
461599
462623
455454
471836
495399
450340
413472
429856
467744
471840
409390
458540
457515
456502
473907
406323
450355
488242
401203
407347
472881
488240
475967
449343
443199
429887
488254
450364
447292
443197
462652
460603
450363
458555
495416
442169
457529
467768
462648
446276
466754
455491
461632
495439
474959
474958
426831
402255
410444
425804
444240
495441
473951
459620
471927
446326
487283
467827
459633
456560
466815
450431
443263
434044
458620
462716
459643
455547
451448
406402
459649
455552
493455
475023
450444
475020
468874
410507
456607
450463
459677
446364
459676
443299
452524
446380
461740
466860
495539
451507
428979
444336
443312
492464
496560
447423
425916
430013
471995
458682
448455
446407
462790
443332
455618
475075
447427
462786
439235
444355
488385
439233
480207
472015
456655
434127
462797
439243
407496
463816
457687
446419
457680
471007
494559
479196
461788
459736
448480
462831
460783
405484
492535
463863
494583
455668
454644
493556
453621
460787
492531
406514
466931
462832
458737
445438
451582
439295
439292
428028
402428
488444
471036
476156
406525
445437
477179
442363
410619
-->

</api>