/*
 * This file is subject to the terms and conditions outlined in the file 'LICENSE' (hint: it's MIT); this file is located in the root directory near the README.md which you should also read.
 *
 * This file is part of the 'Adama' project which is a programming language and document store for board games; however, it can be so much more.
 *
 * See https://www.adama-platform.com/ for more information.
 *
 * (c) 2020 - 2022 by Jeffrey M. Barber ( http://jeffrey.io )
 */
package org.adamalang.web.service;

import java.util.Base64;

public class JavaScriptRxHtml {
  public static final byte[] RXHTML_JS_BYTES = Base64.getDecoder().decode("function AdamaTreeSimple() {
  var id = 0;

  var root = {};
  var all_subscriptions = {};

  var clone_object = function(obj) {
    if (Array.isArray(obj)) {
      var next = [];
      for (var k = 0; k < obj.length; k++) {
        next.push(clone_object(obj[k]));
      }
      return next;
    } else if (typeof(obj) == 'object') {
      var next = {};
      for (key in obj) {
        if (key[0] == '#' || key == "__key" || key == "@o") continue;
        next[key] = clone_object(obj[key]);
      }
      return next;
    } else {
      return obj;
    }
  };

  this.nuke = function() {
    this.all_subscriptions = {};    
  }

  this.copy = function() {
    return clone_object(root);
  }

  this.str = function() {
    return JSON.stringify(root);
  };

  // filter the subscriptions to the ones that have the key
  var sub = function(s, key) {
    // if we have nothing, then we return nothing
    if (s.length == 0) {
      return s;
    }
    // make a new array
    var n = [];
    for (var k = 0; k < s.length; k++) { // such that every element
      if (key in s[k]) { // which contains the key
        n.push(s[k][key]); // is added to the new array
      }
    }
    return n;
  };

  // fire events at the current subscription
  var fire = function(s, value) {
    // for each subscription
    for (var j = 0; j < s.length; j++) {
      var v = s[j];
      // if it has events
      if ('@e' in v) {
        // fire each event
        var evts = v['@e'];
        for (var k = 0; k < evts.length; k++) {
          evts[k](value);
        }
      }
    }
  };
  
  var weave = function(s, callback, key) {
    if (Array.isArray(callback)) {
      for (var k = 0; k < callback.length; k++) {
        weave(s, callback[k], key);
      }
    } else if (typeof (callback) == 'function') {
      if (!(key in s)) {
        s[key] = {};
      }
      var sk = s[key];
      if (!('@e' in sk)) {
        sk['@e'] = [callback];
      } else {
        sk['@e'].push(callback);
      }
    } else if (typeof(callback) == 'object') {
      if (!(key in s)) {
        s[key] = {};
      }
      var sk = s[key];
      for (var ck in callback) {
        if (ck == '@e') {
          weave(s, callback[ck], key);
        } else {
          weave(sk, callback[ck], ck);
        }
      }
    }
  };

  // we have detected an addition
  var fire_add = function(s, key) {
    for (var j = 0; j < s.length; j++) { // for each subscription
      var v = s[j];
      if ('+' in v) { // if the subscription has the ability to add new objects
        var va = v['+'];
        if ('@e' in va) { // if are events associated to '+'
          var eva = va['@e'];
          for (var k = 0; k < eva.length; k++) { // for each '+' ability
            weave(v, eva[k](key), key);
          }
        }
      }
    }
  }

  // fire a delete message for the given key
  var fire_del = function(s, key) {
    for (var j = 0; j < s.length; j++) { // for each subscription
      var v = s[j];
      if ('-' in v) { // if the subscription has the ability to delete prior keys
        var va = v['-'];
        if ('@e' in va) { // if are events associated to '-'
          var eva = va['@e'];
          for (var k = 0; k < eva.length; k++) { // for each '-' ability
            eva[k](key); // evaluate the '-'
          }
        }
      }
    }
  }

  // a delete of a tree has been detected, let's 
  var del = function(s) {
    // if the subscriptions is an array, then delete all children
    if (Array.isArray(s)) {
      var n = s.length;
      for (var k = 0; k < n; k++) {
        del(s[k]);
      }
    } else if (typeof(s) == 'object') { // otherwise, iterate over the keys
      for (var key in s) {
        var ch = s[key];
        if (key == '@e') { // we have events, so let's send those events...
          for (var j = 0; j < ch.length; j++) {
            ch[j](null); // a null to indicate deletion
          }
        } else { // recurse into the child field
          del(ch);
        }
      }
    }
  };

  // delete the given key within the subscription
  var del_key = function(s, key) {
    if (Array.isArray(s)) { // if we have an array of subscriptions, then simply repeat
      var n = s.length;
      for (var k = 0; k < n; k++) {
        del_key(s[k], key); // for each element
      }
    } else if (typeof(s) == 'object') { // otherwise, we have a subcription callback
      if (key in s) { // if the key is in the subscription callback
        delete s[key]; // delete it
      }
    }
  };

  // merge the given delta into the tree and fire subscriptions (s)
  var merge = function(tree, delta, s) {
    for (var key in delta) { // for each bit of data within the tree
      var eKey = '#' + key; // compute the secret data path
      var prior = tree[key]; // find the prior state within the tree
      var next = delta[key]; // bring the change present for the current key
      if (next == null) { // the item is going poof
        // the prior value is an array, so we may have some special things associate with it
        if (Array.isArray(prior)) { // UNTEST
          if (eKey in tree) {
            del(sub(s, eKey));
          }
          delete tree[eKey];
        }
        del(sub(s, key)); // issue a delete for all the subscriptions for the kid
        delete tree[key]; // delete the data in the tree
      } else {
        if (typeof(next) == 'object' && !Array.isArray(next)) { // if the delta is an object
          var arr = Array.isArray(prior) || '@o' in next || '@s' in next; // detect if we need to use array logic
          if (arr) { // we have detected an array
            if (!(key in tree)) { // let's make sure the tree has an empty array
              tree[key] = [];
            }
            if (!(eKey in tree)) { // let's make sure the secret data exists as well
              tree[eKey] = {};
              if ('@o' in next) { // if we have a bunch of keys, then let's make sure to preserve that for make_delta
                tree[eKey]['@o'] = true;
              }
              tree[eKey].__key = key; // annotate the new item with the given key
            }
            var eBase = tree[eKey]; // get the secret (and real) data for the object in question
            var eSub = sub(s, key); // scope the subscription to the key
            var ordering = null; // detection of if we have @o ordering to reorder the values
            var resize = null; // detection of an array without __key
            var delay = {}; // we delay all events such that the array can be built for inline make_delta calls to work
            for (var aKey in next) { // for each field within the difference
              var val = next[aKey];
              if (aKey == '@o') { // the value is a new ordering of the array
                ordering = val;
              } else if (aKey == '@s') { // the value is a resize of the array
                resize = val;
              } else if (val == null) { // delete the element
                if (aKey in eBase) { // if it exists within the secret key
                  delay[aKey] = function(x) {
                    del(sub(eSub, x)); // issue deletes
                    delete eBase[x]; // delete the value
                    del_key(eSub, x); // delete the keys from the object
                    fire_del(eSub, x);
                  };
                }
              } else { // we have data
                if (!(aKey in eBase)) { // the data didn't exist, so fire an addition to extend the subscriptions
                  fire_add(eSub, aKey);
                }
                var nVal = next[aKey]; // get the new value
                if (typeof(nVal) == 'object') { // if the new value is an object
                  if (!(aKey in eBase)) { // then make sure the new item is within the secret tree
                    eBase[aKey] = {};
                    eBase[aKey].__key = aKey;
                  }
                  delay[aKey] = function(x) {
                    merge(eBase[x], next[x], sub(eSub, x)); // recurse: merge the difference into the secret tree and publish to all element subscriptions
                    fire(sub(eSub, x), eBase[x]);
                  };
                } else { // otherwise, set the value into the tree
                  eBase[aKey] = nVal;
                  delay[aKey] = function(x) {
                    fire(sub(eSub, x), eBase[x]);
                  };
                }
                // and tell everyone the new value for this 
              }
            }
            var before = tree[key]; // stash a pointer to the array
            var delayOrder = [];

            if (ordering != null) { // an ordering change is happening
              var after = []; // we will rebuild the array here
              var msg = []; // and record the keys here
              for (var k = 0; k < ordering.length; k++) { // for each ordering instruction
                var instr = ordering[k];
                var type_instr = typeof (instr);
                if (type_instr == "string" || type_instr == "number") { // if the instruction refers to an item
                  after.push(eBase[instr]); // push the item into the new array
                  msg.push("" + instr); // record the key of the item
                } else { // otherwise, the instruction is a range
                  var start = instr[0];
                  var end = instr[1];
                  for (var j = start; j <= end; j++) { // iterate over the range and copy
                    after.push(before[j]); // the items from the previous copy
                    msg.push(before[j].__key); // and annotate the keys
                  }
                }
              }
              delayOrder.push(function() {
                fire(sub(eSub, "~"), msg); // tell subscriptions about the new ordering
              });
              tree[key] = after;
            } else  if (resize != null) { // alternatively, an array without keys is being resized
              var after = [];
              var msg = [];
              for (var k = 0; k < resize; k++) { // we rebuild the array
                after[k] = before[k];
                msg.push('' + k);
              }
              delayOrder.push(function() {
                fire(sub(eSub, "~"), msg); // tell subscriptions about the new ordering
              });
              tree[key] = after;
            }
            for (aKey in delay) {
              delay[aKey](aKey);
            }
            for (var k = 0; k < delayOrder; k++) {
              delayOrder[k]();
            }
            fire(eSub, tree[key]); // tell everyone about the new value
          } else {
            if (!(key in tree) || typeof(tree[key]) != 'object') {
              tree[key] = {};
            }
            var e = sub(s, key);
            merge(tree[key], next, e);
            fire(e, tree[key]);
          }
        } else { // not an object, so it is a value
          tree[key] = next; // stash the new value
          fire(sub(s, key), next); // and tell everyone about it
        }        
      }
    }
    fire(s, tree);
  };

  this.update = function(delta) {
    var flat = []; // flatten the subcriptions objects
    for (var k in all_subscriptions) {
      flat.push(all_subscriptions[k]);
    }
    merge(root, delta, flat); // execute the merge and fire events
  };

  // fix the callback structure from the user's happy land to the rigor of the format needed
  var transform_callback_into_sub = function(callback, sub) {
    if (Array.isArray(callback)) { // if the callback is an array, then flatten the array into the new object
      for (var k = 0; k < callback.length; k++) {
        transform_callback_into_sub(callback[k], sub);
      }
    } else if (typeof(callback) ==  'object') { // oh, the callback is an object
      for (var key in callback) { // iterate over each key
        if (key == '@e') { // force the functions to merge together
          transform_callback_into_sub(callback[key], sub);
        } else { // normal flow
          if (!(key in sub)) { // dive into the object and make sure the subscription has the field
            sub[key] = {};
          }
          transform_callback_into_sub(callback[key], sub[key]); // recurse and pair the events to the new subscription
        }
      }
    } else if (typeof(callback) ==  'function') { // it's a function
      if (!('@e' in sub)) { // let's ensure there is an event list
        sub['@e'] = [callback];
      } else { // otherwise, just add it
        sub['@e'].push(callback);
      }
    }
  }

  // convert the tree to a delta; this tree is assumed to have been merged already
  var make_delta = function(st) {
    var delta = {}; // the delta to construct
    for (var k in st) { // for each key within the object
      if (k[0] == '#' || k == "@o" || k == "__key") continue; // skip these
      var v = st[k];
      if (('#' + k) in st) { // the result is an array
        var d = {};
        if ('@o' in st['#' + k]) { // and we have a specific ordering to memoize
          var o = [];
          for (var j = 0; j < v.length; j++) { // copy the elements from the array
            var vj = v[j];
            d[vj.__key] = make_delta(vj); // using the __key embedded in the object
            o.push(v[j].__key);
          }
          d['@o'] = o;
        } else { // otherwise; record the size as we recurse
          for (var j = 0; j < v.length; j++) {
            d['' + j] = make_delta(v[j]);
          }
          d['@s'] = v.length;
        }
        delta[k] = d;
      } else if (typeof(v) == 'object') { // it's just an object, so recurse directly
        delta[k] = make_delta(v);
      } else { // finally, it is a value so just set it
        delta[k] = v;
      }
    }
    return delta;
  };

  // `subscribe` the given structural callback
  this.subscribe = function(callback) {
    var sub = {};
    transform_callback_into_sub(callback, sub);  // transform the callback into a safe callback
    var delta = make_delta(root);
    merge({}, delta, [sub]); // execute the callback now on a callback of all data to fire events and fill the subscription object
    var S = "" + id++; // create an id for the subscription
    all_subscriptions[S] = sub; // record the subscription
    return function() { // return a method to unsubscribe
      delete all_subscriptions[S];
    };
  };
}

var RxHTML = (function () {
  var self = {};

  var templates = {};
  var router = {};
  var connection = new Adama.Connection(Adama.Production);
  var connections = {};

  connection.start();

  console.log(window.location.hostname);
  console.log(window.location.pathname);

  var rootReplace = "/";
  var fixPath = function(path) { return path; };
  if (window.location.hostname.endsWith(".adama-platform.com")) {
    var parts = window.location.pathname.split("/");
    rootReplace = [parts[0], parts[1], parts[2], ""].join("/");
    var offset = parts[0].length + parts[1].length + parts[2].length + 2;
    fixPath = function(path) { return path.substring(offset); }
  }

  var fixHref = function(href) {
    if (href.startsWith('/')) {
      return rootReplace + href.substring(1);
    }
    return href;
  }


  var get_connection_obj = function(name) {
    if (name in connections) {
      return connections[name];
    } else {
      var obj = {
        name: name,
        ptr: null,
        tree: new AdamaTreeSimple(),
        outstanding: {},
        decisions: {},
        id:0
      };
      obj.subscribe = function(channel, callback) {
        var s = channel + "|" + this.id++;
        this.decisions[s] = callback;
        return function() {
          delete this.decisions[s];
        }.bind(this);
      }.bind(obj);
      obj.ondecide = function(outstanding) {
        for (var ch in obj.outstanding) {
          obj.outstanding[ch] = {options:[]};
        }
        var n = outstanding.length;
        for (var k = 0; k < n; k++) {
          var o = outstanding[k];
          obj.outstanding[o.channel] = o;
        }
        for (var ch in obj.outstanding) {
          for (var sub in obj.decisions) {
            if (sub.startsWith(ch + "|")) {
              obj.decisions[sub]();
            }
          }
        }
      };
      connections[name] = obj;
      return obj;
    }
  };

  self.make = function() {
    return new AdamaTreeSimple();
  };

  // HELPER | subscribe the given 'sub' to changes within state for the given field named name
  var subscribe = function(state, name, sub) {
    var ss = self.pI(state, name);
    var s = ss[ss.current];
    if ('@e' in s.delta) {
      s.delta['@e'].push(sub);
    } else {
      s.delta['@e'] = [sub];
    }
  };

  // HELPER | create fresh state
  var fresh = function(where) {
    return {
      tree:new AdamaTreeSimple(),
      delta:{},
      parent:null,
      path:null,
      where:where
    };
  };

  // HELPER | create a new delta copy from the given specific state (i.e. either data or view)
  var new_delta_copy = function(ss) {
    if (ss == null) {
      return null;
    }
    var parent = null;
    if (ss.parent != null) {
      parent = new_delta_copy(ss.parent);
    }
    var new_delta = {};
    if (parent != null) {
      parent.delta[ss.path] = new_delta;
    }
    return {tree:ss.tree, parent:parent, delta:new_delta, path:ss.path};
  };

  // HELPER | construct a path to
  var path_to = function(ss, obj) {
    if (ss.parent != null) {
      var parent = path_to(ss.parent, {});
      parent[ss.path] = obj;
      return parent;
    } else {
      return obj;
    }
  };

  // HELPER | get the root of the specific state (i.e. either the data's root or the view's root)
  var root_of = function(ss) {
    var x = ss;
    while (x.parent != null) {
      x = x.parent;
    }
    return x;
  }

  // HELPER | remove all the children from the given DOM node
  var nuke = function(parent) {
    var last = parent.lastChild; 
    while (last) {
      parent.removeChild(last);
      last = parent.lastChild;
    }
  };

  // HELPER: debounce the given functional when rapid function spread is expected
  var debounce = function(ms, foo) {
    var status = {inflight:false, timeout:null};
    status.inflight = false;
    return function() {
      if (!status.inflight) {
        status.inflight = true;
        status.timeout = window.setTimeout(function() {
          status.inflight = false;
          status.timeout = null;
          foo();
        }, ms /* ms */); // debounce the parameters
      }
    };
  };

  // HELPER | prepare a free unsubscribe object
  var make_unsub = function() {
    return {__data: function() {}, __view: function() {}};
  };

  // HELPER | augment an existing object with unsubscribe data
  var add_unsub = function(obj) {
    obj.__data = function() {};
    obj.__view = function() {};
  }

  // HELPER | fire the unsubscribe calls within an object
  var fire_unsub = function(unsub) {
    unsub.__data();
    unsub.__view();
  }

  // HELPER | subscribe to state and populate unsubscribe object
  var subscribe_state = function(state, unsub) {
    if (state.data != null) {
      unsub.__data = state.data.tree.subscribe(root_of(state.data).delta);
    } else {
      unsub.__data = function() {};
    }
    if (state.view != null) {
      unsub.__view = state.view.tree.subscribe(root_of(state.view).delta); 
    } else {
      unsub.__view = function() {};
    }
  };

  var subscribe_view = function(state, unsub) {
    if (state.view != null) {
      unsub.__view = state.view.tree.subscribe(root_of(state.view).delta); 
    } else {
      unsub.__view = function() {};
    }
  };

  // RUNTIME | Switch to the view object
  self.pV = function(state) {
    return {service:state.service, data:state.data, view:state.view, current:'view'};
  };

  // RUNTIME | Switch to the data object
  self.pD = function(state) {
    return {service: state.service, data:state.data, view:state.view, current:'data'};
  };

  // RUNTIME | Switch to the root object / (Root)
  self.pR = function(state) {
    var next = {service: state.service, data:state.data, view:state.view, current:state.current};
    var prior = next[state.current];
    while (prior.parent != null) {
      if (prior.parent == null) {
        next[state.current]
        return prior;
      }
      prior = prior.parent;
    }
    next[state.current] = prior;
    return next;
  };

  // RUNTIME | ../ (Up)
  self.pU = function(state) {
    var next = {service: state.service, data:state.data, view:state.view, current:state.current};
    var prior = next[state.current];
    if (prior.parent != null) {
      next[state.current] = prior;
    }
    return next;
  };

  // RUNTIME | dive one level Into path1/path2/..../pathN
  self.pI = function(state, name) {
    var prior = state[state.current];
    if (!(name in prior.delta)) {
      prior.delta[name] = {};
    }
    var next = {service: state.service, data:state.data, view:state.view, current:state.current};
    next[state.current] = {
      tree:prior.tree,
      delta:prior.delta[name],
      parent:prior,
      path:name,
    };
    if (next.current == "data") {
      next.data.connection = prior.connection;
    }
    return next;
  };

  // RUNTIME | extend the given state with the view having a seperate child
  self.pEV = function(state, name) {
    if (!(name in state.view.delta)) {
      state.view.delta[name] = {};
    }
    return {
      service: state.service,
      data: state.data,
      view: {
        tree:state.view.tree,
        delta:state.view.delta[name],
        parent:state.view,
        path:name,
      },
      current:state.current
    };
  };

  var fork = function(priorState) {
    var state = {
      service: priorState.service,
      data: new_delta_copy(priorState.data),
      view: new_delta_copy(priorState.view),
      current:priorState.current
    };
    if (state.data != null) {
      state.data.connection = priorState.data.connection;
    }
    return state;
  }

  // RUNTIME | subscribe between the state and the object.
  // When the member field within state of name changes, copy that value into the obj and run recompute()
  self.Y = function(state, obj, name, recompute) {
    var sub = function(value) {
      obj[name] = value;
      recompute();
    };
    subscribe(state, name, sub);
  };

  // RUNTIME | Just subscribee value to the object field of name (no-recompute)
  self.YS = function(state, obj, name) {
    var sub = function(value) {
      obj[name] = value;
    };
    subscribe(state, name, sub);
  };

  // RUNTIME | "Text"
  self.T = function(tx) {
    return document.createTextNode(tx);
  };

  // RUNTIME | <lookup path=...>
  self.L = function(state, name) {
    var dom = document.createTextNode("");
    var sub = function(value) { dom.nodeValue = value; };
    subscribe(state, name, sub);
    return dom;
  };

  // RUNTIME | <lookup path=... transform="$transform" />
  self.LT = function(state, name, transform) {
    var dom = document.createTextNode("");
    var sub = function(value) { dom.nodeValue = transform(value); };
    subscribe(state, name, sub);
    return dom;
  };

  // RUNTIME | <tag>
  self.E = function(tag, ns) {
    if (ns == undefined || ns == null) {
      return document.createElement(tag);
    } else {
      var result = document.createElementNS(ns, tag);
      result.setAttribute('xmlns', ns);
      return result;
    }
  };

  // RUNTIME | <pick name=...>
  self.P = function(parent, priorState, rxObj, childMaker) {
    var unsub = make_unsub();
    rxObj.__ = function() {
      if (this.name == rxObj.name) { return; }
      fire_unsub(unsub);
      this.name = rxObj.name;
      var co = get_connection_obj(rxObj.name);
      nuke(parent);
      var state = {
        service: priorState.service,
        data: {connection: co, tree:co.tree, delta:{}, parent:null, path:null},
        view: new_delta_copy(priorState.view),
        current:'data'
      };
      childMaker(state);
      subscribe_state(state, unsub);
    }.bind({name:""});
  };

  // RUNTIME | <template name="...">
  self.TP = function(name, foo) {
    templates[name] = foo;
  };

  // RUNTIME | <... href="" ...>
  self.HREF = function(dom, href) {
    dom.setAttribute('href', fixHref(href));
    dom.onclick = function(evt) {
      var parts = (href.startsWith("/") ? href.substring(1) : href).split("/");
      if (route(parts, 0, router, {})) {
        evt.preventDefault();
        self.run(document.body, href, true);
        return false;
      }
      return true;
    };
  };
  // RUNTIME | <... class="" ...>
  self.ACLASS = function(dom, value) {
    dom.setAttribute('class', value);
  };
  // RUNTIME | <... src="" ...>
  self.ASRC = function(dom, value) {
    dom.setAttribute('src', value);
  };

  // RUNTIME | <tag rx:template=$name>
  self.UT = function(parent, state, name, child_maker) {
    var foo = templates[name];
    foo(parent, state, child_maker);
  };

  // RUNTIME | <tag rx:switch=path ..>
  self.SW = function(parent, priorState, name, childrenMaker) {
    var swst = {prior:null};
    add_unsub(swst);
    var sub = function(value) {
      if (value == this.prior) {
        return;
      }
      this.prior = value;
      fire_unsub(this);
      nuke(parent);
      var state = fork(priorState);
      childrenMaker(parent, state, '' + value);
      subscribe_state(state, this);

    }.bind(swst);
    subscribe(priorState, name, sub);
  };

  // RUNTIME | <tag rx:iterate=path ...>
  self.IT = function(parentDom, state, name, expandView, maker) {
    var it_state = self.pI(state, name);
    var domByKey = {};
    var viewUnSubByKey = {};

    var sub = {
      '+': function(key) {
        // TODO: view propagates don't work here
        var new_state = self.pI(it_state, key);
        if (expandView) {
          new_state = self.pEV(it_state, key);
        }
        new_state = {
          service: new_state.service,
          data: new_state.data,
          view: new_delta_copy(new_state.view),
          current:new_state.current
        };
        
        var unsub = make_unsub();
        var dom = maker(new_state);
        domByKey[key] = dom;
        viewUnSubByKey[key] = unsub;
        parentDom.append(dom);
        subscribe_view(new_state, unsub);
        return new_state[new_state.current].delta;
      },
      '-': function(key) {
        if (key in domByKey) {
          parentDom.removeChild(domByKey[key]);
          delete domByKey[key];
        }
        if (key in viewUnSubByKey) {
          fire_unsub(viewUnSubByKey[key]);
          delete viewUnSubByKey[key];
        }
      },
      '~': function(ord) {
        nuke(parentDom);
        for (var k = 0; k < ord.length; k++) {
          parentDom.append(domByKey[ord[k]]);
        }
      }
    };
    subscribe(state, name, sub);
  };

  var find = function(state, channel, key, value) {
    if (channel in state['data'].connection.outstanding) {
      var arr = state['data'].connection.outstanding[channel].options;
      for (var k = 0; k < arr.length; k++) {
        var s = arr[k];
        if (key in s && s[key] == value) {
          return s;
        } 
      }
      return null;
    } else {
      return null;
    }
  };

  var customs = {};

  self.PRCUAC = function(name, foo) {
    customs[name] = foo;
  };

  self.exCC = function(dom, type, state, customCommandName) {
    dom.addEventListener(type, function() {
      if (customCommandName in customs) {
        customs[customCommandName]();
      }
    });
  };

  self.aCC = function(form, state, customCommandName, statusVar) {
    var signal = make_failure_signal(state, statusVar);
    form.onsubmit = function(evt) {
      if (customCommandName in customs) {
        evt.preventDefault();
        var obj = get_form(form);
        customs[customCommandName](obj, state, signal, self);
      }
    };
  };

  self.exD = function(dom, type, state, name, channel, key) {
    var decide = { value: null };
    dom.addEventListener(type, function() {
      var result = find(state, channel, key, decide.value);
      if (result != null) {
        let start = performance.now();
        state.data.connection.ptr.send(channel, result, {
          failure: function(reason) {

          },
          success: function(payload) {
            console.log("Success|" + payload.seq + ";latency=" + (performance.now() - start));
          }
        });
      }      
    });
    subscribe(state, name, function(value) { decide.value = value; });
  };

  // RUNTIME: <tag .. rx:event="... set:name=value ...">
  self.onS = function(dom, type, state, name, value) {
    var runnable = function() {
      var obj = {};
      if (typeof(value) == 'function') {
        obj[name] = value();
      } else {
        obj[name] = value;
      }
      var delta = path_to(state, obj);
      state[state.current].tree.update(delta);
    };
    if (type == 'load') {
      window.setTimeout(runnable, 1);
    } else {
      dom.addEventListener(type, runnable);
    }
  };

  // RUNTIME: <tag .. rx:event="... toggle:name ...">
  self.onT = function(dom, type, state, name) {
    var captured = {value: false};
    dom.addEventListener(type, function() {
      var obj = {};
      obj[name] = !captured.value;
      var delta = path_to(state, obj);
      state[state.current].tree.update(delta);
    });
    subscribe(state, name, function(value) {
      captured.value = value == true;
    });
  };

  // RUNTIME: <tag .. rx:event="... delta:name=diff" ...">
  self.onD = function(dom, type, state, name, diff) {
    var captured = {value: 0};
    dom.addEventListener(type, function() {
      var obj = {};
      obj[name] = captured.value + diff;
      var delta = path_to(state, obj);
      state[state.current].tree.update(delta);
    });
    subscribe(state, name, function(value) {
      if (typeof(value) == "number") {
        captured.value = value;
      } else {
        var val = parseFloat(value);
        if (!isNaN(val)) {
          captured.value = val;
        }
      }
    });
  };

  self.DE = function(parent, priorState, evalState, channel, key, name, shouldBe, _expand, makerTrue, makerFalse) {
    var decide = {
      value: '',
      owner: parent,
      shown: false,
      eval: null,
    };
    add_unsub(decide);
    var change = function(show) {
      fire_unsub(decide);
      nuke(parent);
      var state = fork(priorState);
      if (show === shouldBe) {
        makerTrue(parent, state);
      } else {
        makerFalse(parent, state);
      }
      subscribe_state(state, decide);
    };

    decide.update = function() {
      var eval = find(priorState, channel, key, decide.value) != null;
      if (decide.eval != eval) {
        decide.eval = eval;
        change(decide.eval);
      }
    };

    priorState.data.connection.subscribe(channel, function() {
      decide.update();
    });

    subscribe(evalState, name, function(value) {
      decide.value = value;
      decide.update();
    });
  };

  self.IF = function(parent, priorState, name, shouldBe, expandView, makerTrue, makerFalse) {
    var unsub = make_unsub();
    var set = function(value) {
      var show = (value ? true : false) === shouldBe;
      if (this.shown == show) {
        return;
      }
      this.shown = show;
      nuke(parent);
      fire_unsub(unsub);
      var state = fork(priorState);
      var next = state;
      if (typeof(value) == 'object') {
        next = self.pI(next, name);
        if (expandView) {
          next = self.pEV(next, name);
        }
      }
      if (show) {
        makerTrue(parent, next);
      } else {
        makerFalse(parent, next);
      }
      subscribe_state(state, unsub);
    }.bind({shown:shouldBe});
    set(!shouldBe);
    subscribe(priorState, name, set);
  };

  /// RUNTIME | rx:action=copy:path
  self.aCP = function(form, state, name) {
    form.onsubmit = function(evt) {
      evt.preventDefault();
      var obj = get_form(form);
      if (name != "." && name != "") {
        var no = {};
        no[name] = obj;
        obj = no;
      }
      var delta = path_to(state, obj);
      state.view.tree.update(delta);
    };
  };
    
  // RUNTIME | <input ... rx:sync=path ...>
  self.SY = function(el, state, name, ms) {
    var type = ('type' in el) ? el.type.toUpperCase() : 'text';
    var signal = function(value) {
      var obj = {};
      obj[name] = el.value;
      var delta = path_to(state, obj);
      state.view.tree.update(delta);
    };
    if (type == "CHECKBOX") {
      el.onchange = debounce(ms, function(evt) {
        signal(el.checked ? true : false);
      });
    } else if (type == "RADIO") {
      el.onchange = debounce(ms, function(evt) {
        if (el.checked) {
          signal(el.value);
        }
      });
    } else {
      el.onchange = debounce(ms, function(evt) {
        signal(el.value);
      });
      el.onkeyup = el.onchange;
      window.setTimeout(function() {
        signal(el.value);
      }, 1);
    }
  };

  // HELPER | extract all the inputs from the given element and build an object
  var build_obj = function(el, obj) {
    if (el.tagName.toUpperCase() == "TEXTAREA") {
      obj[el.name] = el.value;
    } else if (el.tagName.toUpperCase() == "SELECT") {
      obj[el.name] = el.value;
    } else if (el.tagName.toUpperCase() == "INPUT") {
      var type = ('type' in el) ? el.type.toUpperCase() : 'text';
      if (type == "SUBMIT" || type == "RESET") return;
      if ('name' in el) {
        var name = el.name;
        var insertAt = obj;
        var push = name.endsWith("[]");
        if (push) {
          name = name.substr(0, name.length - 2);
          if (name in insertAt) {
            insertAt[name] = [];
          }
          insertAt = insertAt[name];
          if (type == "CHECKBOX") {
            insertAt.push(el.checked ? true : false);
          } else if (type == "RADIO") {
            if (el.checked) {
              insertAt.push(el.value);
            }
          } else {
            insertAt.push(el.value);
          }
        } else {
          if (type == "CHECKBOX") {
            insertAt[name] = el.checked ? true : false;
          } else if (type == "RADIO") {
            if (el.checked) {
              insertAt[name] = el.value;
            }
          } else {
            insertAt[name] = el.value;
          }
        }
      }
    } else {
      if ('children' in el) {
        var arr = el.children;
        var n = arr.length;
        for (var k = 0; k < n; k++) {
          var ch = el.children[k];
          build_obj(ch, obj);
        }
      }
    }
  };

  // HELPER | return an object of all the inputs of the given form element
  var get_form = function(form) {
    var obj = {};
    build_obj(form, obj);
    return obj;
  };

  // HELPER | create a signal for when things fail; this will write into the the view
  var make_failure_signal = function(state, failureVar) {
    return function(fail) {
      var obj = {};
      obj[failureVar] = fail;
      var delta = path_to(self.pV(state), obj);
      console.log(delta);
      state.view.tree.update(delta);
    };
  };

  /**
 /$$$$$$$$ /$$$$$$  /$$$$$$$   /$$$$$$ 
|__  $$__//$$__  $$| $$__  $$ /$$__  $$
   | $$  | $$  \ $$| $$  \ $$| $$  \ $$
   | $$  | $$  | $$| $$  | $$| $$  | $$
   | $$  | $$  | $$| $$  | $$| $$  | $$
   | $$  | $$  | $$| $$  | $$| $$  | $$
   | $$  |  $$$$$$/| $$$$$$$/|  $$$$$$/
   |__/   \______/ |_______/  \______/ 
                                       */
  
  // RUNTIME | register the page for the uri to the given foo().
  self.PG = function(uri, foo) {
    var head = router;
    for (var k = 0; k < uri.length; k++) {
      var part = uri[k];
      if (!(part in head)) {
        head[part] = {};
      }
      head = head[part];
    }
    head['@'] = foo;
  };

  var route = function(parts, at, head, view) {
    if (at < parts.length) {
      if ('number' in head) {
        var neck = head['number'];
        var val = parseFloat(parts[at]);
        if (!isNaN(val)) {
          for (var branch in neck) {
            view[branch] = val;
            var candidate = route(parts, at + 1, neck[branch], view);
            if (candidate !== null) {
              return candidate;
            }
            delete view[branch];
          }
        };
      }
      if ('text' in head) {
        var neck = head['text'];
        var val = parts[at];
        for (var branch in neck) {
          view[branch] = val;
          var candidate = route(parts, at + 1, neck[branch], view);
          if (candidate !== null) {
            return candidate;
          }
          delete view[branch];
        }
      }
      if ('fixed' in head) {
        var neck = head['fixed'];
        for (var branch in neck) {
          if (branch == parts[at]) {
            var candidate = route(parts, at + 1, neck[branch], view);
            if (candidate !== null) {
              return candidate;
            }
          }
        }
      }
    } else {
      if ('@' in head) {
        return head['@'];
      }
    }
  };

  self.goto = function(viewState, uri) {
    // TODO: figure out a better model.
    window.setTimeout(function() {
      if (uri.startsWith("/")) {
        self.run(document.body, uri, true);
      } else {
        window.location.href = fixHref(uri);
      }
    }, 10);
  };

  self.init = function() {
    self.run(document.body, fixPath(window.location.pathname + window.location.hash), false);
    window.onpopstate = function() {
      console.log("popstate:" + fixPath(window.location.pathname));
      self.run(document.body, fixPath(window.location.pathname + window.location.hash), false);
    };
  };

  // API | Run the page in the given place
  self.run = function(where, path, push) {
    for (conKey in connections) {
      connections[conKey].tree.nuke();
    }
    var parts = (path.startsWith("/") ? path.substring(1) : path).split("/");
    var init = {'session_id':"R" + Math.random()};
    var foo = route(parts, 0, router, init);
    if (foo != null) {
      nuke(where);
      var state = {service: connection, data:null, view:fresh(where), current:'view'};
      foo(where, state);
      state.view.tree.subscribe(state.view.delta);
      state.view.tree.update(init);
      if (push) {
        window.history.pushState({}, '', fixHref(path));
      }
    } else {
      if (path != "/404") {
        self.run(where, "/404");
      } else {
        // default 404
      }
    }
  };

  var identities = {};

  self.SIGNOUT = function() {
    localStorage.removeItem("identity_default");
    self.goto(null, '/');
  };

  self.GOOGLE_SIGN_ON = function(accessToken) {
    connection.InitConvertGoogleUser(accessToken, {
      success:function(payload) {
        identities['default'] = payload.identity;
        localStorage.setItem("identity_default", payload.identity);
        self.goto(null, '/');
      },
      failure: function(reason) {
        console.log("Google failure: " +reason);
      }
    });
  };

  /** for custom elements to learn of the identity */
  self.ID = function(identityName, redirectTo) {
      // IF identity contains dots
      var identity = null;
      var cleanup = function() {};

      var val = localStorage.getItem("identity_" +identityName);
      if (val) {
        identities[identityName] = val;
      }

      if (identityName.startsWith("direct:")) {
        // Use, as is
        identity = identityName.substr(7);
      } else if (identityName in identities) {
        identity = identities[identityName];
        cleanup = function() {
          delete identities[identityName];
          localStorage.removeItem("identity_" + identityName);
        };
      } else {
        // whatever page we are, needs to die which means we need to nuke everything!
        window.setTimeout(function() {
          // TODO: this assumes a full app goes to the window
          self.goto(null, redirectTo);
        }, 10);
        return {abort:true};
      }

      return {abort:false, cleanup:cleanup, identity:identity};
  };

  var customDataSources = {};

  /** provide custom data */
  self.PRCUDA = function(name, foo) {
    customDataSources[name] = foo;
  };

  // <customdata src=src (parameter:x=y)* >
  self.CUDA = function(parent, priorState, src, rxobj, redirectTo, childMaker) {
    var unsub = make_unsub();
    rxobj.__ = debounce(10, function() {
      fire_unsub(unsub);
      nuke(parent);
      var customTree = false;
      if (src in customDataSources) {
        var cons = customDataSources[src];
        if (typeof(cons)=='function') {
          customTree = cons(rxobj, priorState, redirectTo, self);
        }
      }
      if (!customTree) {
        customTree = new AdamaTreeSimple();
      }
      var state = {
        service: priorState.service,
        data: {connection: priorState.connection, tree:customTree, delta:{}, parent:null, path:null},
        view: new_delta_copy(priorState.view),
        current:'data'
      };
      childMaker(state);
      subscribe_state(state, unsub);
    });
  };

  // <connection ...>
  self.CONNECT = function(state, rxobj, identityName, redirectTo) {
    var unsub = {view:function(){}};
    rxobj.__ = debounce(10, function() {
      var co = get_connection_obj(rxobj.name);
      var desired = rxobj.space + "/" + rxobj.key;

      var bind = function(sendNow) {
        unsub.view = state.view.tree.subscribe(function() {
          if (co.ptr == null) {
            return;
          }
          co.ptr.update(state.view.tree.copy(), {
            success:function() {},
            failure: function() {}
          });
        });
        if (sendNow) {
          console.log(state.view.tree.str());
          co.ptr.update(state.view.tree.copy(), {
            success:function() {},
            failure: function() {}
          });
        }
      };

      if (co.ptr != null && co.bound == desired) {
        bind(true);
        return;
      }
      if (co.ptr != null) {
        co.ptr.end();
      }

      var idLookup = self.ID(identityName, redirectTo);
      if (idLookup.abort) {
        return;
      }
      var identity = idLookup.identity;
      var cleanup = idLookup.cleanup;
      co.bound = desired;

      unsub.view();
      var vw = state.view.tree.copy();
      co.space = rxobj.space;
      co.key = rxobj.key;
      co.ptr = connection.ConnectionCreate(identity, rxobj.space, rxobj.key, vw, {
        next: function(payload) {
          if ('data' in payload.delta) {
            co.tree.update(payload.delta.data);
          }
          if ('outstanding' in payload.delta) {
            co.ondecide(payload.delta.outstanding);
          }
        },
        failure: function(reason) {
          // TODO: if not authorized
          /*
          if (false) {
            cleanup();
          }
          */
          co.ptr = null;
          // TODO: schedule a retry? invoke:  rxobj.__();
        },
      });
      bind(false);
    });
  };
  
  self.INTERNAL = function(priorState) {
    return {
      service: priorState.service,
      data: {connection: null, tree:new AdamaTreeSimple(), delta:{}, parent:null, path:null},
      view: new_delta_copy(priorState.view),
      current:'data'
    };
  };

  var recall_email = function(el) {
    if (el.tagName.toUpperCase() == "INPUT") {
      if ("email" == el.type && "email" == el.name) {
        el.value = localStorage.getItem("email_remember");
      }
    } else {
      if ('children' in el) {
        var arr = el.children;
        var n = arr.length;
        for (var k = 0; k < n; k++) {
          recall_email(el.children[k]);
        }
      }
    }
  };

  // RUNTIME | rx:action=adama:sign-in
  self.aSO = function(form, state, identityName, failureVar, forwardTo) {
    var signal = make_failure_signal(state, failureVar);
    window.setTimeout(function() {
      recall_email(form);
    }, 1);
    form.onsubmit = function(evt) {
      evt.preventDefault();
      var req = get_form(form);
      if (req.remember) {
        localStorage.setItem("email_remember", req.email);
      } else {
        localStorage.setItem("email_remember", "");
      }
      connection.AccountLogin(req.email, req.password, {
        success: function(payload) {
          signal(false);
          identities[identityName] = payload.identity;
          localStorage.setItem("identity_" + identityName, payload.identity);
          self.goto(state.view, forwardTo);
        },
        failure: function(code) {
          signal(true);
          // TODO: sort out console logging
          console.log("FAILURE:" + code);
        }
      });
    };
  };

  // RUNTIME | rx:action=adama:sign-up
  self.aSU = function(form, state, failureVar, forwardTo) {
    var signal = make_failure_signal(state, failureVar);
    form.onsubmit = function(evt) {
      evt.preventDefault();
      var req = get_form(form);
      connection.InitSetupAccount(req.email, {
        success: function(payload) {
          signal(false);
          localStorage.setItem("email", req.email);
          self.goto(state.view, forwardTo);
        },
        failure: function(code) {
          signal(true);
          console.log("FAILURE:");
        }
      });
    };
  };

  // RUNTIME | rx:action=adama:set-password
  self.aSP = function(form, state, failureVar, forwardTo) {
    var signal = make_failure_signal(state, failureVar);
    form.onsubmit = function(evt) {
      evt.preventDefault();
      var req = get_form(form);
      if (!('email' in req)) {
        req.email = localStorage.getItem('email');
      }
      connection.InitCompleteAccount(req.email, false, req.code, {
        success: function(init) {
          console.log(init);
          var identity = init.identity;
          connection.AccountSetPassword(init.identity, req.password, {
            success: function() {
              signal(false);
              localStorage.setItem("identity_default", identity);
              self.goto(state.view, forwardTo);
            },
            failure: function(reason) {
              signal(true);
            }
          });

        },
        failure: function(reason) {
          signal(true);
        }
      });
    };
  };
  
  // RUNTIME | rx:action=send:$channel
  self.aSD = function(form, state, channel, failureVar) {
    var signal = make_failure_signal(state, failureVar);
    form.onsubmit = function(evt) {
      evt.preventDefault();
      var start = performance.now();
      state.data.connection.ptr.send(channel, get_form(form), {
        success: function(payload) {
          signal(false);
          console.log("Success|" + payload.seq + ";latency=" + (performance.now() - start)); // TODO: graph it
        },
        failure: function(reason) {
          signal(true);
          console.log("FAILURE TO SEND: " + reason); // TODO: log it
        }
      });
    };
  };

  window.rxhtml = self;
  return self;
})();");
}
